#!/bin/bash

# Do not run this script manually; use crystallize instead.

#Script should run as root.
[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"

#Script should exit if any operation fails.
set -e
set -x

echo "The crystal will have the following address when it is ready: $CrystalID"

echo "Time (log stage 1) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

crystalWorkdir=$(crystallize-getconf 'WorkDirectory')
export crystalWorkdir

echo "Time (log stage 1) from http://timeapi.org/: "

set +e
wget --delete-after --warc-file="$crystalWorkdir/$CrystalID.time-start" -e robots=off "http://www.timeapi.org/utc/now?\Y-\m-\d-\H-\M-\S-\6N-\z";
set -e

echo "Time (log stage 1b) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Working in $crystalWorkdir".

echo "Arguments: " "$@"

echo "Configuration: "

cat /usr/local/etc/crystallize.conf

crystalTitle=$(crystallize-getconf 'InstallationIdentifier')
export crystalTitle
crystalCollection=$(crystallize-getconf 'Collection')
export crystalCollection
crystallizePassphrase=$(crystallize-getconf 'Passphrase')
export crystallizePassphrase

export CrystalID="$1"

echo "Environment: "

uname -ap

echo "Environment variables: "

printenv

echo "Network environment: "

echo "IP address from DNS: "

dig +short myip.opendns.com @resolver1.opendns.com

echo "IP address from http://icanhazip.com/: "

set +e
wget --delete-after --warc-file="$crystalWorkdir/$CrystalID.ip" -e robots=off http://icanhazip.com/;
set -e

echo "Time (log stage 2) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Time (log stage 2) from http://timeapi.org/: "

set +e
wget --delete-after --warc-file="$crystalWorkdir/$CrystalID.time-env" -e robots=off "http://www.timeapi.org/utc/now?\Y-\m-\d-\H-\M-\S-\6N-\z";
set -e

echo "Time (log stage 2b) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "The crystal will have the following address when it is ready: $CrystalID"

printf "%s" "$crystallizePassphrase" > "$crystalWorkdir/$CrystalID".tmp

CrystallizeFirstArg="$1"
shift

#Needed because readlink isn't available in OS X. From http://stackoverflow.com/questions/17577093/how-do-i-get-the-absolute-directory-of-a-file-in-bash
function myreadlink() {
  (
  cd "$(dirname "$1")"         # or  cd ${1%/*}
  echo "$PWD"/"$(basename "$1")" # or  echo $PWD/${1##*/}
  )
}

export -f myreadlink

#Resolve relative paths in the arguments, since GNU tar's -P doesn't
CrystallizePaths=( "$@" )
# shellcheck disable=SC2128
echo "First entry in array: $CrystallizePaths"
for i in "${!CrystallizePaths[@]}"; do
    #resolve path
    echo "Trying to resolve ${CrystallizePaths[$i]}..."
    abspath="$(myreadlink "${CrystallizePaths[$i]}")"
    CrystallizePaths[$i]="$abspath"
done

echo "Building local index..."

hashdeep -c md5,sha1,sha256,tiger,whirlpool -o fbsd "$crystalWorkdir/""$CrystallizeFirstArg" "${CrystallizePaths[@]}" "$crystalWorkdir/$CrystalID" | tee "$crystalWorkdir/$CrystalID.local.idx"

echo "Building deep index..."
hashdeep -c md5,sha1,sha256,tiger,whirlpool -o fbsd -r "$crystalWorkdir/""$CrystallizeFirstArg" "${CrystallizePaths[@]}" "$crystalWorkdir/$CrystalID" | tee "$crystalWorkdir/$CrystalID.deep.idx"

mkfifo "$crystalWorkdir/$CrystalID.pax"

tar -cv -P -S --format pax "$crystalWorkdir/""$CrystallizeFirstArg" "${CrystallizePaths[@]}" "$crystalWorkdir/$CrystalID" "$crystalWorkdir/$CrystalID.local.idx" "$crystalWorkdir/$CrystalID.deep.idx" "$crystalWorkdir/$CrystalID.tmp" "$crystalWorkdir/$CrystalID.tmp" "$crystalWorkdir/$CrystalID.time-start.warc.gz" "$crystalWorkdir/$CrystalID.ip.warc.gz" "$crystalWorkdir/$CrystalID.time-env.warc.gz" > "$crystalWorkdir/$CrystalID.pax" &
tarpid="$!"
sleep 1

unset opt
unset optb

set +e
#If GNU/Linux, set opt to 1 and unset optb; otherwise opposite
[[ $OSTYPE = *inux* ]] && (( opt++ ))
[[ $OSTYPE != *inux* ]] && (( optb++ ))
set -e

#If the opt(b) variable is unset, insert the text after "opt(b)+"
#opt is for GNU/Linux; optb is for others
script ${optb+/dev/null} ${opt+-e} ${opt+-c} crystallize-internal-xz ${opt+/dev/null} &
sleep 1

mkfifo "$crystalWorkdir/$CrystalID".coal5
mkfifo "$crystalWorkdir/$CrystalID".coal5-md5deep

gpg --yes -c -v --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp - < "$crystalWorkdir/$CrystalID".pax.xz | tee -a "$crystalWorkdir/$CrystalID".coal5 "$crystalWorkdir/$CrystalID".coal5-md5deep > /dev/null &
sleep 1

echo "Computing checksum..."

#FIXME: Continues even when hashdeep is missing
hashdeep -c md5,sha1,sha256 -o fbcpsde - < "$crystalWorkdir/$CrystalID".coal5-md5deep | tee "$crystalWorkdir/$CrystalID.checksums" &
sleep 1

echo "Sending..."

#set +e
script ${optb+/dev/null} ${opt+-e} ${opt+-c} crystallize-internal-ia ${opt+/dev/null}
#echo $?
#echo "Blahblahblah"
#set -e
sleep 1

wait "$tarpid"
exitcode="$?"

echo "Waiting..."
wait
echo "Done waiting."

rm -v "$crystalWorkdir/$CrystalID".pax
rm -v "$crystalWorkdir/$CrystalID".pax.xz
rm -v "$crystalWorkdir/$CrystalID".coal5
rm -v "$crystalWorkdir/$CrystalID".coal5-md5deep

#Ignore exit code 1 from tar on Linux, which indicates files changed while reading; see http://stackoverflow.com/questions/20318852/tar-file-changed-as-we-read-it
if [ "$exitcode" != "0" ] && [[ $OSTYPE != *inux* ]]; then
    exit $exitcode
fi
if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
    exit $exitcode
fi

echo "Retrieving remote index..."

wget --delete-after --save-headers --output-document - "https://archive.org/metadata/$CrystalID/" | tee "$crystalWorkdir/$CrystalID.json"

script ${optb+/dev/null} ${opt+-e} ${opt+-c} crystallize-internal-xz-b ${opt+/dev/null}

echo "Copying indices..."

rsync -av --progress --checksum "$crystalWorkdir/$CrystalID.local.idx" "$crystalWorkdir/$CrystalID.deep.idx" "$crystalWorkdir/$CrystalID.checksums" "$crystalWorkdir/$CrystalID.json.xz" /Ember\ Library/Futuramerlin\ Projects/Data/Crystal\ Index/

echo "rsynced..."

#Clear the screen
printf "\033c"

#Delete everything except log
#echo "Cleaning up..."
#yes | rm -rv "${CrystallizePaths[@]}"
#echo "Done cleaning up..."

echo "Time (log stage 3) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Time (log stage 3) from http://timeapi.org/: "

set +e
wget --delete-after --warc-file="$crystalWorkdir/$CrystalID.time-done" -e robots=off "http://www.timeapi.org/utc/now?\Y-\m-\d-\H-\M-\S-\6N-\z";
set -e

echo "Time (log stage 3b) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

#Clear the screen
printf "\033c"

echo "Finishing $CrystalID..."

echo "Please wait..."
