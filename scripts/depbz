#!/usr/bin/env emberPlatformResolver-bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

if [[ "$(whoami)" == "root" ]]; then
    [[ -e "/tmp/depbz.lock" ]] && die "depbz is already running! Only one depbz instance can be running at a time."
fi

readlink -f ~ > "/tmp/depbzHome"
((EUID)) && exec sudo -- "$0" "$@"
depbzHome="$(</tmp/depbzHome)"

touch "/tmp/depbz.lock"

# -t 1 checks if file descriptor 1 "is opened on a terminal" (â€”GNU coreutils 8.25 manpage for test)
if [[ -t 1 ]]; then
    warn-timeout "BE CAREFUL! On some tars (not GNU), this can overwrite important files if the files in the tar archive are stored with absolute paths. Eek!"
fi

finish() {
    rm -f "/tmp/depbz.lock"
    rm -f "/tmp/depbzHome"
    trap - ERR
    (
        cd "/${crystalWorkdir:?}/" || die
        if [[ -e "/$crystalWorkdir/${streamId:?}" ]]; then
            rm -r "/$crystalWorkdir/${streamId:?}"
        fi
    )
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} while finishing depbz execution."' ERR
}
trap finish EXIT

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

shopt -s extglob

crystalWorkdir="$(crystallize-getconf WorkDirectory)"
cd "$crystalWorkdir" || exit 1

streamId="depbz-$(date-uuid)"
mkdir "./$streamId"

streamDir="$crystalWorkdir/$streamId"
mkdir -p "$streamDir"

useCustomPassphrase="false"
crystallizePassphrase=""
if [[ "$1" == "--passphrase" ]]; then
    useCustomPassphrase="true"
    shift
    crystallizePassphrase="$1"
    shift
fi

date="$1"
destDirPrefix="$2"

if [[ -z "$destDirPrefix" ]]; then
    destDirPrefix="."
fi
destDir="$(readlink -f "$destDirPrefix/$streamId")"

[[ -d "$destDirPrefix" ]] || die "The requested destination directory $destDirPrefix does not appear to be a directory!"
mkdir "$destDir"

encrypted=""
if [[ -e "./Packed-$date.pbze" && ! -d "./Packed-$date.pbze" ]]; then
    encrypted="true"
else
    if [[ -e "./Packed-$date.pbz" && ! -d "./Packed-$date.pbz" ]]; then
        encrypted="false"
    else
        die "Could not find specified date (pbz or pbze file). Please make sure you have cded to the directory it's in."
    fi
fi
if [[ "$encrypted" == "true" ]]; then
    [[ -e "./Packed-$date.pdxe" && ! -d "./Packed-$date.pdxe" ]] || die "Could not find encrypted bill of materials (pdxe) file."
    [[ -e "./Packed-$date.pmbze" && ! -d "./Packed-$date.pmbze" ]] || die "Could not find encrypted pmbz (pmbze) file."
    if [[ "$useCustomPassphrase" == "false" ]]; then
        passphraseLocation="$depbzHome/.pbz"
        [[ -e "$passphraseLocation" && ! -d "$passphraseLocation" ]] || die "Could not find passphrase file, expected to be at $passphraseLocation. Please create it, or specify a passphrase using the --passphrase option."
        crystallizePassphrase="$(<~/.pbz)"
    fi
    passphraseFile="$streamDir/passphrase"
    echo "$crystallizePassphrase" > "$passphraseFile"
    cp "./Packed-$date.pbze" "$streamDir/.tmp-$date.gpg"
    gpg --yes --batch --passphrase-file "$passphraseFile" "$streamDir/.tmp-$date.gpg"
    cp "./Packed-$date.pdxe" "$streamDir/.tmp-pdx-$date.gpg"
    gpg --yes --batch --passphrase-file "$passphraseFile" "$streamDir/.tmp-pdx-$date.gpg"
    cp "./Packed-$date.pmbze" "$streamDir/.tmp-pmbz-$date.gpg"
    gpg --yes --batch --passphrase-file "$passphraseFile" "$streamDir/.tmp-pmbz-$date.gpg"
    mv -v "$streamDir/.tmp-$date" "$streamDir/.tmp-$date.tbz2"
    mv -v "$streamDir/.tmp-pdx-$date" "$streamDir/Packed-$date.pdx.bz2"
    mv -v "$streamDir/.tmp-pmbz-$date" "$streamDir/.tmp-$date.pmb.tbz2"
else
    cp "./Packed-$date.pbz" "$streamDir/.tmp-$date.tbz2"
    cp "./Packed-$date.pdx" "$streamDir/Packed-$date.pdx.bz2"
    cp "./Packed-$date.pmbz" "$streamDir/.tmp-$date.pmb.tbz2"
fi
bunzip2 "$streamDir/Packed-$date.pdx.bz2"
cp "$streamDir/Packed-$date.pdx" "$destDir/"
# FIXME: On some tars (not GNU), this can overwrite important files if the files in the tar archive are stored with absolute paths. Eek!
cd "$destDir" || die "Could not cd to the destination directory $destDir!"
tar -xvf "$streamDir/.tmp-$date.tbz2"
tar -xvf "$streamDir/.tmp-$date.pmb.tbz2"
mv "./.tmp.Packed-$date.pmb" "./Packed-$date.pmb"
