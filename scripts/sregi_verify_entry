#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

failCheckFile="$1"
if [[ -e "$failCheckFile" ]]; then
    die "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"! Aborting."
else
    echo "$0 running in $(readlink -f "$(pwd)") with the arguments $@" > "$failCheckFile" || echo "$0 running in an unknown directory with the arguments $@" > "$failCheckFile"
fi
shift
success() {
    rm -f "${failCheckFile:?}"
    exit 0
}

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

fail() {
    if [[ "$dropFailed" == "true" ]]; then
        dbDir="$sregDir"/Failed\ Fsck/
        mkdir -p "$dbDir"
        mv "$1" "$dbDir/"
        die "Error verifying stream registry database entry $knownHash! Marking entry as corrupted."
    fi
    die "Error verifying stream registry database entry $knownHash!"
}

fsckStatusFile="$2"

if [[ "--quick" == "$2" ]]; then
    quick="true"
    fsckStatusFile=""
fi

if [[ "--quick" == "$3" ]]; then
    quick="true"
fi

skipCache=""
dropFailed="false"
if [[ "--skip-cache" == "$3" || "--skip-cache" == "$4" ]]; then
    skipCache="--skip-cache"
fi
if [[ "--skip-drop-failed" == "$3" || "--skip-drop-failed" == "$4" ]]; then
    skipCache="--skip-cache"
    dropFailed="true"
fi
if [[ "--drop-failed" == "$3" || "--drop-failed" == "$4" ]]; then
    dropFailed="true"
fi

knownHash="(Failed to retrieve entry hash!)"
knownHashTemp="$(sregi_hash_from_file "$1")" || fail "$1"
if [[ -n "$knownHashTemp" ]]; then
    knownHash="$knownHashTemp"
fi

exitCode=""
if [[ "$quick" == "true" ]]; then
    echo "Started quick-checking stream registry database entry $knownHash."
    sregi_hashpointer_sane --sreg-dir "$sregDir" "$1"
    exitCode="$?"
else
    #echo "Started verifying stream registry database entry $knownHash."
    sreg_read_stream --sreg-dir "$sregDir" --entry-path "$1" --checksum "$knownHash" --disallow-hash-pointer "$skipCache" < "$1" > /dev/null
    exitCode="$?"
fi

if [[ "$exitCode" == "0" ]]; then
    if [[ -n "$fsckStatusFile" ]]; then
        numberExpected="$(<"$fsckStatusFile")"
        numberProcessedFile="$fsckStatusFile.done"
        if ! [[ -f "$numberProcessedFile" ]]; then
            numberProcessed="1"
        else
            numberProcessed="$(<"$numberProcessedFile")"
            numberProcessed=$(( numberProcessed + 1 ))
        fi
        echo "$numberProcessed" > "$numberProcessedFile"
        if [[ "$numberExpected" == "0" ]]; then
            numberExpected="-1"
        fi
        numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
        echo "Verified stream registry database entry $knownHash: finished #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
    else
        #echo "Verified stream registry database entry $knownHash."
        true
    fi
    success
else
    fail "$1"
fi

success
