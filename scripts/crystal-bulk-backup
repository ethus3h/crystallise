#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

check="true"
if [[ "$1" == "--no-check-existing" ]]; then
    check="false"
    shift
fi

backupLocation="$(crystallize-getconf BackupLocation)"

mkdir -p "$backupLocation"

echo 'Building backup indices'

cd "$backupLocation" || die "Could not cd to newly created directory! This should never happen."
touch ".cbb.isBackupDir"

[[ -e '.git' ]] || git init
print $'items\n' >> .gitignore
print $'items.failed-check\n' >> .gitignore
print $'repositories\n' >> .gitignore
print $'stream-registries\n' >> .gitignore
removeDuplicateLines '.gitignore' | sponge '.gitignore'

git add .gitignore
git commit -m "Update" > /dev/null || true
git add -A .
git commit -m "Update" > /dev/null || true

cbbConfigDir="$(crystallize-getconf ConfigDir)"
mkdir -p "$cbbConfigDir"/crystallize/cbb
touch "$cbbConfigDir"/crystallize/cbb/items
touch "$cbbConfigDir"/crystallize/cbb/repositories
touch "$cbbConfigDir"/crystallize/cbb/stream-registries

mkdir -p 'crystal-backup-meta/cbb-index'
mkdir -p 'crystal-backup-meta/cbb-index/items.packs-done'
mkdir -p 'items'
mkdir -p 'repositories'
mkdir -p 'stream-registries'

# Build backup indices (this won't finish building the sreg/crystal indices because they need the git repos cloned to make them)
echo 'Syncing and merging configuration...'

rsync -a --checksum "$(crystallize-getconf ConfigLocation)" "crystal-backup-meta/cbb-index/ember.conf" &> /dev/null
crystallize-getconf 'Passphrase' > "crystal-backup-meta/cbb-index/passphrase.default"

repoPattern="$(<"$(ember-getconf DataDir)/repository-url-pattern.txt")"
cat "$(ember-getconf DataDir)/repositories"{,-nonpublic}.lst | while read -r "repo"; do
    echo $'\n'"${repoPattern/\@REPOSITORY\@/$repo}" >> "crystal-backup-meta/cbb-index/repositories"
done

print $'\n' >> "crystal-backup-meta/cbb-index/items"
cat "$cbbConfigDir"/crystallize/cbb/items >> "crystal-backup-meta/cbb-index/items"
removeDuplicateLines 'crystal-backup-meta/cbb-index/items' | sponge 'crystal-backup-meta/cbb-index/items'

print $'\n' >> "crystal-backup-meta/cbb-index/repositories"
cat "$cbbConfigDir"/crystallize/cbb/repositories >> "crystal-backup-meta/cbb-index/repositories"
removeDuplicateLines 'crystal-backup-meta/cbb-index/repositories' | sponge 'crystal-backup-meta/cbb-index/repositories'

print $'\n' >> "crystal-backup-meta/cbb-index/stream-registries"
cat "$cbbConfigDir"/crystallize/cbb/stream-registries >> "crystal-backup-meta/cbb-index/stream-registries"
print $'\n' >> "crystal-backup-meta/cbb-index/stream-registries"
cat "$(ember-getconf DataDir)/stream-registries.lst" >> "crystal-backup-meta/cbb-index/stream-registries"
removeDuplicateLines 'crystal-backup-meta/cbb-index/stream-registries' | sponge 'crystal-backup-meta/cbb-index/stream-registries'

# Clone git repositories
(
    mkdir -p repositories
    cd repositories
    git-bulk-sync < "../crystal-backup-meta/cbb-index/repositories"
    mkdir -p submodules
    cd submodules
    git-bulk-sync < "$(ember-getconf DataDir)/repositories-submodules.lst"
) || die

shopt -s dotglob

cbbStreamRegistries="$(<crystal-backup-meta/cbb-index/stream-registries)"
while read -r streamRegistryPath; do
    if [[ -n "$streamRegistryPath" ]]; then
        echo "Getting identifiers for the stream registry in $streamRegistryPath..."
        streamRegistryFullPath="repositories/$streamRegistryPath"
        streamRegistryRepoName="${streamRegistryPath%%\/*}"
        streamRegistryPathInRepo="${streamRegistryPath#*\/}"
        (
            if ! [[ -d "repositories/$streamRegistryRepoName" ]]; then
                cd repositories || die "Could not cd to repositories directory!"
                git clone --no-checkout "$streamRegistryRepoName.git"
                cd "$streamRegistryRepoName" || die "Could not cd to repository directory $(pwd)/repositories/$streamRegistryRepoName!"
                git init
                git config core.sparseCheckout true
                echo "$streamRegistryPathInRepo*" > .git/info/sparse-checkout
                git checkout
            else
                cd "repositories/$streamRegistryRepoName" || die "Could not cd to repository directory $(pwd)/repositories/$streamRegistryRepoName!"
            fi
            git pull origin
        )
        # Go through this sreg and add all the crystals it uses to the index

        echo "Getting identifiers for localstore packs in $streamRegistryPath..."

        spushd "$streamRegistryFullPath/Packs/" || die "Could not pushd to Packs directory!"

        # Normal remote pack pointers
        for identFile in *.identifier; do
            if ! [[ -e "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/${identFile%.identifier}" ]]; then
                echo "$(<"$identFile")" >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                touch "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/${identFile%.identifier}"
            fi
        done

        for pointerFile in *.bundle.pointer; do
            if ! [[ -e "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/${pointerFile%.bundle.pointer}" ]]; then
                # This pack doesn't have a .identifier file, so it needs to be extracted separately
                packTempDir="$(tempDir)"
                packDir="$PWD"
                spushd "$packTempDir" || die "Could not pushd to $packTempDir!"
                unxz --stdout - < "$packDir/$pointerFile" | tar -xf -
                # MAINTENANCE: Code copied and tweaked from sreg_read_stream
                crystalFilePattern=".*.crystal-data"
                shopt -u failglob
                shopt -s nullglob
                crystalFilePatternMatches=( $crystalFilePattern )
                shopt -s failglob
                shopt -u nullglob
                localStoreCrystalName="${crystalFilePatternMatches[0]}"
                if ! [[ -e "$localStoreCrystalName" ]]; then
                    warn "Crystal info could not be found in the pointer for $pointerFile, so giving up immediately and skipping this one (retrying probably wouldn't help this)."
                    touch "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/${pointerFile%.bundle.pointer}"
                    spopd || die "Could not popd!"
                    continue
                fi
                [[ -e "$localStoreCrystalName/identifier" ]] || die "Crystal info was found, but no crystal identifier was found in the pointer for $pointerFile."
                echo "$(<"$localStoreCrystalName"/identifier)" >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                touch "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/${pointerFile%.bundle.pointer}"
                spopd || die "Could not popd!"
                rm -r "$packTempDir"
            fi
        done

        spopd || die "Could not popd!"

        echo "Getting identifiers for pointers in $streamRegistryPath..."

        spushd "$streamRegistryFullPath" || die "Could not pushd to stream registry directory!"
        shopt -s globstar
        for potentialPointer in {0..9}/** {a..f}/**; do
            if [[ -f "$potentialPointer" ]]; then
                if ! [[ -e "$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$potentialPointer" ]]; then
                    typeSignature="$(head -c 36 "$potentialPointer" | tr -d '\0')"
                    if [[ "$typeSignature" == "760fa662-89cf-4ebd-9664-150b7637ddd4" ]]; then # Hash pointer
                        warn "A hash pointer, $potentialPointer, is present in the pointer database!"
                    elif [[ "$typeSignature" == "a5e2f296-3085-49c0-8f48-24ea436b7a8b" ]]; then # Standard remote pointer
                        pointerTempDir="$(tempDir)"
                        pointerDir="$PWD"
                        spushd "$pointerTempDir" || die "Could not pushd to $pointerTempDir!"
                        tail -c +167 "$pointerDir/$potentialPointer" | unxz --stdout - | tar -xf -
                        crystallize-get-identifier-from-pointer ./*.crystal >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                        spopd || die "Could not popd!"
                        rm -r "$pointerTempDir"

                        hashFull="$(basename "$potentialPointer")"
                        hashA="${hashFull:0:1}"
                        hashB="${hashFull:1:1}"
                        hashC="${hashFull:2:1}"
                        hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$hashA/$hashB/$hashC"
                        [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                        touch "$hashSubpath/$hashFull"
                    elif [[ "$typeSignature" == "c39f8657-384b-438b-a5a2-eece17147589" ]]; then # LocalStore pointer
                        true # These we don't mark as done, since after the next sreg_flush_localstore is run, they will need to be re-read.
                    elif [[ "$typeSignature" == "2fae2004-94bb-4aa8-a01a-fc44298efc2c" ]]; then # Remote pack pointer
                        # We already got these when we did all the packs, so just skip them
                        hashFull="$(basename "$potentialPointer")"
                        hashA="${hashFull:0:1}"
                        hashB="${hashFull:1:1}"
                        hashC="${hashFull:2:1}"
                        hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$hashA/$hashB/$hashC"
                        [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                        touch "$hashSubpath/$hashFull"
                    elif [[ "$typeSignature" == "209fcfdf-d1ad-4345-8ef7-1fdc2d583d49" ]]; then # Remote pack pointer, with pointer data in the pointer
                        # Like the normal remote pack files, we need to get the identifier out of the pointer as a tar file.
                        pointerTempDir="$(tempDir)"
                        pointerDir="$PWD"
                        spushd "$pointerTempDir" || die "Could not pushd to $pointerTempDir!"
                        tail -c +167 "$pointerDir/$potentialPointer" | unxz --stdout - | tar -xf -
                        # MAINTENANCE: Code copied and tweaked from sreg_read_stream
                        crystalFilePattern=".*.crystal-data"
                        shopt -u failglob
                        shopt -s nullglob
                        crystalFilePatternMatches=( $crystalFilePattern )
                        shopt -s failglob
                        shopt -u nullglob
                        localStoreCrystalName="${crystalFilePatternMatches[0]}"
                        if ! [[ -e "$localStoreCrystalName" ]]; then
                            warn "Crystal info could not be found in the pointer for $pointerFile, so giving up immediately and skipping this one (retrying probably wouldn't help this)."
                            touch "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/${pointerFile%.bundle.pointer}"
                            spopd || die "Could not popd!"
                            continue
                        fi
                        echo "$(<"$localStoreCrystalName"/identifier)" >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                        spopd || die "Could not popd!"
                        rm -r "$pointerTempDir"

                        hashFull="$(basename "$potentialPointer")"
                        hashA="${hashFull:0:1}"
                        hashB="${hashFull:1:1}"
                        hashC="${hashFull:2:1}"
                        hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$hashA/$hashB/$hashC"
                        [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                        touch "$hashSubpath/$hashFull"
                    elif [[ "$typeSignature" == "45baff46-8db7-46f6-aad9-de5f713b02fe" ]]; then # URL pointer
                        echo "URL pointer found: $potentialPointer"
                        iaIdentifierWithPath="$(tail -c +167 "$potentialPointer" | head -n 1)"
                        echo "${iaIdentifierWithPath%%/*}" >> "$backupLocation/crystal-backup-meta/cbb-index/items"

                        hashFull="$(basename "$potentialPointer")"
                        hashA="${hashFull:0:1}"
                        hashB="${hashFull:1:1}"
                        hashC="${hashFull:2:1}"
                        hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$hashA/$hashB/$hashC"
                        [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                        touch "$hashSubpath/$hashFull"
                    else
                        warn "The file at $PWD/$potentialPointer has the unknown pointer type signature $typeSignature."
                    fi
                fi
            fi
        done
        unset GLOBIGNORE
        shopt -u globstar
        spopd || die "Could not popd!"
        echo "Done getting identifiers for the stream registry in $streamRegistryPath..."
    fi
done <<< "$cbbStreamRegistries"
pwd
removeDuplicateLines 'crystal-backup-meta/cbb-index/items' | sponge 'crystal-backup-meta/cbb-index/items'

git add -A .
git commit -m "Update" > /dev/null || true

echo "Done collecting crystal identifiers, beginning fetching crystals..."

# Actually download and/or check the selected crystals now
mkdir -p "items"
cd items || die "Could not cd to newly created items directory"
cbbCrystals="$(<../crystal-backup-meta/cbb-index/items)"
while read -r crystal; do
    if [[ -n "$crystal" ]]; then
        if [[ -e "$crystal" ]]; then
            if [[ "$check" == "false" ]]; then
                continue
            fi
        fi
        crystallize-backup "$crystal"
    fi
done <<< "$cbbCrystals"

git add -A .
git commit -m "Update" > /dev/null || true

echo "Done backing up crystals!"
