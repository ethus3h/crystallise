#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"

failCheckFile="$1"
shift

skipCount="0"
if [[ "$1" == "--skip" ]]; then
    shift
    skipCount="$1"
    shift
fi
if [[ "$skipCount" -gt "0" ]]; then
    skipFile="$failCheckFile.skip"
    skippedSoFar="$(<"$skipFile")"
    skippedSoFar=$(( skippedSoFar + 1 ))
    if [[ "$skippedSoFar" -le "$skipCount" ]]; then
        if [[ "$skippedSoFar" -eq "$skipCount" ]]; then
            # Mirror the argument parsing code here so we can find the fsckStatusFile
            if [[ "$1" == "--sreg-dir" ]]; then
                shift
                shift
            fi
            if [[ "$1" == "--no-verify" ]]; then
                shift
            fi
            fsckStatusFile="$3"
            numberProcessedFile="$fsckStatusFile.done"
            echo "$skipCount" > "$numberProcessedFile"
        fi
        echo "$skippedSoFar" > "$skipFile"
        echo "(skipped $skippedSoFar out of $skipCount...)"
        exit 0
    fi
fi

success() {
    exit 0
}

if [[ -e "$failCheckFile" ]]; then
    warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"!"
else
    echo "$0 running at $(emdate) in $(readlink -f "$(pwd)") with the remaining arguments $*" > "$failCheckFile" || echo "$0 running at $(emdate) in an unknown directory with the remaining arguments $*" > "$failCheckFile"
    success() {
        rm -f "${failCheckFile:?}"
        exit 0
    }
fi

finish() {
    trap - ERR
    (
    crystalWorkdir="$(crystallize-getconf WorkDirectory)"
    cd "/${crystalWorkdir:?}/" || die
    if [[ -n "$streamId" ]]; then
        if [[ -e "/$crystalWorkdir/${streamId:?}" ]]; then
            rm -r "/$crystalWorkdir/${streamId:?}"
        fi
    fi
    )
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate) while finishing sregi_copy_write."' ERR
}
trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; finish; exit 1' ERR
trap finish EXIT

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

if ! [[ -f "$1" ]]; then
    error-notify "Item must be a regular file."
    exit 1
fi
fsckStatusFile="$3"
if [[ -n "$fsckStatusFile" ]]; then
    numberExpected="$(<"$fsckStatusFile")"
    numberProcessedFile="$fsckStatusFile.done"
    if ! [[ -f "$numberProcessedFile" ]]; then
        numberProcessed="1"
    else
        numberProcessed="$(<"$numberProcessedFile")"
        numberProcessed=$(( numberProcessed + 1 ))
    fi
    echo "$numberProcessed" > "$numberProcessedFile"
    if [[ "$numberExpected" == "0" ]]; then
        # wtf?
        numberExpected="-1"
    fi
    numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
    echo "Copying item $1: #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
else
    echo "Copying item $1."
fi
# FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
# shellcheck disable=SC2034
destinationRootLength="$4"
# FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
# shellcheck disable=SC2034
sourceNameReplaced="${1/%.git.686fc528-0e8e-4724-91bb-c103cdcdd592/.git}"
sourceNameReplaced="${sourceNameReplaced//\/.git.686fc528-0e8e-4724-91bb-c103cdcdd592\//\/.git\/}"
targetLength=${#sourceNameReplaced}
#echo "$destinationRootLength - $targetLength"
destinationName="$2/${sourceNameReplaced:destinationRootLength:targetLength}"
#echo "$destinationName"
sourceChecksum="$(sregi_hash_from_file "$1")"

destinationChecksum=""

# There are three possibilities. 1: The file already exists and matches checksum. 2: The file already exists and doesn't match checksum. 3: The file does not exist. In the first case, skip the file; in the second and third cases, copy the file.
if [[ -f "$destinationName" ]]; then
    if [[ -e ]]
    if [[ "$sourceChecksum" == "$(sha512sum < "$destinationName" | awk '{print $1;}')" ]]; then
    destinationChecksum="$(sha512sum < "$destinationName" | awk '{print $1;}')"
    if [[ "$sourceChecksum" == "$(sha512sum < "$destinationName" | awk '{print $1;}')" ]]; then
        echo "(Skipping matching normal file $destinationName)"
        success
    fi
    sourceChecksum="$(sha512sum < "$1" | awk '{print $1;}')"
    if [[ "$pointerTypeSignature" == "760fa662-89cf-4ebd-9664-150b7637ddd4" ]]; then
        trap 'warn "A nonfatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; hasEncounteredError="1"' ERR
        assumePointerDbEntryFileExists="true"
        if [[ "$sregNoVerify" == "true" ]]; then
            destinationChecksum="$(tail -c +38 "$destinationName" | head -c 129)"
            pointerDbEntryFile="$sregDir/${destinationChecksum:0:1}/${destinationChecksum:1:1}/${destinationChecksum:2:1}/$destinationChecksum"
            if ! [[ -e "$pointerDbEntryFile" ]]; then
                assumePointerDbEntryFileExists="pointerDbEntryFile $pointerDbEntryFile missing!"
            else
                innerPointerTypeSignature="$(head -c 36 "$pointerDbEntryFile")"
                if [[ "$innerPointerTypeSignature" == "c39f8657-384b-438b-a5a2-eece17147589" ]]; then
                    localStoreToTest="$sregDir/LocalStore/${destinationChecksum:0:1}/${destinationChecksum:1:1}/${destinationChecksum:2:1}/$destinationChecksum"
                    if ! [[ -e "$localStoreToTest" ]]; then
                        assumePointerDbEntryFileExists="LocalStore $localStoreToTest missing!"
                    fi
                fi
            fi
        else
            destinationChecksum="$(tail -c +38 "$destinationName" | head -c 129)"
            sreg_read_stream --sreg-dir "$sregDir" < "$destinationName" > /dev/null || hasEncounteredError="1"
        fi
        if [[ "$destinationChecksum" == "$sourceChecksum" && "$hasEncounteredError" == "0" && "$assumePointerDbEntryFileExists" == "true" ]]; then
            # The file is already present, pointerized, and readable, so exit without doing anything.
            echo "(Nothing done for $1.)"
            success
        else
            warn "(Note: Destination pointer $destinationName did not match source checksum or could not be read (source checksum: $sourceChecksum / destinationChecksum: $destinationChecksum /  stream read status: $hasEncounteredError / quick check status: $assumePointerDbEntryFileExists / destination pointer contents: $(<"$destinationName")): the source file has probably been changed. Removing and recreating.)"
            # cat "$destinationName"
            rm "${destinationName:?}"
        fi
    else
        if [[ "$pointerTypeSignature" != "760fa662-89cf-4ebd-9664-150b7637ddd4" ]] && # Hash pointer
            [[ "$pointerTypeSignature" != "a5e2f296-3085-49c0-8f48-24ea436b7a8b" ]] && # Standard remote pointer
            [[ "$pointerTypeSignature" != "c39f8657-384b-438b-a5a2-eece17147589" ]] && # LocalStore pointer
            [[ "$pointerTypeSignature" != "209fcfdf-d1ad-4345-8ef7-1fdc2d583d49" ]] && # Remote pack pointer
            [[ "$pointerTypeSignature" != "2fae2004-94bb-4aa8-a01a-fc44298efc2c" ]] && # Also remote pack pointer
            [[ "$pointerTypeSignature" != "209fcfdf-d1ad-4345-8ef7-1fdc2d583d49" ]] && # Pack pointer data is in the pointer
            [[ "$pointerTypeSignature" != "45baff46-8db7-46f6-aad9-de5f713b02fe" ]] # URL pointer
        then
            if [[ "$sourceChecksum" == "$(sha512sum < "$destinationName" | awk '{print $1;}')" ]]; then
                echo "(Skipping matching normal file $destinationName)"
                success
            fi
        fi
    fi
fi
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
crystalWorkdir="$(crystallize-getconf WorkDirectory)"
streamId=".sreg-$(date-uuid)"
crystalSubdir="$crystalWorkdir/$streamId"
mkdir -p "$crystalSubdir"
rsync -a --checksum --no-i-r "$1" "$crystalSubdir/"
setVariableToCommandOutput "basename" "embasename" "$1"
fileToStash="$crystalSubdir/${basename:?}"
if [[ -f "$fileToStash" ]]; then
    sreg_store_stream --sreg-dir "$sregDir" --assume-checksum "$sourceChecksum" --verbose < "$fileToStash" | sponge "$fileToStash"
else
    die "Skipping item $fileToStash: not a regular file."
fi
mkdir -p "$(dirname "$destinationName")"
rsync -a --checksum --no-i-r "$fileToStash" "$destinationName"
# a+r gives (a)ll users (r)ead permission
chmod a+r "$destinationName"
rm -r "${crystalSubdir:?}"
if [[ -e "${streamId:?}" ]]; then
    rm -r "${streamId:?}"
fi

finish

success
