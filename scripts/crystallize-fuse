#!/bin/bash

set -e

action="$1"
name="$2"

if [[ "$(whoami)" != "root" ]]; then
    whoami > /tmp/rubberfsUser
fi
[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"
rubberfsUser="$(cat /tmp/rubberfsUser)"

set -e

if [ ! -n "$name" ]; then
    name="library"
fi

/sbin/modprobe zfs

case $action in
create)
    if [ -e "/$name" ]; then
        echo "ERROR: The requested name \"$name\" is already in use."
        exit 1
    fi
    mkdir -p "/Wreathe/.Resources/RubberFS/$name/dev/"
    #4T doesn't work: "truncate: failed to truncate '/Wreathe/.Resources/RubberFS/library/dev/StorageBlockDevice1' at 4398046511104 bytes: File too large" â€” wtf?! I don't have 3tb available either.
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1"
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2"
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    zpool create "$name" mirror "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    zfs set compression=gzip-9 "$name"
    zfs set relatime=on "$name"
    zfs set checksum=sha256 library
    (
        cd "/$name"
        touch README.md
    )
    #sudo -u "$rubberfsUser" git init
    chown "$(rubberfsUser):$(rubberfsUser)" "/$name"
    chown -R "$(rubberfsUser):$(rubberfsUser)" "/$name/.git"
    mkdir "/$name/.rubberfs"
    echo "$name" > "/$name/.rubberfs/name"
    chown -R "$(rubberfsUser):$(rubberfsUser)" "/$name/.rubberfs"
    rubberfs snapshot "$name"
    rubberfs check "$name"
    rubberfs unmount "$name"
    echo "RubberFS named $name has been created. Run rubberfs mount $name to mount it."
    ;;
mount)
    #TODO: Also mount a FUSE filesystem that replaces .crystals with symlinks to a FUSE filesystem hooked up to IA's S3 API, somehow.
    zpool import -d "/Wreathe/.Resources/RubberFS/$name/dev/" "$name"
    zpool scrub "$name"
    ln -s -T -f "/$name" "/Wreathe/.Resources/RubberFS/$name/mount"
    #rubberfs cd "$name"
    echo "RubberFS named $name has been mounted."
    ;;
cd)
    echo "D'oh! Your bash_setup doesn't seem to have been run or worked."
    exit 1
    ;;
unmount)
    if [ ! -d "/$name/.rubberfs" ]; then
        echo "ERROR! RubberFS named $name does not appear to be mounted."
    else
        rubberfs save "$name"
    fi
    zpool export "$name"
    if [ ! -d "/$name/.rubberfs" ]; then
        exit 1
    fi
    echo "RubberFS named $name has been unmounted."
    ;;
attach)
    username="$1"
    server="$2"
    prefix="$3"
    mountpoint="$4"
    sshfs -o allow_other,defer_permissions "$username"@"$server":"/Wreathe/.Resources/RubberFS/$prefix/mount/" "$mountpoint"
    ;;
check)
    zpool scrub "$name"
    echo "A check for RubberFS named $name has been begun; use rubberfs status $name to see its progress."
    ;;
save)
    cd "/$name"
    if [ ! -d .rubberfs ]; then
        echo "ERROR! RubberFS named $name does not appear to be mounted."
        exit 1
    fi
    touch README.md
    #sudo -u "$rubberfsUser" git add -A .
    #set +e
    #sudo -u "$rubberfsUser" git commit -a -m "RubberFS: make snapshot"
    #sudo -u "$rubberfsUser" git pull
    #sudo -u "$rubberfsUser" git submodule update --remote
    #sudo -u "$rubberfsUser" git push -u origin master
    #set -e
    rubberfsSnapshot="rubberfs-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    zfs snapshot "$name@$rubberfsSnapshot"
    echo "A saved snapshot $rubberfsSnapshot in RubberFS named $name has been created."
    ;;
freeze)
    #TODO: make sure this works. What it should do: Back up the complete current filesystem to IA (as a .crystal but don't keep local copy), put the .crystal in the .rubberfs/history/ folder, and remove old snapshots.
    cd /
    rubberfs unmount "$name"
    if mount | grep "/$name" > /dev/null; then
        echo "Unmounting failed!"
        exit 1
    fi
    freezeId="rubberfs-freeze-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    crystalWorkdir="$(crystallize-getconf 'WorkDirectory')"
    freezeUuid="$(python -c 'import uuid; print str(uuid.uuid4())')"
    zfs snapshot -r "$name@$freezeId"
    echo "Begun working on saving snapshot."
    watch -n 0.1 "du -h /usr/local/var/crystallize/*.zfsrepl" &
    rubberfsWatchPid="$!"
    zfs send -R "$name@$freezeId" > "$crystalWorkdir/$name@$freezeId.$freezeUuid.zfsrepl"
    kill "$rubberfsWatchPid"
    rubberfs mount "$name"
    smallify "$crystalWorkdir/$name@$freezeId.$freezeUuid.zfsrepl"
    rsync -av --progress --checksum "$crystalWorkdir/$name@$freezeId.$freezeUuid.zfsrepl.crystal" "$crystalWorkdir/.$name@$freezeId.$freezeUuid.zfsrepl.crystal-data" "$name/.rubberfs/history/"
    freezeCrystal="$(cat "$crystalWorkdir/.$name@$freezeId.$freezeUuid.zfsrepl.crystal-data/identifier")"
    echo "$name@$freezeId" > "$name/.rubberfs/lastFreeze"
    echo "$name@$freezeId" > "$name/.rubberfs/lastFullFreeze"
    echo "$freezeUuid" > "$name/.rubberfs/lastFreezeUuid"
    echo "$freezeUuid" > "$name/.rubberfs/lastFullFreezeUuid"
    echo "$freezeCrystal" > "$name/.rubberfs/lastFreezeCrystal"
    echo "$freezeCrystal" > "$name/.rubberfs/lastFullFreezeCrystal"
    rubberfs snapshot
    echo "### WARNING! ### WARNING! ### WARNING! ### WARNING! ### WARNING! ###"
    echo "The following snapshots will be DELETED. Continuing in 1 minute;"
    echo "press Ctrl+C to cancel."
    echo "### WARNING! ^^^ WARNING! ### WARNING! ### WARNING! ^^^ WARNING! ###"
    zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3
    sleep 60
    zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3 | xargs -n 1 zfs destroy -vr
    rubberfs unmount
    echo "A frozen snapshot $freezeCrystal of RubberFS named $name has been created, and the obsolete local snapshots removed."
    #echo "To restore, first make a new zpool, then run zfs recv (new-zpool-name) -F < /foo/bar.zfsrepl"
    ;;
freeze-delta)
    cd /
    if mount | grep "/$name" > /dev/null; then
        umount "/$name"
    fi
    if mount | grep "/$name" > /dev/null; then
        echo "Unmounting failed!"
        exit 1
    fi
    freezeId="rubberfs-freeze-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    crystalWorkdir="$(crystallize-getconf 'WorkDirectory')"
    freezeUuid="$(python -c 'import uuid; print str(uuid.uuid4())')"
    zfs snapshot -r "$name@$freezeId"
    oldSnap="$(cat "$name/.rubberfs/lastFreeze")"
    echo "Begun working on saving snapshot."
    watch -n 0.1 "du -h /usr/local/var/crystallize/*.zfsrepl" &
    rubberfsWatchPid="$!"
    zfs send -I "$oldSnap" "$name@$freezeId" "$name@$freezeId" > "$crystalWorkdir/$name@$freezeId.$freezeUuid.incremental.zfsrepl"
    kill "$rubberfsWatchPid"
    rubberfs mount "$name"
    smallify "$crystalWorkdir/$name@$freezeId.$freezeUuid.incremental.zfsrepl"
    rsync -av --progress --checksum "$crystalWorkdir/$name@$freezeId.$freezeUuid.incremental.zfsrepl.crystal" "$crystalWorkdir/.$name@$freezeId.$freezeUuid.incremental.zfsrepl.crystal-data" "$name/.rubberfs/history/"
    freezeCrystal="$(cat "$crystalWorkdir/.$name@$freezeId.$freezeUuid.zfsrepl.crystal-data/identifier")"
    echo "$name@$freezeId" > "$name/.rubberfs/lastFreeze"
    echo "$freezeUuid" > "$name/.rubberfs/lastFreezeUuid"
    echo "$freezeCrystal" > "$name/.rubberfs/lastFreezeCrystal"
    rubberfs snapshot
    printf "\033c"
    echo "### WARNING! ### WARNING! ### WARNING! ### WARNING! ### WARNING! ###"
    echo "The following snapshots will be DELETED. Continuing in 1 minute;"
    echo "press Ctrl+C to cancel."
    echo "### WARNING! ^^^ WARNING! ### WARNING! ### WARNING! ^^^ WARNING! ###"
    zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3 | head -n -1
    sleep 60
    zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3 | head -n -1 | xargs -n 1 zfs destroy -vr
    rubberfs unmount
    echo "A frozen incremental snapshot $freezeCrystal of RubberFS named $name has been created, and the obsolete local snapshots removed."
    ;;
status)
    zpool list "$name"
    zpool status "$name"
    df -i /"$name"
    #zfs list -ro space -t snapshot
    zfs list -ro space "$name"
    ;;
list)
    zfs list -t snapshot
    rubberfs status "$name"
    ;;
usage)
    rubberfs save "$name"
    ncdu
    ;;
whereami)
    rubberDir="$(find_up.sh "$(readlink -f -- "$(pwd)")" -type d -name ".rubberfs" -execdir pwd \; -quit)"
    if [ ! -d "$rubberDir" ]; then
        echo "You do not appear to be in a rubberfs directory."
        exit 1
    fi
    cat "$rubberDir/.rubberfs/name"
    ;;
stash)
    shift
    if [[ -z "$1" ]]; then
        echo "Please specify something to stash."
        exit 1
    fi
    thisRubber="$(rubberfs whereami)"
    rubberfs save "$thisRubber"
    smallify "$@"
    rubberfs save "$thisRubber"
    echo "Done stashing."
    ;;
pull)
    shift
    if [[ -z "$1" ]]; then
        echo "Please specify something to pull."
        exit 1
    fi
    biggify "$@"
    ;;
rm)
    shift
    if [[ -z "$1" ]]; then
        echo "Please specify something to remove."
        exit 1
    fi
    thisRubber="$(rubberfs whereami)"
    rubberfs save "$thisRubber"
    crystallize "$@"
    rubberfs save "$thisRubber"
    echo "Done stashing."
    ;;
stub)
    if [ ! -e /Ember\ Library ]; then
        mkdir -p /Ember\ Library/Futuramerlin\ Projects/Data/Crystal\ Index/
    else
        echo "There appears to already be an Ember Library instance available; no action taken."
        exit 1
    fi
    ;;
*)
    echo "Unknown action."
    exit 1
    ;;
esac
