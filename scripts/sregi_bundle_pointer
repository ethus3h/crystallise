#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

success() {
    exit 0
}
failCheckFile="$1"
if [[ -e "$failCheckFile" ]]; then
    warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"!"
else
    echo "$0 running at $(emdate) in $(readlink -f "$(pwd)") with the remaining arguments $*" > "$failCheckFile" || echo "$0 running at $(emdate) in an unknown directory with the remaining arguments $*" > "$failCheckFile"
    success() {
        rm -f "${failCheckFile:?}"
        exit 0
    }
fi
shift

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

fsckStatusFile="$1"
shift

packPointerName="$1"
dbDir="$sregDir"
hashFull="$(basename "$2")"
crystalWorkdir="$3"

if [[ -n "$fsckStatusFile" ]]; then
    numberExpected="$(<"$fsckStatusFile")"
    numberProcessedFile="$fsckStatusFile.done"
    if ! [[ -f "$numberProcessedFile" ]]; then
        numberProcessed="1"
    else
        numberProcessed="$(<"$numberProcessedFile")"
        numberProcessed=$(( numberProcessed + 1 ))
    fi
    echo "$numberProcessed" > "$numberProcessedFile"
    if [[ "$numberExpected" == "0" ]]; then
        # wtf?
        numberExpected="-1"
    fi
    numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
    echo "Working on bundling item #$numberProcessed of $numberExpected ($numberProcessedPercentage%): $hashFull"
else
    # Don't bother mentioning anything, since we don't really have anything interesting to say
    true
fi

# can't use \d in POSIX regex
hashPatternMatch='^[0-9a-f]{128}$'
# $hashPatternMatch not quoted because that makes it "match literally rather than as a regex" (â€”SC2076)
if ! [[ "$hashFull" =~ $hashPatternMatch ]]; then
    # Ignore stray files in the LocalStore directory (e.g. .keep files)
    success
fi
hashA="${hashFull:0:1}"
hashB="${hashFull:1:1}"
hashC="${hashFull:2:1}"
hashDir="$dbDir/$hashA/$hashB/$hashC"
dbTempFileDir="$dbDir/.BundlePointerTemp"
dbFilePath="$hashDir/$hashFull"
mkdir -p "$dbTempFileDir"
if [[ -f "$dbFilePath" ]]; then
    if [[ "$(head -c 36 "$dbFilePath")" != "c39f8657-384b-438b-a5a2-eece17147589" ]]; then
        if [[ "$(head -c 36 "$dbFilePath")" != "2fae2004-94bb-4aa8-a01a-fc44298efc2c" ]]; then
            die "The item $dbFilePath does not appear to be a LocalStore pointer! This is most likely a bug in sreg. Aborting to avoid messing things up."
        else
            # This pointer has already been bundled, so quick-check it and exit
            sregi_hashpointer_sane --sreg-dir "$sregDir" "$dbFilePath"
            success
        fi
    else
        mv "$dbFilePath" "$dbTempFileDir/$hashFull"
    fi
else
    warn "The item $dbFilePath does not appear to exist, even though sregi_bundle_pointer has been requested for it! This situation should perhaps be investigated."
    success
fi
# 2fa... is the remote bundle pointer type signature
printf "2fae2004-94bb-4aa8-a01a-fc44298efc2c\\n%s\\n%s" "$hashFull" "$(basename "$packPointerName")" > "$dbFilePath"

if [[ -n "$cacheDbFilePath" ]]; then
    # FIXME: This cache code is a trainwreck

    # Switch over to variable values for cache editing
    cacheDbDir="$crystalWorkdir/.StreamCache/"
    dbLinkPath="$cacheDbDir/$hashA/$hashB/$hashC/$hashFull"
    cacheDbFilePath="$(readlink -e "$dbLinkPath")" || true

    # Remove cache entry to allow re-testing
    # First, make sure the link is good and fix it up if it's not.
    if ! [[ -f "$cacheDbFilePath" ]]; then
        find "$cacheDbDir/ByCount" -mindepth 5 -maxdepth 5 -type f -name "$hashFull" -exec ln -sf {} "$dbLinkPath" \;
        cacheDbFilePath="$(readlink -e "$dbLinkPath")"
    fi

    requestCount="1"
    if [[ -f "$cacheDbFilePath" ]]; then
        dbFileDir="$(dirname "$cacheDbFilePath")"
        rm "${cacheDbFilePath:?}"
        # Get the requestCount. There are three path components after it. I suspect there's a better way to do this.
        oldCount="$(basename "$(dirname "$(dirname "$(dirname "$dbFileDir")")")")"
        if [[ -n "$oldCount" ]]; then
            requestCount="$oldCount"
        fi
    fi
    rm -f "$dbLinkPath"
    echo "$requestCount" > "$dbLinkPath"
    
    # Clean up empty directories. Kind of expensive, so commented out here. This will be taken care of by scache_gc when it's run, anyway.
    # find "$cacheDbDir" -type d -not -name "ByCount" -empty -delete
else
    # Cache entry exists already
    true
fi

# Done editing the cache: now, test the new pointer
failCleanup() {
    local failedBundleDir="$sregDir/Failed Bundling"
    mkdir -p "$failedBundleDir"
    local noteAppend=" It couldn't be found, so isn't available for inspection!"
    if [[ -e "$dbFilePath" ]]; then
        mv "$dbFilePath" "$failedBundleDir/$hashFull"
        noteAppend=" It's been moved to $failedBundleDir/$hashFull so you can inspect it."
    fi
    # Put the LocalStore pointer back
    # FIXME: Also fetch the LocalStore entry from the LocalStore folder in crystalWorkdir and put it back into the main LocalStore cache (although, that should be unnecessary if/when I get the failure of things invoked with find to terminate execution of the calling script, which it should)
    mv "$dbTempFileDir/$hashFull" "$dbFilePath"
    die "Failed to read pointer after bundling it!$noteAppend"
}
{ sregi_verify_entry --sreg-dir "$sregDir" "$dbFilePath" --quick || failCleanup; } > /dev/null
rm "$dbTempFileDir/$hashFull"

success
