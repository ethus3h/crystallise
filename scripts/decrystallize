#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

shopt -s extglob

# TODO (maybe): Automatically add crystal metadata to the local Crystal Index folder when decrystallizing if it's missing

offline="false"
if [[ "$1" == "--offline" ]]; then
    # Use an offline copy of the crystal. Provide the path to the local crystal directory as the next parameter.
    offline="true"
    EMBER_IA_OFFLINE="true"
    export EMBER_IA_OFFLINE
    shift
    offlineLocation="$1"
    shift
fi

useCustomPassphrase="false"
crystallizePassphrase=""
if [[ "$1" == "--passphrase" ]]; then
    useCustomPassphrase="true"
    shift
    crystallizePassphrase="$1"
    shift
fi

lockOverride="--no-lock-override"
if [[ "$1" == "--no-lock-override" ]]; then
    shift
elif [[ "$1" == "--lock-override" ]]; then
    lockOverride="--lock-override"
    shift
fi

decrystallizeHere="false"
if [[ "$2" == "--here" ]]; then
    decrystallizeHere="true"
fi

# Remove URL
CrystalAddress="$(iaident "$1")"
CrystalAddress="${CrystalAddress%\.coal5*}"

if [[ "$CrystalAddress" == "" ]]; then
    echo "Please specify a crystal address to unpack."
    exit 1
fi

warn "Successful completion will be indicated by decrystallize printing a message beginning with \"Done! The crystal has been extracted\", and by an exit status of 0."

CrystalID="$CrystalAddress"

echo "Crystal address: $CrystalID"

tempId="decrystallize-$(date-uuid)"

mkdir "$tempId"

if [[ "true" == "$offline" ]]; then
    if [[ ! -f "$offlineLocation/$CrystalAddress.coal5" ]]; then
        die "Could not find directory with offline location: $offlineLocation"
    fi
    echo "Using offline location: $offlineLocation"

    # Override fcache_request to get from the local folder
    fcache_request() {
        requestUrl="$2"
        if [[ -z "$requestUrl" ]] || [[ "--lock-override" == "$requestUrl" ]]; then
            requestUrl="$1"
        fi
    }
else
    shift
fi

    }
fi

crystalXzFileSize=1
if [[ -t 1 ]]; then
    # used for pv progress indicator.
    crystalXzFileSize="$(retryUntilSuccess 100 30 5 5 curl -sIL "https://archive.org/download/$CrystalID/$CrystalID.coal5" | grep Content-Length | awk '{print $2}')" || warn "Couldn't get compressed file size"
    crystalXzFileSize="${crystalXzFileSize::-1}"
fi

if [[ "$useCustomPassphrase" != "true" ]]; then
    crystallizePassphrase="$(crystallize-getconf Passphrase)"
fi
printf "%s" "$crystallizePassphrase" > "$tempId.tmp"
crystalWorkdir="$(crystallize-getconf WorkDirectory)"
if ! [[ -e "$crystalWorkdir/.CrystalCache/" ]]; then
    fcache_init "$crystalWorkdir/.CrystalCache/"
fi

decrystInner() (
    knownCrystalCrystallizeVersion=""
    getCrystalVersion() {
        if [[ "true" == "$offline" ]]; then
            knownCrystalCrystallizeVersion="$(crystallize-getconf crystallizeVersion)"
        else
            metadata="$(fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID"_meta.xml)"
            regex='<subject>Uploaded using Crystallize ([0-9\.]+)<\/subject>'
            [[ -n "$metadata" ]] || die "Could not get metadata for this crystal."
            knownCrystalCrystallizeVersion=""
            if [[ "$metadata" =~ $regex ]]; then
                knownCrystalCrystallizeVersion="${BASH_REMATCH[1]}"
            fi
            [[ -n "$knownCrystalCrystallizeVersion" ]] || warn "Could not get version of Crystallize used for this crystal."
        fi
    }

    decrystallizeNoDieOnMac() {
        if [[ "$OSTYPE" = darwin* ]]; then
            true
        else
            die "Failed to retrieve Crystal data."
        fi
    }

    # FIXME: Why does execution continue past the next line when tar exits with a nonzero exit status?! The ERR trap gets printed out correctly when running "trap" with no arguments right after it, but for some reason doesn't get called here. Weird.
    fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5" "$lockOverride" | pv -tparbIfei 0.1 -s "$crystalXzFileSize" | gpg --yes --batch --passphrase-file "$tempId.tmp" - | unxz --stdout - | tar -xvf - -C "$tempId/" || decrystallizeNoDieOnMac
    #trap

    [[ -n $knownCrystalCrystallizeVersion ]] || getCrystalVersion

    # Extract split forks
    forkFetchStatus=""
    forkCsumFetchStatus=""
    tempDecrystForksDir="$(bigTempDir)"
    tempIdAbspath="$(readlink -f "$tempId")"
    (
        trap 'rm -r "${tempDecrystForksDir:?}"; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
        cd "$tempDecrystForksDir" || die
        mkdir ".forks"

        if version_gt "$knownCrystalCrystallizeVersion" "3.1.2.5.13.61"; then
            # This crystal was made by a version that supports split fork storage
            trap - ERR
            fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5-forks" | pv -tparbIfei 0.1 | gpg --yes --batch --passphrase-file "$tempIdAbspath.tmp" - | unxz --stdout - | tar -xvf - -C ".forks"
            forkFetchStatus="$?"
            fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5-forks-csum" | pv -tparbIfei 0.1 | gpg --yes --batch --passphrase-file "$tempIdAbspath.tmp" - | unxz --stdout - > ".forks-csum"
            forkCsumFetchStatus="$?"
            trap 'rm -r "${tempDecrystForksDir:?}"; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

            if [[ "$forkFetchStatus" == "0" ]] && [[ "$forkCsumFetchStatus" == "0" ]]; then
                (
                    cd ".forks" || die "cd failed"
                    csum --check ./* "../.forks-csum" || die "csum reported an error for split forks"
                ) || die "Failed split forks checksum"
            else
                die "Error retrieving split forks for this crystal!"
            fi
        else
            warn "(Couldn't retrieve split forks file for this crystal as the version of crystallize it was created using is too old.)"
        fi

        splitForksTarWanted="tar"
        if [[ "$OSTYPE" == darwin* ]]; then
            splitForksTarWanted="gtar"
        fi
        find ".forks" -type f -not -name '06968986-7c96-406f-b7b2-a90fe40293bd' -exec bash -c "$splitForksTarWanted"' -xvf - -C "$1/" < "$0"' {} "$tempIdAbspath" \;
    ) || die
    rm -r "$tempDecrystForksDir"

    if ! version_gt "$knownCrystalCrystallizeVersion" "3.1.2.5.11"; then
        warn "(Probably can not use checksum verification for this crystal as the version of crystallize it was created using is too old. It may be slow trying to. FIXME?)" # FIXME?
    fi

    #if version_gt "$knownCrystalCrystallizeVersion" "3.1.2.5.11"; then
        # This crystal was made by a version that supports csum verification
        trap - ERR
        exitStatus=""
        {
            fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5-csum" | pv -tparbIfei 0.1 | gpg --yes --batch --passphrase-file "$tempId.tmp" - | unxz --stdout - > "$tempId.csum"
            exitStatus="$?"
        } 2>/dev/null
        trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
    #else
    #    warn "(Couldn't use checksum verification for this crystal as the version of crystallize it was created using is too old.)"
    #fi

    if [[ "$exitStatus" == "0" ]]; then
        mkdir "$tempId.tempDir"
        (
            cd "$tempId"
            find . -name "$CrystalID"'*' -not -name "$CrystalID.ostype" -not -name "$CrystalID.forks" -not -name "$CrystalID.forks-csum" -exec bash -c 'dir="$(dirname "$0")"; mkdir -p "../'"$tempId"'.tempDir/$dir/"; mv "$0" "../'"$tempId"'.tempDir/$dir/"' {} \; || die
        ) || die

        (
            cd "$tempId"
            shopt -s dotglob
            csum --check ./* "../$tempId.csum" || die
        ) || die

        (
            cd "$tempId.tempDir"
            find . -name "$CrystalID"'*' -exec bash -c 'dir="$(dirname "$0")"; mv "$0" "../'"$tempId"'/$dir/"' {} \; || die
        ) || die
        rm -r "${tempId:?}.tempDir"
    else
        [[ -n $knownCrystalCrystallizeVersion ]] || getCrystalVersion
        if version_gt "$knownCrystalCrystallizeVersion" "3.1.2.5.13"; then
            # This crystal was made by a version that supports checksumming
            die "Error retrieving csum file for this crystal!"
        fi
        warn "(Couldn't retrieve csum file for this crystal as the version of crystallize it was created using is too old; contents will not be checked for checksum errors.)"
    fi
    rm -f "${tempId:?}.csum"
)

retryUntilSuccess 3 decrystInner "$@"

destination="$tempId in "
if [[ "$decrystallizeHere" == "true" ]]; then
    fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5-cwd" | gpg --yes --batch --passphrase-file "$tempId.tmp" - > "$tempId.cwd"
    crystalPath="$(< "$tempId.cwd")"

    destination=""
    echo "Moving primary files into place (relative to $crystalPath)..."
    (
        shopt -s dotglob
        mv -vn "$tempId/$crystalPath/"* .
        echo "Done moving primary files into place (relative to $crystalPath)."
        rm -r "${tempId:?}"
    )
fi

rm "${tempId:?}.tmp"

printf "\\033c"
echo "Done! The crystal has been extracted to ""$destination""the current directory, $(pwd)."
