#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."; if [[ -n "${tempDirectoryName:?}" ]]; then if [[ -d "${tempDirectoryName:?}" ]]; then rm -r "${tempDirectoryName:?}"; fi; fi' ERR

crystalWorkdir="$(crystallize-getconf WorkDirectory)"
dbDir="$1"
crystalIdentifier="$2"
if [[ -z "$crystalIdentifier" ]]; then
    echo "Please specify a directory and a crystal identifier."
    exit 1
fi
hashFull="$(sha512sum <<< "$crystalIdentifier" | awk '{print $1;}')"
hashA="${hashFull:0:1}"
hashB="${hashFull:1:1}"
hashC="${hashFull:2:1}"
hashSubdir="$hashA/$hashB/$hashC"

# Clean up if there's an error to avoid leaving a broken cache entry
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."; rm -rf "$dbLinkPath" "$(readlink -e "$dbLinkPath")"' ERR

scache_gc "$dbDir" "localstore"

hashDir="$dbDir/$hashSubdir"
mkdir -p "$hashDir"
dbLinkPath="$hashDir/$hashFull"
trap - ERR
oldFilePath="$(readlink "$dbLinkPath")"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."; rm -rf "$dbLinkPath" "$(readlink -e "$dbLinkPath")"' ERR
cacheEntryFileList=("$oldFilePath"/scache-*.LocalStore)
if [[ ! -h "$dbLinkPath" ]] || [[ ! -f "$oldFilePath" ]] || [[ ! -d "${cacheEntryFileList[0]}" ]]; then
    # Item is not in the cache, so add it

    # Make sure there isn't a dangling LocalStore content folder with no associated link
    find "$dbDir/ByCount" -maxdepth 2 -type d -name "$hashFull" -exec rm -rf {} \;
    if ! [[ -f "$dbLinkPath" ]]; then
        # Never seen this item before, so set the requestCount
        requestCount=1
    else
        requestCount="$(<"$dbLinkPath")"
        rm "$dbLinkPath"
    fi
    dbFileDir="$dbDir/ByCount/$requestCount/$hashSubdir"
    dbFilePath="$dbFileDir/$hashFull"
    rm -rf "$dbFilePath"
    mkdir -p "$dbFilePath"
    tempDirectoryName="$crystalWorkdir/localstorecache-request-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    mkdir -p "$tempDirectoryName"
    (
        cd "$tempDirectoryName" || exit 1
        decrystallize "$crystalIdentifier" --here &> /dev/null
        mv ./* "$dbFilePath"
    )
    if [[ -h "$dbLinkPath" ]]; then
        rm "$dbLinkPath"
    fi
    ln -s "$dbFilePath" "$dbLinkPath"
fi
dbFilePath="$(readlink -e "$dbLinkPath")"
# First, make sure the link is good and fix it up if it's not.
if ! [[ -e "$dbFilePath" ]]; then
    find "$dbDir/ByCount" -mindepth 5 -maxdepth 5 -type d -name "$hashFull" -exec ln -sf {} "$dbLinkPath" \;
    dbFilePath="$(readlink -e "$dbLinkPath")"
fi
dbFileOldPath="$dbFilePath"
dbFileDir="$(dirname "$dbFilePath")"
# Get the requestCount. There are three path components after it. I suspect there's a better way to do this.
oldCount="$(basename "$(dirname "$(dirname "$(dirname "$dbFileDir")")")")"
# Increment the item's requestCount.
requestCount=$(( oldCount + 1 ))
# First, get the names of where the file should go.
dbFileDir="$dbDir/ByCount/$requestCount/$hashSubdir"
dbFilePath="$dbFileDir/$hashFull"
mkdir -p "$dbFileDir"
rm -rf "$dbFilePath"
mv "$dbFileOldPath" "$dbFilePath"
rm "$dbLinkPath"
ln -s "$dbFilePath" "$dbLinkPath"
# Return the data to the caller
echo "$dbLinkPath"
# Clean up empty directories
find "$dbDir" -type d -not -name "ByCount" -empty -delete
if [[ -d "$tempDirectoryName" ]]; then
    rm -r "$tempDirectoryName"
fi
