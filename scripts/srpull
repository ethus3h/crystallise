#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"

# Don't bother finding sregDir here, because it can be inferred from each of the source parameters (and may be different for them, so whatever we got here might not be accurate anyway).

skipCount="0"
if [[ "$1" == "--skip" ]]; then
    shift
    skipCount="$1"
    shift
fi

finish() {
    save_traps="$(trap)"
    trap - ERR
    rm -f "${failCheckFile:?}"
    eval "$save_traps"

    trap - ERR
    if [[ -e "$statusFile" ]]; then
        rm "$statusFile"
    fi
    if [[ -e "$crystalWorkdir/$instanceId" ]]; then
        rm -r "${crystalWorkdir:?}/${instanceId:?}"
    fi
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate) while finishing srpull."' ERR
}
trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; finish; exit 1' ERR
trap finish EXIT

if [[ "$#" == "1" ]]; then
    # There's only one path specified, so use the current directory as the destination
    destinationParameter="."
    pathsToCopy=("${@}") # all arguments
else
    # Multiple paths are specified, so use the last one as the destination
    destinationParameter="${!#}" # last argument
    pathsToCopy=("${@:1:$(($#-1))}") # all but last argument
fi

if ! [[ -d "$destinationParameter" ]]; then
    die "Destination is not a directory."
fi
crystalWorkdir="$(crystallize-getconf WorkDirectory)"
instanceId=".srpull-$(date-uuid)"
mkdir -p "$crystalWorkdir/$instanceId"
statusFile="/tmp/$instanceId.srpull.status"
failCheckFile="/tmp/$instanceId.srpull.running"
skipFile="$failCheckFile.skip"
echo "0" > "$skipFile"

echo "Counting items..."
find "${pathsToCopy[@]}" -type f -printf '.' | wc -c > "$statusFile"

# FIXME: Why replace this in the destination parameter?! Won't this make it copy into the wrong folder?
destinationReplaced="${destinationParameter/%.git.686fc528-0e8e-4724-91bb-c103cdcdd592/.git}"
destinationReplaced="${destinationReplaced//\/.git.686fc528-0e8e-4724-91bb-c103cdcdd592\//\/.git\/}"

for path in "${pathsToCopy[@]}"; do
    destinationSuffix=""
    sourceReplaced="${path/%.git.686fc528-0e8e-4724-91bb-c103cdcdd592/.git}"
    sourceReplaced="${path/%.git.686fc528-0e8e-4724-91bb-c103cdcdd592\//.git\/}"
    if [[ -d "$path" ]]; then
        destinationSuffix="/"
    fi
    if [[ "$path" =~ '/'$ ]]; then
        destinationRoot="$sourceReplaced"
        destinationFindTarget="$destinationReplaced$destinationSuffix"
    else
        destinationRoot="$(dirname "$sourceReplaced")"
        destinationFindTarget="$destinationReplaced/$(basename "$sourceReplaced")$destinationSuffix"
    fi
    if [[ "$destinationRoot" == "." ]]; then
        destinationRootLength="0"
    else
        destinationRootLength=${#destinationRoot}
    fi
    # Use $path in find commands rather than sourceReplaced because sourceReplaced is used for the target computation and post-processing (post-processing with find, that is).
    find "$path" -type f -exec sregi_copy_read "$failCheckFile" --skip "$skipCount" --sreg-dir "$sregDir" {} "$destinationReplaced" "$statusFile" "$destinationRootLength" \;
    rsync -a --ignore-existing --no-i-r "${pathsToCopy[@]}" "$destinationParameter/"

    find "$destinationFindTarget" -type d -empty -exec bash -c '[[ "$(<"$0/.keep")" == "d61b6a4f-525b-458a-b8d2-4a9592e22caa" ]] && rm "$(<"${0:?}/.keep")"' {} \;
done

if [[ -e "$failCheckFile" ]]; then
    die "An invocation of sregi_copy_read (called from $0) failed with the message \"$(<"$failCheckFile")\"!"
fi

finish
