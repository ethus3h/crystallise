#!/usr/bin/env emberPlatformResolver-bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

failCheckFile="$1"
if [[ -e "$failCheckFile" ]]; then
    warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"!"
    success() {
        exit 0
    }
else
    echo "$0 running in $(readlink -f "$(pwd)") with the arguments $*" > "$failCheckFile" || echo "$0 running in an unknown directory with the arguments $*" > "$failCheckFile"
    success() {
        rm -f "${failCheckFile:?}"
        exit 0
    }
fi
shift

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi

fsckStatusFile="$2"
knownHash="(Failed to retrieve entry hash!)"
knownHashTemp="$(sregi_hash_from_file "$1")" || exit 1
if [[ -n "$knownHashTemp" ]]; then
    knownHash="$knownHashTemp"
fi
echo "Started verifying stream registry database entry $knownHash."

skipCache=""
if [[ "--skip-cache" == "$3" ]]; then
    skipCache="--skip-cache"
fi

if sreg_read_stream --sreg-dir "$sregDir" --entry-path "$1" --checksum "$knownHash" --disallow-hash-pointer "$skipCache" < "$1" > /dev/null; then
    dbDir="$(sregi_find_dir --sreg-dir "$sregDir")"
    hashA="${knownHash:0:1}"
    hashB="${knownHash:1:1}"
    hashC="${knownHash:2:1}"
    mv "$1" "$dbDir/$hashSubdir/$hashA/$hashB/$hashC/$knownHash"
    if [[ -n "$fsckStatusFile" ]]; then
        numberExpected="$(<"$fsckStatusFile")"
        numberProcessedFile="$fsckStatusFile.done"
        if ! [[ -f "$numberProcessedFile" ]]; then
            numberProcessed="0"
        else
            numberProcessed="$(<"$numberProcessedFile")"
            numberProcessed=$(( numberProcessed + 1 ))
        fi
        echo "$numberProcessed" > "$numberProcessedFile"
        if [[ "$numberExpected" == "0" ]]; then
            numberExpected="-1"
        fi
        numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
        echo "Verified and restored to stream registry database formerly failed entry $knownHash: finished #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
    else
        echo "Verified and restored to stream registry database formerly failed entry $knownHash."
    fi
    success
else
    exit 1
fi

success
