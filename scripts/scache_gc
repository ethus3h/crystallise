#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

verbose="false"
if [[ "$1" == "--verbose" ]]; then
    verbose="true"
    shift
fi

dbDir="$1"

[[ -z "$dbDir" ]] && dbDir="$(crystallize-getconf WorkDirectory)/.StreamCache/"

if [[ -e "$dbDir/.locked" ]]; then
    warn "This database is already in use. If the scache_gc or sreg_read_stream instance using it has crashed, remove $dbDir/.locked manually."
    exit 0
fi
echo "locked on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)" > "$dbDir/.locked"

finish() {
    rm -f "${dbDir:?}/.locked"
}
trap finish EXIT

cacheType="s"
if [[ -n "$2" ]]; then
    cacheType="$2"
fi
# Remove the least-used items from the cache until it fits within the alloted disk space
[[ -e "$dbDir/.$cacheType""cache.limit" ]] || fcache_init "--$cacheType" "$dbDir"
diskUsageLimit="$(<"$dbDir/.$cacheType""cache.limit")"
[[ -n "$diskUsageLimit" ]] || fcache_init "--$cacheType" "$dbDir" # The configured limit is blank, so update it
diskUsageLimit="$(<"$dbDir/.$cacheType""cache.limit")"
if [[ "0" == "$diskUsageLimit" ]]; then
    # Unlimited
    exit 0
fi
isNonnegativeInteger "$diskUsageLimit" || die "The configured disk usage limit, $diskUsageLimit, is not a nonnegative integer!"
diskUsageLimitSub=$(( diskUsageLimit - 1000000000 ))
if [[ "$diskUsageLimitSub" -lt 0 ]]; then
    diskUsageLimitSub=0
fi
# Clean up empty directories
find "$dbDir" -type d -not -name "ByCount" -empty -delete
if [[ "$(du -sb "$dbDir/ByCount" | awk '{print $1;}')" -gt "$diskUsageLimit" ]]; then
    find "$dbDir/ByCount" -type d -not -name "ByCount" -empty -delete
    while [[ "$(du -sb "$dbDir" | awk '{print $1;}')" -gt "$diskUsageLimitSub" ]]; do
        shopt -u failglob
        rm -f "$dbDir"/Failed\ Checksum/*
        shopt -s failglob
        # Remove the least-used item from the cache
        # TODO: Should handle the case where the largest least-used item is small (e.g. <20kb or something), indicating that the cache consists of a large number of small items. In that case, it should just drop larger, more arbitrary batches of entries from the cache at once, so it doesn't take forever to get within the desired amount of space used.
        largestLeastUsedItem=""
        findType="f"
        if [[ "$cacheType" == "localstore" ]]; then
            findType="d"
        else
            largestLeastUsedItem="$(find "$dbDir/ByCount" -size +10000k -type f -printf "%s\\t%p\\n" | sort -V | tail -1 | cut -d $'\t' -f 2- -)" || true
        fi
        if [[ -z "$largestLeastUsedItem" ]]; then
            leastUsedItemDirectory="$(find "$dbDir/ByCount" -maxdepth 1 -type d | sort -V | head -n 2 | tail -n 1)"
            largestLeastUsedItem="$(find "$leastUsedItemDirectory" -mindepth 4 -maxdepth 4 -type "$findType" -printf "%s\\t%p\\n" | sort -V | tail -1 | cut -d $'\t' -f 2- -)"
        fi
        if ! [[ -e "$largestLeastUsedItem" ]]; then
            # (This code assumes that the WorkDirectory path doesn't have any newline in it — more stuff will break in that case — but because crystallize.conf can't hold values with newlines in them, I don't think that's a huge deal, at least for now.)
            leastUsedItemDirectory="$(find "$dbDir/ByCount" -maxdepth 1 -type d | sort -V | head -n 2 | tail -n 1)"
            largestLeastUsedItem="$(find "$leastUsedItemDirectory" -mindepth 4 -maxdepth 4 -type "$findType" -print -quit)"
            [[ -e "${largestLeastUsedItem:?}" ]] || die "scache_gc has selected an item that doesn't exist for removal. This indicates a bug in scache_gc."
        fi
        [[ -n "${largestLeastUsedItem:?}" ]] || die "scache_gc has selected nothing for removal. This indicates a bug in scache_gc."
        [[ "${largestLeastUsedItem:?}" == "$dbDir"* ]] || die "scache_gc has selected an item outside of dbDir for removal. This indicates a bug in scache_gc."
        leastUsedItemCount="$(basename "$leastUsedItemDirectory")"
        hashFull="$(basename "$largestLeastUsedItem")"
        hashA="${hashFull:0:1}"
        hashB="${hashFull:1:1}"
        hashC="${hashFull:2:1}"
        hashSubdir="$hashA/$hashB/$hashC"
        hashDir="$dbDir/$hashSubdir"
        if [[ -e "$dbLinkPath.locked" ]]; then
            # File is in use
            warn "This stream cache entry is already in use. If the process using it ($(<"$dbLinkPath.locked")) has crashed, remove $dbLinkPath.locked manually."
            warn "Waiting 15 minutes for process using it ($(<"$dbLinkPath.locked")) to finish... If the process using it ($(<"$dbLinkPath.locked")) has crashed, remove $dbLinkPath.locked manually."

            waitForLockTries=0
            until [[ "$waitForLockTries" -ge 180 ]]; do
                if [[ -e "$dbLinkPath.locked" ]]; then
                    warn "Still waiting, $((waitForLockTries - 360)) tries remaining... If the process using this stream cache entry ($(<"$dbLinkPath.locked")) has crashed, remove $dbLinkPath.locked manually."
                else
                    break
                fi
                waitForLockTries=$((waitForLockTries+1))
                sleep 5
            done
        fi

        if [[ -e "$dbLinkPath.locked" ]]; then
            finish; die "This stream cache entry has been in use for 15 minutes so giving up. If the process using it ($(<"$dbLinkPath.locked")) has crashed, remove $dbLinkPath.locked manually."
        fi
        mkdir -p "$hashDir"
        dbLinkPath="$hashDir/$hashFull"
        [[ -e "${largestLeastUsedItem:?}" ]] || die "scache_gc has selected an item that doesn't exist for removal. This indicates a bug in scache_gc."
        [[ "$verbose" == "true" ]] && disk-size-in-bytes "${largestLeastUsedItem:?}"
        rm -rf "${largestLeastUsedItem:?}"
        rm -f "$dbLinkPath"
        echo "$leastUsedItemCount" > "$dbLinkPath"
    done
    find "$dbDir" -type d -not -name "ByCount" -empty -delete
fi

rm "$dbDir/.locked"
