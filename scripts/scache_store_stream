#!/bin/bash
source "$(which ember_bash_setup)" &> /dev/null

# Stores data provided on stdin into the stream cache, and sends a pointer to it to stdout.

[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"
set -e
# if [[ "$1" == "--verbose" ]]; then
#     set -x
# fi

crystalWorkdir="$(crystallize-getconf 'WorkDirectory')"
dbDir=/Ember\ Library/Futuramerlin\ Projects/Data/Stream\ Registry
(
    cd "$crystalWorkdir" || exit 1
    streamId="scache-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    sponge "$streamId.tmp"
    # Calculate hash
    hashFull="$(sha512sum < "$streamId.tmp" | awk '{print $1;}')"
    hashA="${hashFull:0:1}"
    hashB="${hashFull:1:1}"
    hashC="${hashFull:2:1}"
    hashDir="$dbDir/$hashA/$hashB/$hashC"
    mkdir -p "$hashDir"
    dbFilePath="$hashDir/$hashFull"
    streamSize="$(du -sb "$streamId.tmp" | awk '{print $1;}')"
    if [ "$streamSize" -gt 10000000 ]; then
        useLocalStore="false"
    else
        useLocalStore="true"
        localStoreDir="$dbDir/LocalStore/$hashA/$hashB/$hashC"
        mkdir -p "$localStoreDir"
        localStoreFilePath="$localStoreDir/$hashFull"
    fi
    if [ -f "$dbFilePath" ]; then
        # Check that the item can be restored
        recoveredHash="$(scache_read_stream --disallow-hash-pointer < "$dbFilePath" | sha512sum | awk '{print $1;}')"
        if [[ "$recoveredHash" != "$hashFull" ]]; then
            if [[ "$1" == "--verbose" ]]; then
                warn "Could not read existing item."
            fi
            fsckDir=/Ember\ Library/Futuramerlin\ Projects/Data/Stream\ Registry/Failed\ Fsck/
            mkdir -p "$fsckDir"
            mv "$dbFilePath" "$fsckDir"
        fi
    fi
    if ! [ -f "$dbFilePath" ]; then
        # Item not available in cache, so add it (c39... is the LocalStore pointer type signature; a5e... is the remote type signature)
        pointerTypeSignature="c39f8657-384b-438b-a5a2-eece17147589"
        if [[ "$useLocalStore" != "true" ]]; then
            if [[ "$1" == "--verbose" ]]; then
                crystallize --leave-pointer "$streamId.tmp" | cat
            else
                crystallize --leave-pointer "$streamId.tmp" > "$streamId.tmp.sstream-stdout" 2> "$streamId.tmp.sstream-stderr"
                logFiles=("$streamId.tmp.sstream-stdout" "$streamId.tmp.sstream-stderr")
            fi
            pointerTypeSignature="a5e2f296-3085-49c0-8f48-24ea436b7a8b"
        fi
        echo "$pointerTypeSignature" > "$dbFilePath"
        if [[ "$useLocalStore" != "true" ]]; then
            tar -c -P -S --format pax "$streamId.tmp.crystal" ".$streamId.tmp.crystal-data" "${logFiles[@]}" | xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout - >> "$dbFilePath"
        else
            echo "$hashFull" >> "$dbFilePath"
            xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout "$streamId.tmp" >> "$localStoreFilePath"
        fi
        # Upload a pack of the LocalStore items if there are enough, and update the pointers accordingly.
        localStoreSize="$(du -sb "$dbDir"/LocalStore | awk '{print $1;}')"
        if [ "$localStoreSize" -gt 100000000 ]; then
            mv "$dbDir"/LocalStore "$streamId.LocalStore"
            rsync -aq --checksum --no-i-r "$streamId.LocalStore" "$streamId.LocalStore.tmp"
            if [[ "$1" == "--verbose" ]]; then
                crystallize --leave-pointer "$streamId.LocalStore" | cat
            else
                crystallize --leave-pointer "$streamId.LocalStore" > "$streamId.LocalStore.sstream-stdout" 2> "$streamId.LocalStore.sstream-stderr"
                storeLogFiles=("$streamId.LocalStore.sstream-stdout" "$streamId.LocalStore.sstream-stderr")
            fi
            # (2fa... is the remote bundle pointer type signature)
            mv "$streamId.LocalStore.tmp" "$streamId.LocalStore"
            tar -c -P -S --format pax "$streamId.LocalStore.crystal" ".$streamId.LocalStore.crystal-data" "${storeLogFiles[@]}" | xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout - > "$streamId.bundle.pointer"
            pointerName="$(readlink -f "$streamId.bundle.pointer")"
            mkdir -p "$dbDir/Packs/"
            rsync -q --checksum "$pointerName" "$dbDir/Packs/"
            find "$streamId.LocalStore" -type f -exec scachei_bundle_pointer "$pointerName" {} \;
        fi
        # Check that the data can be restored
        if [[ "$1" == "--verbose" ]]; then
            scache_verify_entry 1000 "$dbFilePath" || error-die "Failed saving stream: stored stream could not be read!"
        else
            scache_verify_entry 5 "$dbFilePath" &> /dev/null || error-die "Failed saving stream: stored stream could not be read!"
        fi
    fi
    if [[ "$1" != "--verbose" ]]; then
        cat "$dbFilePath"
    fi
    if [ -e "$streamId" ]; then
        rm -r "$streamId"
    fi
    if [ -e "$streamId.tmp" ]; then
        rm "$streamId.tmp"
    fi
    if [ -e "$streamId.tmp.crystal" ]; then
        rm "$streamId.tmp.crystal"
    fi
)
