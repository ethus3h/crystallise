#!/bin/bash
source "$(which ember_bash_setup)" &> /dev/null

# Accepts an integer and a pointer as an argument, and returns a success status if the data corresponding to the pointer can be read. If it fails, it moves the pointer that failed validation aside. The integer first argument is the number of times to retry if the retrieval fails. The optional third argument is a filename to a file to be used for tracking progress in an enclosing process.

[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"
trap 'error-die "A fatal error was reported on ${BASH_SOURCE} line ${LINENO}."' ERR
#set -x

fsckStatusFile="$3"
numRetries="$1"
shift
knownHash="$(basename "$1")"
#echo "Started verifying stream cache database entry $knownHash."
recoveredHash="$(scache_read_stream --disallow-hash-pointer < "$1" | sha512sum | awk '{print $1;}')"
if [[ "$knownHash" == "$recoveredHash" ]]; then
    if [ -n "$fsckStatusFile" ]; then
        numberExpected="$(<"$fsckStatusFile")"
        numberProcessedFile="$fsckStatusFile.done"
        incrementProcessedCounter() {
            if ! [ -f "$numberProcessedFile" ]; then
                numberProcessed="1"
            else
                numberProcessed="$(<"$numberProcessedFile")"
                numberProcessed=$(( numberProcessed + 1 ))
            fi
            echo "$numberProcessed" > "$numberProcessedFile"
            if [[ "$numberExpected" == "0" ]]; then
                numberExpected="-1"
            fi
            numberProcessedPercentage="$(printf "%.3f\n" "$(bc -l <<< "($numberProcessed / $numberExpected)")")"
            echo "Verified stream cache database entry $knownHash: finished #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
        }
    else
        echo "Verified stream cache database entry $knownHash."
    fi
    exit
fi
if [[ "$knownHash" != "$recoveredHash" ]]; then
    if [[ "$numRetries" == "0" ]]; then
        dbDir=/Ember\ Library/Futuramerlin\ Projects/Data/Stream\ Registry/Failed\ Fsck/
        mkdir -p "$dbDir"
        mv "$1" "$dbDir/"
        error-die "Error verifying stream cache database entry $knownHash! No retries left; giving up and marking entry as corrupted."
    else
        numRetries=$(( numRetries - 1 ))
        if [[ "$recoveredHash" == "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" ]]; then
            echo "(Stored item is not ready yet, or nothing came back. Sleeping 30 seconds and retrying $numRetries more times.)"
        else
            warn "Error verifying stream cache database entry $knownHash! Waiting 30 seconds and retrying $numRetries more times."
        fi
        sleep 30
        scache_verify_entry "$numRetries" "$1" || exit 1
        exit
    fi
fi
error-die "Internal error! This situation should never occur and almost certainly represents a bug in scache_verify_entry."
exit 1
