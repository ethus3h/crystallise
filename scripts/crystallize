#!/usr/bin/env bash

if [[ "$1" == "--version" ]]; then
    # shellcheck disable=SC2034
    echo "Crystallize version $(crystallize-getconf crystallizeVersion) using ember-shared version $(e8787d06e61943a6874e94985b53bc0a="2dee41bf-53fb-4f65-997f-33bf50bfbb4d"; ember_bash_setup --version) and hashdeep $(hashdeep -V)."
    exit 0
fi

if [[ "$1" == "--update" ]]; then
    crystallize-update || exit 1
    exit 0
fi

# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

export crystallizeVersion='3.1.2.5.14.86'

# The update script shown here requires there to be only one ebuild of crystallize in the wreathe-overlay overlay.
# ( sudo true; newVersion="3.1.2.5.14.86"; cd "/Ember Library/Ember satellite projects/crystallize"; eogup-single; git tag -a "v$newVersion" -m "version"; egup-single .; cd "/Ember Library/Ember satellite projects/wreathe-overlay"; eogup-single; mv app-misc/crystallize/crystallize-*.ebuild "app-misc/crystallize/crystallize-$newVersion.ebuild"; repoman manifest; egup-single; sudo emerge --sync wreathe-overlay; sudo emerge crystallize; sudo dispatch-conf )

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

finishclean() {
    rm -f "${crystalWorkdir:?}/${CrystalID:?}.coal5"
}
trap 'if [[ -e "$crystalWorkdir/$CrystalID" ]]; then cat "$crystalWorkdir/$CrystalID" || true; fi; finishclean; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

if [[ ! -e "${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Crystal\ Index/ ]]; then
    echo "ERROR: Could not find a usable Ember Library directory tree. Nothing done."
    exit 1
fi

if ! [[ -d . ]]; then
    echo "Please run crystallize from a directory that exists."
    exit 1
fi

leaveLocked=""
if [[ "$1" == "--leave-locked" ]]; then
    leaveLocked="true"
    shift
fi

keepFiles="false"
if [[ "$1" == "--keep" ]]; then
    keepFiles="true"
    shift
fi

useCustomPassphrase="false"
customPassphrase=""
if [[ "$1" == "--passphrase" ]]; then
    useCustomPassphrase="true"
    shift
    customPassphrase="$1"
    shift
fi

#Remove first argument if it's the end-of-options delimiter
if [[ "$1" == "--" ]]; then
    shift
fi

if [[ "$1" == "" ]] || [[ "$1" == "." ]] || [[ "$1" == ".." ]] || [[ "$1" == "./" ]] || [[ "$1" =~ ^../ ]]; then
    echo "Please specify file(s) within the current directory to crystallize when using relative path names."
    exit 1
fi

crystalWorkdir="$(crystallize-getconf WorkDirectory)"
export crystalWorkdir
mkdir -p "$crystalWorkdir"

#Check for and handle option to leave behind a pointer
if [[ "$1" == "--leave-pointer" ]]; then
    echo "Pointer is enabled."
    crystallizeLeavePointer=true
    shift
    if [[ "$#" -gt 1 ]]; then
        echo "Please use pointer option with only 1 item at a time."
        exit 1
    fi
    mkdir -p "$crystalWorkdir/pointers"
    #Only use first 136 characters of file name for directory name; hopefully this will prevent the name being too long for the filesystem
    crystallizeBaseName="$(basename "$1")"
    crystallizePointerDir="$crystalWorkdir/pointers/.${crystallizeBaseName:0:136}".crystal-data
    crystallizePointerName="$crystalWorkdir/pointers/${crystallizeBaseName:0:136}".crystal
    if [[ -e "$crystallizePointerDir" ]]; then
        crystallize "$crystallizePointerDir"
    fi
    if [[ -e "$crystallizePointerName" ]]; then
        crystallize "$crystallizePointerName"
    fi
    echo "Pointer directory: $crystallizePointerDir"
    echo "Pointer name: $crystallizePointerName"
fi

CrystalID="C3-$(date-uuid)"
export CrystalID

echo "The crystal will have the following address when it is ready: $CrystalID"$'\n'

# -t 1 checks if file descriptor 1 "is opened on a terminal" (â€”GNU coreutils 8.25 manpage for test)
if [[ -t 1 ]]; then
    warn-timeout "Be careful that you don't crystallize your current working directory, the crystallize temp dir, or the crystallize scripts themselves. Either could cause problems. (It's more likely to be OK if you use --keep, but still not guaranteed.) Successful completion will be indicated by crystallize printing a message beginning with \"Done! The new crystal's address is:\", and by an exit status of 0." &
fi

retryUntilSuccess 100 30 5 5 dig +short myip.opendns.com @resolver1.opendns.com > /dev/null || die "Could not connect to OpenDNS. Is UDP traffic being blocked by a firewall?"

wait

crystallize-logsession "$useCustomPassphrase" "$customPassphrase" "$crystalWorkdir/$CrystalID" "$CrystalID" "$@"

echo "$0 $*" > "$crystalWorkdir/$CrystalID.cmd"
pwd > "$crystalWorkdir/$CrystalID.cwd"
if [[ $crystallizeLeavePointer == true ]]; then
    mkdir -p "$crystallizePointerDir"
    rsync -a --checksum "$crystalWorkdir/$CrystalID.cmd" "$crystalWorkdir/$CrystalID.cwd" "$crystallizePointerDir"/
fi
checkedxz "$crystalWorkdir/$CrystalID" -C sha256 -v -9 -e 2>&1
checkedxz "$crystalWorkdir/$CrystalID.time-done.warc.gz" -C sha256 -v -9 -e 2>&1
checkedxz "$crystalWorkdir/$CrystalID.local.idx" -C sha256 -v -9 -e 2>&1
checkedxz "$crystalWorkdir/$CrystalID.deep.idx" -C sha256 -v -9 -e 2>&1
checkedxz "$crystalWorkdir/$CrystalID.csum" -C sha256 -v -9 -e 2>&1
checkedxz "$crystalWorkdir/$CrystalID.forks" -C sha256 -v -9 -e 2>&1
checkedxz "$crystalWorkdir/$CrystalID.forks-csum" -C sha256 -v -9 -e 2>&1
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.xz"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.time-done.warc.gz.xz"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.local.idx.xz"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.deep.idx.xz"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.csum.xz"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.forks.xz"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.forks-csum.xz"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.cmd"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.cwd"
gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.ostype"
rm "$crystalWorkdir/$CrystalID.csum.xz" "$crystalWorkdir/$CrystalID.local.idx.xz" "$crystalWorkdir/$CrystalID.deep.idx.xz" "$crystalWorkdir/$CrystalID.cmd" "$crystalWorkdir/$CrystalID.cwd" "$crystalWorkdir/$CrystalID.time-done.warc.gz.xz" "$crystalWorkdir/$CrystalID.time-env.warc.gz" "$crystalWorkdir/$CrystalID.time-start.warc.gz" "$crystalWorkdir/$CrystalID.xz" "$crystalWorkdir/$CrystalID.ip.warc.gz" "$crystalWorkdir/$CrystalID.passphrase" "$crystalWorkdir/$CrystalID.ostype" "$crystalWorkdir/$CrystalID.forks.xz" "$crystalWorkdir/$CrystalID.forks-csum.xz"
mv "$crystalWorkdir/$CrystalID.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-log"
mv "$crystalWorkdir/$CrystalID.time-done.warc.gz.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-timestamp"
mv "$crystalWorkdir/$CrystalID.csum.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-csum"
mv "$crystalWorkdir/$CrystalID.local.idx.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-idx-l"
mv "$crystalWorkdir/$CrystalID.deep.idx.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-idx-d"
mv "$crystalWorkdir/$CrystalID.cmd.gpg" "$crystalWorkdir/$CrystalID.coal5-cmd"
mv "$crystalWorkdir/$CrystalID.cwd.gpg" "$crystalWorkdir/$CrystalID.coal5-cwd"
mv "$crystalWorkdir/$CrystalID.ostype.gpg" "$crystalWorkdir/$CrystalID.coal5-ostype"
mv "$crystalWorkdir/$CrystalID.forks.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-forks"
mv "$crystalWorkdir/$CrystalID.forks-csum.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-forks-csum"

trap 'cat "$crystalWorkdir/$CrystalID" || true; finishclean; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
ia upload "$CrystalID" --retries=100 --verify --delete "$crystalWorkdir/$CrystalID.coal5-log" "$crystalWorkdir/$CrystalID.coal5-idx-l" "$crystalWorkdir/$CrystalID.coal5-idx-d" "$crystalWorkdir/$CrystalID.coal5-csum" "$crystalWorkdir/$CrystalID.coal5-cmd" "$crystalWorkdir/$CrystalID.coal5-cwd" "$crystalWorkdir/$CrystalID.coal5-ostype" "$crystalWorkdir/$CrystalID.coal5-forks" "$crystalWorkdir/$CrystalID.coal5-forks-csum" 2>&1
ia upload "$CrystalID" --retries=100 --verify "$crystalWorkdir/$CrystalID.coal5-timestamp" 2>&1

echo "Please wait..."

# Check that things were correctly uploaded

sleep 2

postUploadCheckSuccess=""
postUploadCheckFailHandler() {
    if [[ -z "$postUploadCheckSuccess" ]] || [[ "$postUploadCheckSuccess" == "1" ]]; then
        postUploadCheckSuccess=1
    else
        postUploadCheckSuccess=0
    fi
}

getChecksumRetries=0
retryDelayTime=5
until [[ "$getChecksumRetries" -ge 1000 ]]; do
    if ia downloadAsStream https://archive.org/download/"$CrystalID/$CrystalID"_files.xml | grep -F "<file name=\"$CrystalID.coal5\" source=\"original\">" > /dev/null; then
        postUploadCheckFailHandler
        break
    fi
    getChecksumRetries=$((getChecksumRetries+1))
    sleep "$retryDelayTime"
    if [[ "$retryDelayTime" -lt 30 ]]; then
        retryDelayTime=$((retryDelayTime + 5))
    fi
done

knownChecksum="$(grep ",stdin" "$crystalWorkdir/$CrystalID.checksums" | awk -F',' '{print $3}')"

retryUntilSuccess 1000 60 5 5 iasha1 "$CrystalID/$CrystalID.coal5" > /dev/null || die "Number of allowed retries exceeded without success."
checksumLine="$(retryUntilSuccess 1000 60 5 5 iasha1 "$CrystalID/$CrystalID.coal5")" || die "Number of allowed retries exceeded without success."

# First, check against the stored checksum
if [[ "$checksumLine" != "$knownChecksum" ]]; then
    die "ERROR! Checksum known by Internet Archive $checksumLine does not match saved checksum known locally $knownChecksum."
fi

# Now, check the local file's checksum again in case it's gotten screwed up in the mean time somehow
knownChecksum="$(hashdeep -c sha1 -j0 -o fbcpsde < "$crystalWorkdir/$CrystalID.coal5" | grep ",stdin" | awk -F',' '{print $2}')"
if [[ "$checksumLine" != "$knownChecksum" ]]; then
    die "ERROR! Checksum known by Internet Archive $checksumLine does not match new checksum known locally $knownChecksum."
fi

getChecksumRetries=0
retryDelayTime=5
until [[ $getChecksumRetries -ge 1000 ]]; do
    if ia downloadAsStream https://archive.org/download/"$CrystalID/$CrystalID"_files.xml | grep -F "<file name=\"$CrystalID.coal5-timestamp\" source=\"original\">" > /dev/null; then
        postUploadCheckFailHandler
        break
    fi
    getChecksumRetries=$((getChecksumRetries+1))
    sleep $retryDelayTime
    if [[ $retryDelayTime -lt 30 ]]; then
        retryDelayTime=$((retryDelayTime + 5))
    fi
done

if [[ "$postUploadCheckSuccess" != "1" ]]; then
    die "ERROR! Post-upload check failed: data appear to not have been transferred successfully!"
fi

echo "Retrieving remote index..."

rm -f "$crystalWorkdir/$CrystalID".json.xz
{ retryUntilSuccess 100 30 5 5 wget --delete-after --save-headers --output-document - "https://archive.org/metadata/$CrystalID/" > "$crystalWorkdir/$CrystalID.json"; } 2>&1
checkedxz "$crystalWorkdir/$CrystalID".json -C sha256 -9 -e -v 2>&1

rsync -av --progress --checksum "$crystalWorkdir/$CrystalID.json.xz" "$crystalWorkdir/$CrystalID.checksums" "${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Crystal\ Index/

rm "$crystalWorkdir/$CrystalID.json.xz" "$crystalWorkdir/$CrystalID.checksums"

# Next section registers the newly created crystal in the CrystalCache so an immediate decrystallize doesn't need to re-download it.

if ! [[ -e "$crystalWorkdir/.CrystalCache/" ]]; then
    fcache_init "$crystalWorkdir/.CrystalCache/"
fi

dbDir="$crystalWorkdir/.CrystalCache/"
scache_gc "$dbDir" "f"

requestUrl="https://archive.org/download/$CrystalID/$CrystalID.coal5"
hashFull="$(sha512sum <<< "$requestUrl" | awk '{print $1;}')"
hashA="${hashFull:0:1}"
hashB="${hashFull:1:1}"
hashC="${hashFull:2:1}"
hashSubdir="$hashA/$hashB/$hashC"
hashDir="$dbDir/$hashSubdir"
mkdir -p "$hashDir"
dbLinkPath="$hashDir/$hashFull"
checksumName="$dbLinkPath.checksum"

finish() {
    rm -f "${dbLinkPath:?}.locked"
}
trap finish EXIT
# Don't remove .coal5 file if it fails after this point
trap 'cat "$crystalWorkdir/$CrystalID" || true; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

[[ -e "$dbLinkPath.locked" ]] && die "This URL cache entry (for a supposedly new crystal) is already in use. This should never happen, and indicates a bug in crystallize."

if [[ -e "$dbLinkPath" ]] || [[ -h "$dbLinkPath" ]]; then
    die "This URL cache entry (for a supposedly new crystal) already exists. This should never happen, and indicates a bug in crystallize."
fi

[[ -e "$checksumName" ]] && die "This URL cache entry (for a supposedly new crystal) already has a checksum file. This should never happen, and indicates a bug in crystallize."

echo "locked on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)" > "$dbLinkPath.locked"

requestCount=0
dbFileDir="$dbDir/ByCount/${requestCount:?}/$hashSubdir"
dbFilePath="$dbFileDir/$hashFull"
mkdir -p "$dbFileDir"
mv "$crystalWorkdir/$CrystalID.coal5" "$dbFilePath"
sha512sum < "$dbFilePath" | awk '{print $1;}' > "$checksumName"
printf "%s" "$requestUrl" > "$dbLinkPath.url"

[[ -h "$dbLinkPath" ]] && rm "$dbLinkPath"
ln -s "$dbFilePath" "$dbLinkPath"

if [[ "$leaveLocked" != "true" ]]; then
    # Done editing the cache entry, so release the lock
    rm "$dbLinkPath.locked"
fi

echo "Please wait, testing finished item..."
testDecrystDir="$(bigTempDir)"
(
    cd "$testDecrystDir" || die "cd failed"
    decrystallize --passphrase "$(<"$crystalWorkdir/$CrystalID".tmp)" --lock-override "$CrystalID" 2>&1 || die "Could not decrystallize the finished crystal!"
    rm "$crystalWorkdir/$CrystalID.tmp"
)
rm -r "${testDecrystDir:?}"

#Build this again for the rm command
CrystallizePaths=( "$@" )
for i in "${!CrystallizePaths[@]}"; do
    #resolve path
    #echo "Trying to resolve ${CrystallizePaths[$i]}..."
    setVariableToCommandOutput "abspath" "emreadlink" "${CrystallizePaths[$i]}"
    CrystallizePaths[$i]="${abspath:?}"
done

#Delete everything except log
#echo "Cleaning up..."
set +o pipefail
trap - ERR
if [[ "$keepFiles" != "true" ]]; then
    rm -rf "${CrystallizePaths[@]}"
fi
trap 'cat "$crystalWorkdir/$CrystalID" || true; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
set -o pipefail
echo "Done cleaning up..."

# Create a pointer file, if requested. Do this after cleanup because that way we know the test decrystallize and any other tests have been passed. We don't want to create a pointer if the crystallize failed since the pointer would be corrupt.
if [[ $crystallizeLeavePointer == true ]]; then
    echo "$CrystalID" > "$crystallizePointerDir"/identifier
    echo "$CrystalID" > "$crystallizePointerName"
    #echo "Added crystal ID"
    if [[ -e "$(basename "$crystallizePointerDir")" ]]; then
        crystallize "$(basename "$crystallizePointerDir")"
    fi
    if [[ -e "$(basename "$crystallizePointerName")" ]]; then
        crystallize "$(basename "$crystallizePointerName")"
    fi
    rsync -av --progress --checksum "$crystalWorkdir"/pointers/"$(basename "$crystallizePointerName")" "$crystalWorkdir"/pointers/"$(basename "$crystallizePointerDir")" .
    #echo "Pointer directory: $crystallizePointerDir"
    #echo "Pointer name: $crystallizePointerName"
fi

chmod -R 644 "${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Crystal\ Index/

if rm -v "$crystalWorkdir/$CrystalID.coal5-timestamp"; then
    #Clear the screen
    printf "\\033c"

    echo "Done! The new crystal's address is:"
    echo "$CrystalID"
else
    #Clear the screen
    printf "\\033c"

    echo "Crystallisation failed! This is bad!"
    exit 1
fi
