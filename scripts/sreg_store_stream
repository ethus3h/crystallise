#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null

((EUID)) && exec sudo -- "$0" "$@"
#set -x

function finish() {
    if [[ -e "$streamId" ]]; then
        rm -r "$streamId"
    fi
}
trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."; finish; exit 1' ERR

crystalWorkdir="$(crystallize-getconf 'WorkDirectory')"
dbDir="${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Stream\ Registry
(
    cd "$crystalWorkdir" || exit 1
    # Don't rename this to sreg. I think this name is needed for reading it
    streamId="scache-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    sponge "$streamId.tmp"
    # Calculate hash
    if [[ "$1" == "--assume-checksum" ]]; then
        shift
        hashFull="$1"
        shift
    else
        hashFull="$(sha512sum < "$streamId.tmp" | awk '{print $1;}')"
    fi
    hashA="${hashFull:0:1}"
    hashB="${hashFull:1:1}"
    hashC="${hashFull:2:1}"
    hashDir="$dbDir/$hashA/$hashB/$hashC"
    mkdir -p "$hashDir"
    dbFilePath="$hashDir/$hashFull"
    streamSize="$(du -sb "$streamId.tmp" | awk '{print $1;}')"
    if [[ "$streamSize" -gt 10000000 ]]; then
        useLocalStore="false"
    else
        useLocalStore="true"
        localStoreDir="$dbDir/LocalStore/$hashA/$hashB/$hashC"
        mkdir -p "$localStoreDir"
        localStoreFilePath="$localStoreDir/$hashFull"
    fi
    if [[ -f "$dbFilePath" ]]; then
        # Item already has been stored, so check that the existing pointer can be restored
        recoveredHash="$(sreg_read_stream --disallow-hash-pointer < "$dbFilePath" | sha512sum | awk '{print $1;}')"
        if [[ "$recoveredHash" != "$hashFull" ]]; then
            die "Could not read existing item."
            # if [[ "$1" == "--verbose" ]]; then
            #     warn "Could not read existing item."
            # fi
            # fsckDir="${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Stream\ Registry/Failed\ Fsck/
            # mkdir -p "$fsckDir"
            # mv "$dbFilePath" "$fsckDir"
        fi
    else
        # Item not available in cache, so add it (c39... is the LocalStore pointer type signature; a5e... is the remote type signature)
        pointerTypeSignature="c39f8657-384b-438b-a5a2-eece17147589"
        if [[ "$useLocalStore" != "true" ]]; then
            if [[ "$1" == "--verbose" ]]; then
                crystallize --leave-pointer "$streamId.tmp" | cat
            else
                crystallize --leave-pointer "$streamId.tmp" > "$streamId.tmp.sstream-stdout" 2> "$streamId.tmp.sstream-stderr"
                logFiles=("$streamId.tmp.sstream-stdout" "$streamId.tmp.sstream-stderr")
            fi
            pointerTypeSignature="a5e2f296-3085-49c0-8f48-24ea436b7a8b"
        fi
        echo "$pointerTypeSignature" > "$dbFilePath"
        echo "$hashFull" >> "$dbFilePath"
        if [[ "$useLocalStore" != "true" ]]; then
            tar -c -P -S --format pax "$streamId.tmp.crystal" ".$streamId.tmp.crystal-data" "${logFiles[@]}" | xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout - >> "$dbFilePath"
        else
            xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout "$streamId.tmp" > "$localStoreFilePath"
        fi
        # Upload a pack of the LocalStore items if there are enough, and update the pointers accordingly.
        if ! [[ -e "$crystalWorkdir/.LocalStoreCache/" ]]; then
          localstorecache_init "$crystalWorkdir/.LocalStoreCache/" 5000000000
        fi
        localStoreSize="$(du -sb "$dbDir"/LocalStore | awk '{print $1;}')"
        if [[ "$localStoreSize" -gt 100000000 ]]; then
            mv "$dbDir"/LocalStore "$streamId.LocalStore"
            rsync -aq --checksum --no-i-r "$streamId.LocalStore" "$streamId.LocalStore.tmp"
            if [[ "$1" == "--verbose" ]]; then
                crystallize --leave-pointer "$streamId.LocalStore" | cat
            else
                crystallize --leave-pointer "$streamId.LocalStore" > "$streamId.LocalStore.sstream-stdout" 2> "$streamId.LocalStore.sstream-stderr"
                storeLogFiles=("$streamId.LocalStore.sstream-stdout" "$streamId.LocalStore.sstream-stderr")
            fi
            # (2fa... is the remote bundle pointer type signature)
            mv "$streamId.LocalStore.tmp" "$streamId.LocalStore"
            tar -c -P -S --format pax "$streamId.LocalStore.crystal" ".$streamId.LocalStore.crystal-data" "${storeLogFiles[@]}" > "$streamId.bundle.pointer.tar"
            [[ "$(xxd "$streamId.bundle.pointer.tar" | head -c 12)" == "00000000: 00" ]] || { mkdir -p "$(crystallize-getconf 'WorkDirectory')/.CorruptSregTarFileInfo/"; rsync -a "$streamId.LocalStore.crystal" ".$streamId.LocalStore.crystal-data" "${storeLogFiles[@]}" "$streamId.bundle.pointer.tar" "$(crystallize-getconf 'WorkDirectory')/.CorruptSregTarFileInfo/"; die "Pointer pax was corrupt!"; }
            xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout < "$streamId.bundle.pointer.tar" > "$streamId.bundle.pointer"
            pointerName="$(readlink -f "$streamId.bundle.pointer")"
            mkdir -p "$dbDir/Packs/"
            rsync -q --checksum "$pointerName" "$dbDir/Packs/"
            find "$streamId.LocalStore" -type f -exec sregi_bundle_pointer "$pointerName" {} \;
        fi
        # Check that the data can be restored
        #if [[ "$1" == "--verbose" ]]; then
            #sregi_verify_entry "$dbFilePath" || die "Failed saving stream: stored stream could not be read!"
        #else
            trap finish EXIT
            sregi_verify_entry "$dbFilePath" &> /dev/null || die "Failed saving stream: stored stream could not be read!"
            trap - EXIT
        #fi
    fi
    if [[ "$1" != "--verbose" ]]; then
        cat "$dbFilePath"
    fi
    if [[ -e "$streamId" ]]; then
        rm -r "$streamId"
    fi
    if [[ -e "$streamId.tmp" ]]; then
        rm "$streamId.tmp"
    fi
    if [[ -e "$streamId.tmp.crystal" ]]; then
        rm "$streamId.tmp.crystal"
    fi
)
