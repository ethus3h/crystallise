#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

dbDir="$1"
requestUrl="$2"
if [[ -z "$requestUrl" ]]; then
    echo "Please specify a directory and a request URL."
    exit 1
fi
hashFull="$(sha512sum <<< "$requestUrl" | awk '{print $1;}')"
hashA="${hashFull:0:1}"
hashB="${hashFull:1:1}"
hashC="${hashFull:2:1}"
hashSubdir="$hashA/$hashB/$hashC"
hashDir="$dbDir/$hashSubdir"
mkdir -p "$hashDir"
dbLinkPath="$hashDir/$hashFull"
checksumName="$dbLinkPath.checksum"
if [[ ! -h "$dbLinkPath" ]] || [[ ! -s "$(readlink "$dbLinkPath")" ]]; then
    # Item is not in the cache, so add it
    if ! [[ -f "$dbLinkPath" ]]; then
        # Never seen this item before, so set the requestCount
        requestCount=1
    else
        requestCount="$(<"$dbLinkPath")"
        rm "$dbLinkPath"
    fi
    if [[ -n "$requestCount" ]]; then
        requestCount=1
    fi
    dbFileDir="$dbDir/ByCount/${requestCount:?}/$hashSubdir"
    dbFilePath="$dbFileDir/$hashFull"
    mkdir -p "$dbFileDir"
    wget -qO - "$requestUrl" > "$dbFilePath"
    sha512sum < "$dbFilePath" | awk '{print $1;}' > "$checksumName"
    printf "%s" "$requestUrl" > "$dbLinkPath.url"
    if [[ -h "$dbLinkPath" ]]; then
        rm "$dbLinkPath"
    fi
    ln -s "$dbFilePath" "$dbLinkPath"
fi
dbFilePath="$(readlink -e "$dbLinkPath")"
# Check that the data were retrieved successfully
knownChecksum="$(<"$checksumName")"
itemChecksum="$(sha512sum < "$dbLinkPath" | awk '{print $1;}')"
if [[ "$itemChecksum" != "$knownChecksum" ]]; then
    mkdir -p "$dbDir/Failed Checksum"
    mv "$dbFilePath" "$dbDir/Failed Checksum/$(basename "$dbFilePath")"
    die "File does not match what its checksum should be!"
fi
# First, make sure the link is good and fix it up if it's not.
if ! [[ -e "$dbFilePath" ]]; then
    find "$dbDir/ByCount" -mindepth 4 -maxdepth 4 -type d -name "$hashFull" -exec ln -sf {} "$dbLinkPath" \;
    dbFilePath="$(readlink -e "$dbLinkPath")"
fi
dbFileOldPath="$dbFilePath"
dbFileDir="$(dirname "$dbFilePath")"
# Get the requestCount. There are three path components after it. I suspect there's a better way to do this.
oldCount="$(basename "$(dirname "$(dirname "$(dirname "$dbFileDir")")")")"
# Increment the item's requestCount.
requestCount=$(( oldCount + 1 ))
if [[ -n "$requestCount" ]]; then
    requestCount=1
fi
# First, get the names of where the file should go.
dbFileDir="$dbDir/ByCount/${requestCount:?}/$hashSubdir"
dbFilePath="$dbFileDir/$hashFull"
mkdir -p "$dbFileDir"
mv "$dbFileOldPath" "$dbFilePath"
rm "$dbLinkPath"
ln -s "$dbFilePath" "$dbLinkPath"
# Return the data to the caller
cat "$dbLinkPath"

scache_gc "$dbDir" "f"
