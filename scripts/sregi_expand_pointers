#!/usr/bin/env emberPlatformResolver-bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"

removeMyFailCheckFile() {
    save_traps="$(trap)"
    trap - ERR
    rm -f "${myFailCheckFile:?}"
    eval "$save_traps"
}
trap removeMyFailCheckFile EXIT

trap 'removeMyFailCheckFile; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

failCheckFile=""
if [[ "$1" == "--fail-check" ]]; then
    shift
    failCheckFile="$1"
    shift
fi
if [[ -n "$failCheckFile" ]]; then
    if [[ -e "$failCheckFile" ]]; then
        warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"! Aborting."
    else
        echo "$0 running in $(readlink -f "$(pwd)") with the arguments $*" > "$failCheckFile" || echo "$0 running in an unknown directory with the arguments $*" > "$failCheckFile"
    fi
fi
success() {
    if [[ -n "$failCheckFile" ]]; then
        rm -f "${failCheckFile:?}"
    fi
    exit 0
}

instanceId="sregi_expand_pointers-$(date-uuid)"
myFailCheckFile="/tmp/$instanceId.running"

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

fsckStatusFile="$1"
shift

while [[ ! -z "$1" ]]; do
    fileToResolve="$1"

    if [[ -n "$fsckStatusFile" ]]; then
        numberExpected="$(<"$fsckStatusFile")"
        numberProcessedFile="$fsckStatusFile.done"
        if ! [[ -f "$numberProcessedFile" ]]; then
            numberProcessed="0"
        else
            numberProcessed="$(<"$numberProcessedFile")"
            numberProcessed=$(( numberProcessed + 1 ))
        fi
        echo "$numberProcessed" > "$numberProcessedFile"
        if [[ "$numberExpected" == "0" ]]; then
            numberExpected="-1"
        fi
        numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
        echo "Resolving item $fileToResolve: #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
    fi

    if [[ -f "$fileToResolve" ]]; then
        # FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
        # shellcheck disable=SC2094
        tempFileName="$(crystallize-getconf WorkDirectory)/.$(basename "$fsckStatusFile").expand.tmp"
        sreg_read_stream --sreg-dir "$sregDir" < "$fileToResolve" > "$tempFileName" || die "Reading $fileToResolve failed."
        mv "$tempFileName" "$fileToResolve" || die "Moving retrieved data for $fileToResolve into place failed."
    else
        if [[ -d "$fileToResolve" ]]; then
            find "$fileToResolve" -type f -exec sregi_expand_pointers --fail-check "$myFailCheckFile" --sreg-dir "$sregDir" "$fsckStatusFile" {} \;
        else
            warn "Skipping item $fileToResolve: not a regular file or directory."
        fi
    fi
    shift
done

success
