#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir" --full-check)"

removeFailCheckFile() {
    save_traps="$(trap)"
    trap - ERR
    rm -f "${failCheckFile:?}"
    eval "$save_traps"
}

finish() {
    if [[ -e "${crystalWorkdir:?}/${instanceId:?}" ]]; then
        rm -r "${crystalWorkdir:?}/${instanceId:?}"
    fi
    if [[ -e "/tmp/${instanceId:?}" ]]; then
        rm -r "/tmp/${instanceId:?}"
    fi
}
trap 'removeFailCheckFile; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
trap 'removeFailCheckFile; finish' EXIT

skipCache=""
if [[ "--skip-cache" == "$1" ]]; then
    skipCache="--skip-cache"
    shift
fi

echo "Counting items..."
crystalWorkdir="$(crystallize-getconf WorkDirectory)"
instanceId="sreg_check_failed-$(date-uuid)"
failCheckFile="/tmp/$instanceId.running"
mkdir -p "$crystalWorkdir/${instanceId:?}"
mkdir -p "/tmp/${instanceId:?}"
fsckStatusFile="/tmp/$instanceId/.sreg_check_failed.status"
dbDir="$sregDir"/Failed\ Fsck
find "$dbDir" -type f -printf '.' | wc -c > "$fsckStatusFile"
rm -f "$fsckStatusFile.failed"
bpid="$$"
find "$dbDir" -type f \( -exec sregi_check_failed_entry "$failCheckFile" --sreg-dir "$sregDir" {} "$fsckStatusFile" "$skipCache" \; -or -exec kill "-$bpid" \; \)

if [[ -e "$failCheckFile" ]]; then
    die "An invocation of sregi_check_failed_entry (called from $0) failed with the message \"$(<"$failCheckFile")\"!"
fi

[[ -e "$fsckStatusFile.failed" ]] && die "Failed verifying entry! Aborted."
echo "Done all items."
finish
