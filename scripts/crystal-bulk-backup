#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

check="true"
if [[ "$1" == "--no-check-existing" ]]; then
    check="false"
    shift
fi

backupLocation="$(crystallize-getconf BackupLocation)"

mkdir -p "$backupLocation"

echo 'Building backup indices'

cd "$backupLocation" || die "Could not cd to newly created directory! This should never happen."
touch ".cbb.isBackupDir"

[[ -e '.git' ]] || git init
print $'items\n' >> .gitignore
print $'items.failed-check\n' >> .gitignore
print $'sregbak\n' >> .gitignore
print $'bulk-backup/git\n' >> .gitignore
removeDuplicateLines '.gitignore' | sponge '.gitignore'

git add .gitignore
git commit -m "Update" > /dev/null || true
git add -A .
git commit -m "Update" > /dev/null || true

cbbConfigDir="$(crystallize-getconf ConfigDir)"
mkdir -p "$cbbConfigDir"/crystallize/cbb/sreg
touch "$cbbConfigDir"/crystallize/cbb/sreg/.keep
touch "$cbbConfigDir"/crystallize/cbb/crystals
touch "$cbbConfigDir"/crystallize/cbb/repos

# Build backup indices (this won't finish building the sreg/crystal indices because they need the git repos cloned to make them)
mkdir -p "bulk-backup/cbb-index/sreg-core"
touch "bulk-backup/cbb-index/sreg-core/.keep"
mkdir -p "bulk-backup/cbb-index/sreg-extra"

echo 'Syncing configuration...'
rsync -a --checksum "$(crystallize-getconf ConfigLocation)" "bulk-backup/cbb-index/ember.conf" &> /dev/null
crystallize-getconf 'passphrase' > "bulk-backup/cbb-index/passphrase.default"
rsync -a --checksum "$cbbConfigDir"/crystallize/cbb/sreg/ "bulk-backup/cbb-index/sreg-extra" &> /dev/null
print $'\n' >> "bulk-backup/cbb-index/crystals"
cat "$cbbConfigDir"/crystallize/cbb/crystals >> "bulk-backup/cbb-index/crystals"
rsync -a --checksum "$cbbConfigDir"/crystallize/cbb/repos "bulk-backup/cbb-index/repos" &> /dev/null

echo "${EmberLibrary:?}/Futuramerlin Projects/Data/Stream Registry" >  "bulk-backup/cbb-index/sreg-core/EmberLibrary"
echo "${EmberLibrary:?}/Ember satellite projects/ember-history/.sreg" >  "bulk-backup/cbb-index/sreg-core/EmberHistory"
echo "${EmberLibrary:?}/Ember satellite projects/wreathe-packages/.sreg" >  "bulk-backup/cbb-index/sreg-core/WreathePackages"

# FIXME: Recursively cloning ember-meta doesn't seem to work, for some reason.
echo $'\n'"https://github.com/ethus3h/ember-meta.git" >>  "bulk-backup/cbb-index/repos"

# Take care of git now
(
    mkdir -p repositories
    #cbbRepos="$(<bulk-backup/cbb-index/repos)"
    cbbRepos="https://github.com/ethus3h/personal.git"
    cd repositories
    while read -r repo; do
        repoName="$(basename "$repo")"
        repoName="${repoName%.*}"
        if [[ -n "$repoName" ]]; then
            if [[ -e "$repoName" ]]; then
                (
                    cd "$repoName"
                    git pull
                )
            else
                git clone --recursive "$repo"
            fi
        fi
    done <<< "$cbbRepos"
) || die

shopt -s dotglob

for file in bulk-backup/cbb-index/sreg-core/* bulk-backup/cbb-index/sreg-extra/*; do
    bakDir="stream-registry-repos/$(basename "$file")"
    mkdir -p "$bakDir"
    pathToSreg="$(<"$file")"
    mkdir -p "$pathToSreg/LocalStore"
    rsync -av --checksum "$pathToSreg/LocalStore" "$bakDir/" &> /dev/null
    rsync -av --checksum "$pathToSreg/passphrase" "$bakDir/" &> /dev/null || true # There isn't necessarily a passphrase file if it uses the default one.
    # Go through this sreg and add all the crystals it uses to the index

    # Normal remote pack pointers
    for identFile in "$pathToSreg/Packs/"*.identifier; do
        #echo "$(<"$identFile")" >> "bulk-backup/cbb-index/crystals"
        true # (Skipping ident file since this is disabled right now to make testing faster)
        # FIXME: won't work for packs that don't have a .identifier file (older ones just have a pointer file)
    done

    # Remote pack pointers, with pointer data in the pointer [209fcfdf-d1ad-4345-8ef7-1fdc2d583d49]
    # Like the normal remote pack pointers, we need to get the identifier out of the pointer as a tar file.

    # Standard remote pointers [a5e2f296-3085-49c0-8f48-24ea436b7a8b]
    # URL pointers [45baff46-8db7-46f6-aad9-de5f713b02fe]
    shopt -s globstar
    # for potentialPointer in "$pathToSreg"/**; do
    #     if [[ -f "$potentialPointer" ]]; then
    #         typeSignature="$(head -c 36 "$potentialPointer" | tr -d '\0')"
    #         if [[ "$typeSignature" == "a5e2f296-3085-49c0-8f48-24ea436b7a8b" ]]; then # Standard remote pointer
    #             true # TODO: Not implemented
    #         elif [[ "$typeSignature" == "45baff46-8db7-46f6-aad9-de5f713b02fe" ]]; then # URL pointer
    #             true # TODO: Not implemented
    #         fi
    #     fi
    # done
done

removeDuplicateLines 'bulk-backup/cbb-index/crystals' | sponge 'bulk-backup/cbb-index/crystals'

git add -A .
git commit -m "Update" > /dev/null || true

# Actually download and/or check the selected crystals now
mkdir -p "items"
cd items || die "Could not cd to newly created items directory"
cbbCrystals="$(<../bulk-backup/cbb-index/crystals)"
while read -r crystal; do
    if [[ -n "$crystal" ]]; then
        if [[ -e "$crystal" ]]; then
            if [[ "$check" == "false" ]]; then
                continue
            fi
        fi
        crystallize-backup "$crystal"
    fi
done <<< "$cbbCrystals"

git add -A .
git commit -m "Update" > /dev/null || true
