#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

# Ember Git UPdater for single repository

userName="$(stat -c '%U' .)"
[[ "$(whoami)" != "$userName" ]] && exec sudo -u "$userName" -- "$0" "$@"

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)."' ERR
# set -x

if [[ "$1" == "--offline" ]]; then
    offline="true"
    shift
fi

cd "$1" || exit 1

commitMessage="Update Git repository using egup-single"
commitMessageAppendable=""
if [[ -n "$2" ]]; then
    commitMessage="$2"
    commitMessageAppendable=" (associated commit: $commitMessage)"
fi

egup-env

if [[ -f .egup.git-native-excludes ]]; then
    echo "(Applying native Git excludes)"
    cp .egup.git-native-excludes .git/info/exclude # instead of using $GIT_DIR, because then it would get applied to the elen environment git dir too
fi

# Back up the .gitignore in preparation for the next step
git add .gitignore || true # It's ok if this fails — it probably means there is no .gitignore
git commit -m "[egup] Update .gitignore$commitMessageAppendable" || true #It's ok if this fails — it probably means there is nothing to commit

if [[ -f .egup.git-native-excludes ]] && [[ "$(readlink -f .git/info/exclude)" == "$(readlink -f "$GIT_DIR"/info/exclude)" ]]; then
    # Not in an elen environment, so make sure the .gitignore hasn't gotten screwed up before running anything else
    cp .egup.git-native-excludes .gitignore
fi

branch="$(git branch | grep -E "^\* " | cut -c 3-)"
git checkout "$branch"
git add -A || die "Error adding changes."
git add -A . || die "Error adding changes."
git commit -a -m "$commitMessage" || echo "(Note: Repository appears to have no changes to commit.)"
if [[ -f .egup.hooks ]]; then
    echo "Beginning running hooks..."
    ./.egup.hooks || warn "WARNING! pre-build-hooks failed; continuing anyway."
    echo "Done running hooks."
    git commit -a -m "[egup] Update hooks$commitMessageAppendable" || true #It's ok if this fails — it probably means there is nothing to commit, and the user was already notified by saying "no changes to commit" earlier.
fi

status=""
while [[ "$status" != "completed" ]]; do
    # Do this part of the process twice to make reasonably sure remote changes to branches/refs/tags are correctly reflected in the .egup.{branches/refs/tags/stat} files

    git branch --list -a -v > .egup.branches
    sed -i '/^\* master /d' .egup.branches
    sed -i '/^  remotes\/origin\/master /d' .egup.branches
    git remote -v > .egup.remotes
    git show-ref -d > .egup.refs
    sed -i '/^[a-f0-9]\{40\} refs\/heads\/master$/d' .egup.refs
    sed -i '/^[a-f0-9]\{40\} refs\/remotes\/origin\/HEAD$/d' .egup.refs
    sed -i '/^[a-f0-9]\{40\} refs\/remotes\/origin\/master$/d' .egup.refs
    git show-ref -d --tags > .egup.tags || echo "(Note: Repository appears to have no tags.)"

    rm -f .egup.stat
    rm -rf ./.egup.stat.d
    find . -maxdepth 1 -name '.egup.stat.split*' -delete

    print "${emberCrystallizeVersion:?}"$'\n' > .egup.stat
    if [[ ! -f "./.egup.no-stat" ]]; then
        repositoryFolderName="$(basename "$(readlink -f .)")"

        [[ "$repositoryFolderName" == "ember-web-site-snapshots" ]] && find . -name '.git' -and -not -path './.git' -exec mv {} {}.egup-single-disabled \;
        [[ "$repositoryFolderName" == "ember-web-site-snapshots" ]] && emberWebSnapshotsRepositoryFolderName='-false'
        [[ "$emberWebSnapshotsRepositoryFolderName" == "-false" ]] || emberWebSnapshotsRepositoryFolderName='-true'

        [[ "$repositoryFolderName" == "ember-web-site" ]] && emberWebRepositoryFolderName='-true'
        [[ "$emberWebRepositoryFolderName" == "-true" ]] || emberWebRepositoryFolderName='-false'

        mkdir -p './.egup.stat.d'

        statPrintFormatString='%p\0%l:\0%y:%m:%U:%u:%G:%g:%TY:%Tm:%Td:%TH:%TM:%TS:%TZ:%CY:%Cm:%Cd:%CH:%CM:%CS:%CZ\0\0'
        find . -path '*/.git' -prune -o -path '*/.git/*' -prune -o -path . -o \( \( -path './information-technology/env' -o -path './identifiers.lst' \) -and "$emberWebRepositoryFolderName" \) -prune -o \( -type d -and \( -exec test -e '{}/.git' \; \) -and "$emberWebSnapshotsRepositoryFolderName" \) -prune -and -printf "$statPrintFormatString" -or -not -path './.egup.stat' -not -path './.egup.stat.d' -not -path './.egup.stat.d/*' -not -path './.egup.tags' -not -path './.egup.branches' -not -path './.egup.refs' -not -path './.egup.remotes' -printf "$statPrintFormatString" | hexdump -v -e '1/1 "%02X "' | tr ' ' '\12' | sed 's/5C/5C\n5C/g' | sed 's/0A/5C\n0A/g' | tr '\12' ' ' | xxd -r -p | tr '\0' '\12' >> ".egup.stat" || die ".egup.stat"" could not be generated!"

        pushd .egup.stat.d || die "pushd failed!"
        mv ../.egup.stat ./

        egupStatDirItemCount="$(wc -l < .egup.stat)"
        egupStatDirItemCountPlusTwo=$(( egupStatDirItemCount + 2 ))
        egupStatDirItemCountWc="$(wc -c <<< "$egupStatDirItemCountPlusTwo")"

        find . -maxdepth 1 -type f -name '.egup.stat' -exec split -a "$egupStatDirItemCountWc" -l 1 --numeric-suffixes '.egup.stat' ".egup.stat.split" \; -delete

        egupStatDirDestSize=10000 # 10000 files per subdirectory
        egupStatDirDestCount=$(( egupStatDirItemCount / egupStatDirDestSize + 1 ))
        egupStatDirCounter=0
        while [[ "$egupStatDirCounter" -lt "$egupStatDirDestCount" ]]; do
            mkdir -p "egup.stat.d.bin$egupStatDirCounter"
            find . -maxdepth 1 -type f | sort | head -n "$egupStatDirDestSize" | xargs -I'{}' mv '{}' ./egup.stat.d.bin"$egupStatDirCounter"/'{}'.split || test $? -eq 141 # https://stackoverflow.com/questions/22464786/ignoring-bash-pipefail-for-error-code-141
            egupStatDirCounter=$(( egupStatDirCounter + 1))
        done

        popd || die "popd failed!"
    fi

    git add -A || die "Error adding tag changes."
    trap - ERR
    git commit -a -m "[egup] Update repository metadata$commitMessageAppendable" || true
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)."' ERR

    if [[ "$offline" != "true" ]]; then
        retryUntilSuccess 100 30 5 5 git pull --all || die "Error pulling."
        # FIXME UNCOMMENT retryUntilSuccess 100 30 5 5 git submodule update --remote || warn "Error updating submodules. Maybe a remote server is down?"
        if ! [[ -f .egup.nopush ]]; then
            retryUntilSuccess 100 30 5 5 git push --verbose --tags -u origin master || die "Error pushing changes."
            retryUntilSuccess 100 30 5 5 git push --verbose --all -u origin || die "Error pushing changes."
        fi
    fi

    if [[ "$status" == "partial" ]]; then
        status="completed"
    else
        status="partial"
    fi
done

egupexit
