#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

removeFailCheckFile() {
    save_traps="$(trap)"
    trap - ERR
    rm -f "${failCheckFile:?}"
    eval "$save_traps"
}

finish() {
    if [[ -e "${crystalWorkdir:?}/${fsckId:?}" ]]; then
        rm -r "${crystalWorkdir:?}/${fsckId:?}"
    fi
    if [[ -e "/tmp/${fsckId:?}" ]]; then
        rm -r "/tmp/${fsckId:?}"
    fi
}
trap 'removeFailCheckFile; die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
trap 'removeFailCheckFile; finish' EXIT

skipCount="0"
if [[ "$1" == "--skip" ]]; then
    shift
    skipCount="$1"
    shift
fi

skipCache="--skip-cache"

if [[ "--skip-cache" == "$1" ]]; then
    skipCache="--skip-cache"
    shift
    if [[ "--drop-failed" == "$1" ]]; then
        skipCache="--skip-drop-failed"
        shift
    fi
else
    if [[ "--drop-failed" == "$1" ]]; then
        skipCache="--skip-drop-failed"
        shift
    elif [[ "--no-skip-cache" == "$1" ]]; then
        warn "Using cache entries. Specify --skip-cache for more thorough checking."
        skipCache=""
        shift
        if [[ "--drop-failed" == "$1" ]]; then
            skipCache="--drop-failed"
            shift
        fi
    fi
fi

useNotes="--notes"

if [[ "--no-use-notes" == "$1" ]]; then
    useNotes=""
    shift
fi

sregDir="$(sregi_find_dir --sreg-dir "$1" --full-check)"

crystalWorkdir="$(crystallize-getconf WorkDirectory)"

reportFile="$(pwd)/fsck-report-$(date-uuid).lst"
warn "If there are any failed items, a report will be generated and placed at $reportFile."

echo "Counting items..."
fsckId=".sreg_fsck-$(date-uuid)"
failCheckFile="/tmp/$fsckId.srsync.running"
mkdir -p "$crystalWorkdir/${fsckId:?}"
mkdir -p "/tmp/${fsckId:?}"
fsckStatusFile="/tmp/$fsckId/.sreg_fsck.status"
dbDir="$sregDir"
find "$dbDir" -type f -not -path "$dbDir/Failed Fsck/*" -not -path "$dbDir/LocalStore/*" -not -path "$dbDir/Packs/*" -printf '.' | wc -c > "$fsckStatusFile"
rm -f "$fsckStatusFile.failed"

find "$dbDir" -type f -not -path "$dbDir/Failed Fsck/*" -not -path "$dbDir/.BundlePointerTemp/*" -not -path "$dbDir/LocalStore/*" -not -path "$dbDir/Packs/*" -exec sregi_verify_entry --fail-check "$failCheckFile" --skip "$skipCount" --notes --sreg-dir "$sregDir" --report-to "$reportFile" {} "$fsckStatusFile" "$skipCache" \;

if [[ -e "$failCheckFile" ]]; then
    die "An invocation of sregi_verify_entry (called from $0) failed with the message \"$(<"$failCheckFile")\"!"
fi

[[ -e "$fsckStatusFile.failed" ]] && die "Failed verifying entry! Aborted."
echo "Done all items."
finish
