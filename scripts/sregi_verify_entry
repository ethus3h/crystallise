#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

lockOverride="--no-lock-override"
if [[ "$1" == "--no-lock-override" ]]; then
    shift
elif [[ "$1" == "--lock-override" ]]; then
    lockOverride="--lock-override"
    shift
fi

success() {
    exit 0
}

skipAndExit() {
    if [[ -z "$fsckStatusFile" ]]; then
        die "A --fsck-status-file must be given when skipping entries."
    fi
    numberExpected="$(<"$fsckStatusFile")"
    numberProcessedFile="$fsckStatusFile.done"
    numberProcessed="$(<"$numberProcessedFile")"
    numberProcessed=$(( numberProcessed + 1 ))
    echo "$numberProcessed" > "$numberProcessedFile"
    echo "(Skipped $1: examined $skippedSoFar out of total $numberExpected)"
    exit 0
}

fsckStatusFile=""
if [[ "$1" == "--fsck-status-file" ]]; then
    shift
    fsckStatusFile="$1"
    shift
fi

failCheckFile=""
if [[ "$1" == "--fail-check" ]]; then
    shift
    failCheckFile="$1"
    shift
fi
if [[ -n "$failCheckFile" ]]; then
    skipCount="0"
    if [[ "$1" == "--skip" ]]; then
        shift
        skipCount="$1"
        shift
    fi
    if [[ "$skipCount" -gt "0" ]]; then
        skipFile="$failCheckFile.skip"
        skippedSoFar="$(<"$skipFile")"
        skippedSoFar=$(( skippedSoFar + 1 ))
        if [[ "$skippedSoFar" -le "$skipCount" ]]; then
            if [[ "$skippedSoFar" -eq "$skipCount" ]]; then
                # Mirror the argument parsing code here so we can find the fsckStatusFile
                if [[ "$1" == "--sreg-dir" ]]; then
                    shift
                    shift
                fi
                if [[ "$1" == "--report-to" ]]; then
                    shift
                    shift
                fi
                fsckStatusFile="$2"
                numberProcessedFile="$fsckStatusFile.done"
                echo "$skipCount" > "$numberProcessedFile"
            fi
            echo "$skippedSoFar" > "$skipFile"
            (( skippedSoFar % 50 )) || printf '\e[2K\r%s' "(skipped $skippedSoFar out of $skipCount...)"
            [[ "$skippedSoFar" -eq "$skipCount" ]] && printf '\e[2K\n'
            exit 0
        fi
    fi
    if [[ -e "$failCheckFile" ]]; then
        warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"!"
    else
        echo "$0 running at $(emdate) in $(readlink -f "$(pwd)") with the remaining arguments $*" > "$failCheckFile" || echo "$0 running at $(emdate) in an unknown directory with the remaining arguments $*" > "$failCheckFile"
        success() {
            if [[ -n "$failCheckFile" ]]; then
                rm -f "${failCheckFile:?}"
            fi
            exit 0
        }
    fi
else
    if [[ "$1" == "--skip" ]] && [[ "$2" != "0" ]]; then
        die "Non-zero skip counts require a --fail-check path to be given."
    fi
fi

skipVerified="--skip-verified"
if [[ "--skip-verified" == "$1" ]]; then
    shift
elif [[ "--no-skip-verified" == "$1" ]]; then
    skipVerified=""
    shift
fi

useNotes="false"
if [[ "$1" == "--notes" ]]; then
    shift
    useNotes="true"
fi

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

buildReport=""
reportFile=""
if [[ "--report-to" == "$1" ]]; then
    buildReport="true"
    shift
    reportFile="$1"
    shift
fi

fail() {
    if [[ "$buildReport" == "true" ]]; then
        echo "$knownHash" >> "$reportFile"
        [[ -e "$reportFile.registry" ]] || echo "$sregDir" > "$reportFile.registry"
    fi
    if [[ "$dropFailed" == "true" ]]; then
        dbDir="$sregDir"/Failed\ Fsck/
        mkdir -p "$dbDir"
        mv "$entryPath" "$dbDir/"
        die "Error verifying stream registry database entry $knownHash! Marking entry as corrupted."
    fi
    die "Error verifying stream registry database entry $knownHash!"
}

trap 'fail; warn "A failure while verifying an entry was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

entryPath="$1"

fsckStatusFile="$2"

if [[ "--quick" == "$2" ]]; then
    quick="true"
    fsckStatusFile=""
fi

if [[ "--quick" == "$3" ]]; then
    quick="true"
fi

skipCache=""
dropFailed="false"
if [[ "--skip-cache" == "$3" || "--skip-cache" == "$4" ]]; then
    skipCache="--skip-cache"
fi
if [[ "--skip-drop-failed" == "$3" || "--skip-drop-failed" == "$4" ]]; then
    skipCache="--skip-cache"
    dropFailed="true"
fi
if [[ "--drop-failed" == "$3" || "--drop-failed" == "$4" ]]; then
    dropFailed="true"
fi

if [[ "$useNotes" == "true" ]]; then
    if [[ "$skipCache" != "--skip-cache" ]] || [[ "$quick" == "true" ]]; then
        warn "Either --skip-cache (or --skip-drop-failed) was not given, or --quick was specified. Consequently, new success notes will not be written."
    fi
    if [[ -f "$entryPath.verified" ]]; then
        if [[ "--skip-verified" == "$skipVerified" ]]; then
            echo "Skipping: already verified."
            exit 0
        fi
        quick="true"
    fi
fi

knownHash="(Failed to retrieve entry hash!)"
knownHashTemp="$(sregi_hash_from_file "$entryPath")" || fail "$entryPath"
if [[ -n "$knownHashTemp" ]]; then
    knownHash="$knownHashTemp"
fi

exitCode=""
if [[ "$quick" == "true" ]]; then
    echo "Started quick-checking stream registry database entry $knownHash."
    sregi_hashpointer_sane --sreg-dir "$sregDir" "$entryPath"
    exitCode="$?"
else
    # Disable SC2094 because sreg_read_stream should not write to the file specified by --entry-path.
    # shellcheck disable=SC2094
    echo "Started checking stream registry database entry $knownHash."
    sreg_read_stream "$lockOverride" --sreg-dir "$sregDir" --entry-path "$entryPath" --checksum "$knownHash" --disallow-hash-pointer "$skipCache" < "$entryPath" > /dev/null
    exitCode="$?"
fi

if [[ "$exitCode" == "0" ]]; then
    # FIXME: On macOS, this reports (standard_in) 1: parse error and displays entries like "finished # of 681638 (0.000%)". It works fine if I paste the exact same code into the shell, but doesn't work when it's in this script. I've wasted enough time trying to debug this for now, this kind of BS is why my scripts don't normally support macOS. Ugh.
    if [[ -n "$fsckStatusFile" ]]; then
        numberExpected="$(<"$fsckStatusFile")"
        [[ -n "$skipCount" ]] && numberExpected=$(( numberExpected - skipCount ))
        numberProcessedFile="$fsckStatusFile.done"
        if [[ "$OSTYPE" == darwin* ]]; then
            xxd "$fsckStatusFile" >&2
        fi
        if ! [[ -f "$numberProcessedFile" ]]; then
            numberProcessed="1"
        else
            if [[ "$OSTYPE" == darwin* ]]; then
                xxd "$numberProcessedFile" >&2
            fi
            numberProcessed="$(<"$numberProcessedFile")"
            numberProcessed=$(( numberProcessed + 1 ))
        fi
        echo "$numberProcessed" > "$numberProcessedFile"
        if [[ "$OSTYPE" == darwin* ]]; then
            xxd "$numberProcessedFile" >&2
        fi
        if [[ "$numberExpected" == "0" ]]; then
            numberExpected="-1"
        fi
        numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
        echo "Verified stream registry database entry $knownHash: finished #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
    else
        true
    fi
    if [[ "$useNotes" == "true" ]]; then
        if [[ "$skipCache" == "--skip-cache" ]] && [[ "$quick" != "true" ]]; then
            touch "$entryPath.verified"
        fi
    fi
    success
else
    fail "$entryPath"
fi

if [[ "$useNotes" == "true" ]]; then
    if [[ "$skipCache" == "--skip-cache" ]] && [[ "$quick" != "true" ]]; then
        touch "$entryPath.verified"
    fi
fi
success
