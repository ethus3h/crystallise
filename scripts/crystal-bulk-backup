#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Will back up the Ember Library by default.
# Can optionally add additional things to back up: put a file for each other sreg repo (the .sreg folder, not the root) to back up in [ConfigDir]/.cbb.sreg/, a list of Crystal IDs to back up in [ConfigDir]/.cbb.crystals, a list of other IA identifiers to back up in [ConfigDir]/.cbb.idents, and a list of other git repositories to back up in [ConfigDir]/.cbb.repos.

backupLocation="$(crystallize-getconf BackupLocation)"

mkdir -p "$backupLocation"

cd "$backupLocation" || die "Could not cd to newly created directory! This should never happen."
touch ".cbb.isBackupDir"

cbbConfigDir="$(crystallize-getconf ConfigDir)"
mkdir -p "$cbbConfigDir"/.cbb.sreg
touch "$cbbConfigDir"/.cbb.sreg/.keep
touch "$cbbConfigDir"/.cbb.crystals
touch "$cbbConfigDir"/.cbb.idents
touch "$cbbConfigDir"/.cbb.repos

# Build backup indices (this won't finish building the sreg/crystal indices because they need the git repos cloned to make them)
mkdir -p ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-core"
rm -rf ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-extra"
rsync -a --checksum "$cbbConfigDir"/.cbb.sreg ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-extra"
rsync -a --checksum "$cbbConfigDir"/.cbb.crystals ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/crystals"
rsync -a --checksum "$cbbConfigDir"/.cbb.idents ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/idents"
rsync -a --checksum "$cbbConfigDir"/.cbb.repos ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/repos"

echo "${EmberLibrary:?}/Futuramerlin Projects/Data/Stream Registry" >  ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-core/EmberLibrary"
echo "${EmberLibrary:?}/Ember satellite projects/ember-history/.sreg" >  ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-core/EmberHistory"
echo "${EmberLibrary:?}/Ember satellite projects/wreathe-packages/.sreg" >  ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-core/WreathePackages"

# FIXME: Recursively cloning ember-meta doesn't seem to work, for some reason.
echo $'\n'"https://github.com/ethus3h/ember-meta.git" >>  ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/repos"

# Take care of git now
(
    mkdir -p .cbk.3165cbaa-0540-4735-9aba-d34848246367/git
    cbbRepos="$(<.cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/repos)"
    cd .cbk.3165cbaa-0540-4735-9aba-d34848246367/git
    while read -r repo; do
        if [[ -n "$repo" ]]; then
            if [[ -e "$repo" ]]; then
                git clone --recursive "$repo"
            else
                (
                    cd "$repo"
                    git pull
                )
            fi
        fi
    done <<< "$cbbRepos"
) || die

for file in .cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-core/* .cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/sreg-extra/*; do
    bakDir="sregbak/${file:9}"
    mkdir -p "$bakDir"
    pathToSreg="$(<"$file")"
    mkdir -p "$pathToSreg/LocalStore"
    rsync -av --checksum "$pathToSreg/LocalStore" "$pathToSreg/passphrase" "$bakDir/"
    # Go through this sreg and add all the crystals it uses to the index

    # Normal remote pack pointers
    for identFile in "$pathToSreg/Packs/"*.identifier; do
        echo "$(<"$identFile")" >> ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.idx/crystals"
        # FIXME: won't work for packs that don't have a .identifier file (older ones just have a pointer file)
    done

    # Remote pack pointers, with pointer data in the pointer [209fcfdf-d1ad-4345-8ef7-1fdc2d583d49]
    # Like the normal remote pack pointers, we need to get the identifier out of the pointer as a tar file.

    # Standard remote pointers [a5e2f296-3085-49c0-8f48-24ea436b7a8b]
    # URL pointers [45baff46-8db7-46f6-aad9-de5f713b02fe]
    shopt -s globstar
    for potentialPointer in "$pathToSreg"/**; do
        typeSignature="$(head -c 36 "$potentialPointer" | tr -d '\0')"
        if [[ "$typeSignature" == "a5e2f296-3085-49c0-8f48-24ea436b7a8b" ]]; then # Standard remote pointer
            true # TODO: Not implemented
        elif [[ "$typeSignature" == "45baff46-8db7-46f6-aad9-de5f713b02fe" ]]; then # URL pointer
            true # TODO: Not implemented
        fi
    done
done
