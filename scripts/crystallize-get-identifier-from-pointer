#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

potentialPointer="$1"
shift

showName="false"
if [[ "--verbose" == "$1" ]]; then
    showName="true"
    shift
fi

if [[ "$potentialPointer" == *.crystal ]] && [[ -f "$(dirname "$potentialPointer")"/."$(basename "$potentialPointer")"-data/identifier ]]; then
    cat "$(dirname "$potentialPointer")"/."$(basename "$potentialPointer")"-data/identifier
    exit
else
    sregDir=""
    if [[ -n "$1" ]]; then
        sregDir="$(sregi_find_dir --sreg-dir "$1" --full-check)"
    else
        sregDir="$(sregi_find_dir "$potentialPointer" --full-check)"
    fi

    myTempDir="$(tempDir)"
    potentialPointer="$(readlink -f "$potentialPointer")"
    spushd "$myTempDir" || die "Could not pushd!"

    typeSignature="$(head -c 36 "$potentialPointer" | tr -d '\0')"
    hashFull="$(sregi_hash_from_file "$potentialPointer")"
    hashA="${hashFull:0:1}"
    hashB="${hashFull:1:1}"
    hashC="${hashFull:2:1}"
    hashSubpath="$sregDir/$hashA/$hashB/$hashC"

    if [[ "$typeSignature" == "760fa662-89cf-4ebd-9664-150b7637ddd4" ]]; then # Hash pointer
        crystallize-get-identifier-from-pointer "$hashSubpath/$hashFull"
    elif [[ "$typeSignature" == "a5e2f296-3085-49c0-8f48-24ea436b7a8b" ]]; then # Standard remote pointer
        pointerTempDir="$(bigTempDir)"
        spushd "$pointerTempDir" || die "Could not pushd to $pointerTempDir!"
        tail -c +167 "$potentialPointer" | unxz --stdout - | tar -xf - &>/dev/null
        crystallize-get-identifier-from-pointer ./*.crystal
        spopd || die "Could not popd!"
        rm -r "$pointerTempDir"
    elif [[ "$typeSignature" == "c39f8657-384b-438b-a5a2-eece17147589" ]]; then # LocalStore pointer
        warn "This is a LocalStore pointer, so it does not yet have an associated identifier."
    elif [[ "$typeSignature" == "2fae2004-94bb-4aa8-a01a-fc44298efc2c" ]]; then # Remote pack pointer
        # Pack pointer name is in the pointer, so get the pack pointer data from the Packs directory
        pointerTempDir="$(bigTempDir)"
        spushd "$pointerTempDir" || die "Could not pushd to $pointerTempDir!"
        packName="$(tail -c +167 "$potentialPointer")"
        unxz --stdout - < "$sregDir/Packs/$packName" | tar -xf - &>/dev/null
        cat ./*.crystal
        spopd || die "Could not popd!"
        rm -r "$pointerTempDir"
    elif [[ "$typeSignature" == "209fcfdf-d1ad-4345-8ef7-1fdc2d583d49" ]]; then # Remote pack pointer, with pointer data in the pointer
        # Like the normal remote pack files, we need to get the identifier out of the pointer as a tar file.
        pointerTempDir="$(bigTempDir)"
        pointerDir="$PWD"
        spushd "$pointerTempDir" || die "Could not pushd to $pointerTempDir!"
        tail -c +167 "$pointerDir/$potentialPointer" | unxz --stdout - | tar -xf - &>/dev/null
        # MAINTENANCE: Code copied and tweaked from sreg_read_stream
        crystalFilePattern=".*.crystal-data"
        shopt -u failglob
        shopt -s nullglob
        crystalFilePatternMatches=( $crystalFilePattern )
        shopt -s failglob
        shopt -u nullglob
        localStoreCrystalName="${crystalFilePatternMatches[0]}"
        if ! [[ -e "$localStoreCrystalName" ]]; then
            warn "Crystal info could not be found in the pointer for $potentialPointer, so giving up immediately and skipping this one (retrying probably wouldn't help this)."
            spopd || die "Could not popd!"
        fi
        echo "$(<"$localStoreCrystalName"/identifier)"
        spopd || die "Could not popd!"
        rm -r "$pointerTempDir"
    elif [[ "$typeSignature" == "45baff46-8db7-46f6-aad9-de5f713b02fe" ]]; then # URL pointer
        echo "URL pointer found: $potentialPointer"
        iaIdentifierWithPath="$(tail -c +167 "$potentialPointer" | head -n 1)"
        echo "${iaIdentifierWithPath%%/*}"
    else
        warn "The file at $PWD/$potentialPointer has the unknown pointer type signature $(cat -v <<< "$typeSignature")."
    fi
    spopd || die "Could not popd!"
    rm -r "$myTempDir"
fi
if [[ "true" == "$showName" ]]; then
    print "   '--> is required by $potentialPointer"
fi
