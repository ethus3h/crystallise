#!/bin/bash

# Do not run this script manually; use decrystallize instead.

#Script should run as root.
[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"

#Script should exit if any operation fails.
set -e

echo "Time (decrystallize log stage 1) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Time (decrystallize log stage 1) from http://timeapi.org/: "

set +e
wget --delete-after --warc-file="./$CrystalLogID.time-start" -e robots=off "http://www.timeapi.org/utc/now?\Y-\m-\d-\H-\M-\S-\6N-\z";
set -e

echo "Time (decrystallize log stage 1b) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Arguments: " "$@"

crystallizePassphrase=$(crystallize-getconf 'Passphrase')
export crystallizePassphrase

export CrystalID="$1"

echo "Environment: "

uname -ap

echo "Environment variables: "

printenv

echo "Network environment: "

echo "IP address from DNS: "

dig +short myip.opendns.com @resolver1.opendns.com

echo "IP address from http://icanhazip.com/: "

set +e
wget --delete-after --warc-file="./$CrystalLogID.ip" -e robots=off http://icanhazip.com/;
set -e

echo "Time (decrystallize log stage 2) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Time (decrystallize log stage 2) from http://timeapi.org/: "

set +e
wget --delete-after --warc-file="./$CrystalLogID.time-env" -e robots=off "http://www.timeapi.org/utc/now?\Y-\m-\d-\H-\M-\S-\6N-\z";
set -e

echo "Time (decrystallize log stage 2b) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Crystal address: $CrystalID"

printf "%s" "$crystallizePassphrase" > "./$CrystalLogID.tmp"

mkdir -v "./$CrystalLogID.tmpd"

mkdir -v "./$CrystalLogID.tmpd/$CrystalID"

echo "Getting crystal size..."

crystalXzFileSize="$(curl -sIL "https://archive.org/download/$CrystalID/$CrystalID.coal5" | grep Content-Length | awk '{print $2}')"
crystalXzFileSize="${crystalXzFileSize::-2}"

echo "Receiving..."

wget -qO - "https://archive.org/download/$CrystalID/$CrystalID.coal5" | pv -tprbei 0.1 -s "$crystalXzFileSize" | gpg --yes --batch --passphrase-file "./$CrystalLogID.tmp" - | unxz --stdout - | tar -xvf - -C "./$CrystalLogID.tmpd/$CrystalID/"

mv -v "./$CrystalLogID" "./$CrystalLogID.log"

mv -v "./$CrystalLogID.tmpd/" "./$CrystalLogID"

echo "Getting indices..."

wget -O "./$CrystalLogID.local.idx.xz.gpg" "https://archive.org/download/$CrystalID/$CrystalID.coal5-idx-l"
wget -O "./$CrystalLogID.deep.idx.xz.gpg" "https://archive.org/download/$CrystalID/$CrystalID.coal5-idx-d"

gpg --yes --batch --passphrase-file "./$CrystalLogID.tmp" "./$CrystalLogID.local.idx.xz.gpg"
gpg --yes --batch --passphrase-file "./$CrystalLogID.tmp" "./$CrystalLogID.deep.idx.xz.gpg"

rm -v "./$CrystalLogID.local.idx.xz.gpg"
rm -v "./$CrystalLogID.deep.idx.xz.gpg"

unxz "./$CrystalLogID.local.idx.xz"
unxz "./$CrystalLogID.deep.idx.xz"

mv -v "./$CrystalLogID.local.idx" "./$CrystalLogID/$CrystalID.local.idx"
mv -v "./$CrystalLogID.deep.idx" "./$CrystalLogID/$CrystalID.deep.idx"

if [[ $decrystallizeEasyUse == true ]]; then
    set +e
    echo "Ok if next command fails"
    mv -v ~/Decrystallized/"$CrystalID" ~/Decrystallized/"$CrystalLogID.dec"
    set -e
    echo "Not ok if next commands fail"
    mv -v "$CrystalLogID/$CrystalID" ~/Decrystallized/
    echo "Moved files for easy use"
fi

echo "Time (decrystallize log stage 3) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

echo "Time (decrystallize log stage 3) from http://timeapi.org/: "

set +e
wget --delete-after --warc-file="./$CrystalLogID.time-end" -e robots=off "http://www.timeapi.org/utc/now?\Y-\m-\d-\H-\M-\S-\6N-\z";
set -e

echo "Time (decrystallize log stage 1b) locally:"

date +%Y-%m-%d-%H-%M-%S-%N
xxd -pu <<< "$(date +%z)"

#Clear the screen
printf "\033c"

echo "Finishing $CrystalLogID..."

echo "Please wait..."
