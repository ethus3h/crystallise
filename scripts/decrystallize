#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

shopt -s extglob

useCustomPassphrase="false"
crystallizePassphrase=""
if [[ "$1" == "--passphrase" ]]; then
    useCustomPassphrase="true"
    shift
    crystallizePassphrase="$1"
    shift
fi

decrystallizeHere="false"
if [[ "$2" == "--here" ]]; then
    decrystallizeHere="true"
fi

# Remove URL
CrystalAddress="${1#https://archive.org/@(details|download)/}"
# Remove trailing path(s) from identifier
CrystalAddress="${CrystalAddress%%/*}"
CrystalAddress="${CrystalAddress%\.coal5*}"

if [[ "$CrystalAddress" == "" ]]; then
    echo "Please specify a crystal address to unpack."
    exit 1
fi

CrystalID="$CrystalAddress"

echo "Crystal address: $CrystalID"

tempId="decrystallize-$(date-uuid)"

mkdir "$tempId"

crystalXzFileSize=1
if [[ -t 1 ]]; then
    crystalXzFileSize="$(curl -sIL "https://archive.org/download/$CrystalID/$CrystalID.coal5" | grep Content-Length | awk '{print $2}')"
    crystalXzFileSize="${crystalXzFileSize::-1}"
fi

if [[ "$useCustomPassphrase" != "true" ]]; then
    crystallizePassphrase="$(crystallize-getconf Passphrase)"
fi
printf "%s" "$crystallizePassphrase" > "$tempId.tmp"
crystalWorkdir="$(crystallize-getconf WorkDirectory)"
if ! [[ -e "$crystalWorkdir/.CrystalCache/" ]]; then
    fcache_init "$crystalWorkdir/.CrystalCache/" 5000000000
fi

fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5" | pv -tparbIfei 0.1 -s "$crystalXzFileSize" | gpg --yes --batch --passphrase-file "$tempId.tmp" - | unxz --stdout - | tar -xvf - -C "$tempId/"

shopt -qo pipefail

if (fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5-csum" | pv -tparbIfei 0.1 -s "$crystalXzFileSize" | gpg --yes --batch --passphrase-file "$tempId.tmp" - | unxz --stdout - > "$tempId.csum"); then
    mkdir "$tempId.tempDir"
    (
        cd "$tempId"
        find . -name "$CrystalID"'*' -exec bash -c 'dir="$(dirname "$0")"; mkdir -p "'"$tempId"'.tempDir/$dir/"; mv "$0" "../'"$tempId"'.tempDir/$dir/"' {} \; || die
    ) || die

    (
        shopt -s dotglob
        csum --check "$tempId"/* "$tempId.csum" || die
    ) || die

    (
        cd "$tempID.tempDir"
        find . -name "$CrystalID"'*' -exec bash -c 'dir="$(dirname "$0")"; mv "$0" "../'"$tempId"'/$dir/"' {} \; || die
    ) || die
    rm -r "${tempId:?}.tempDir"
fi
rm -f "${tempId:?}.csum"

destination="$tempId in "
if [[ "$decrystallizeHere" == "true" ]]; then
    fcache_request "$crystalWorkdir/.CrystalCache/" "https://archive.org/download/$CrystalID/$CrystalID.coal5-cwd" | gpg --yes --batch --passphrase-file "$tempId.tmp" - > "$tempId.cwd"
    crystalPath="$(< "$tempId.cwd")"

    destination=""
    echo "Moving primary files into place (relative to $crystalPath)..."
    (
        shopt -s dotglob
        mv -vn "$tempId/$crystalPath/"* .
        echo "Done moving primary files into place (relative to $crystalPath)."
        rm -r "${tempId:?}"
    )
fi

#printf "\\033c"
echo "Done! The crystal has been extracted to ""$destination""the current directory, $(pwd)."
