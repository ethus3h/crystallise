#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

check="false"
if [[ "$1" == "--no-check-existing" ]]; then
    check="false"
    shift
elif [[ "$1" == "--check-existing" ]]; then
    check="true"
    shift
fi

updateList="true"
if [[ "$1" == "--no-update-list" ]]; then
    updateList="false"
    shift
fi

gitCommit="true"
if [[ "$1" == "--no-commit" ]]; then
    gitCommit="false"
    shift
fi

backupLocation="$(crystallize-getconf BackupLocation)"

mkdir -p "$backupLocation/crystal-backup-meta/.cbb.logs/"
mkdir -p "$backupLocation/crystal-backup-meta/.cbb.logs.open/"

{

echo 'Preparing...'

cd "$backupLocation" || die "Could not cd to newly created directory! This should never happen."
touch ".cbb.isBackupDir"

rsync -av --checksum "$backupLocation/crystal-backup-meta/.cbb.logs.open/" "$backupLocation/crystal-backup-meta/.cbb.logs"
find "$backupLocation/crystal-backup-meta/.cbb.logs" -name '.cbb.*.log' -exec split -l 100000 --additional-suffix=.cbbLogSplit {} {}. \;
find "$backupLocation/crystal-backup-meta/.cbb.logs" -name '.cbb.*.log' -delete

(
    cd "$backupLocation"
    mkdir -p "./crystal-backup-meta-quick/"
    cd "./crystal-backup-meta-quick/"
    if [[ ! -e '.git' ]]; then
        git init
        touch .gitignore
        eogup-single
        rm .gitignore
    fi
    eogup-single
    find .. -path ./.git -prune -or -path ./.egup.stat -prune -or -path './items*' -prune -or -path ./repositories -prune -or -path ./stream-registries -prune -or -path './crystal-backup-meta/.cbb.*' -prune -or -path './crystal-backup-meta/cbb-index/items.*' -prune -or -exec rsync -av --checksum {} ./synced/ \;
    eogup-single
)

[[ -e '.git' ]] || git init
touch ./.egup.allowRootEgup
print $'/items\n' >> .gitignore
print $'/items.failed-check\n' >> .gitignore
print $'/repositories\n' >> .gitignore
print $'/stream-registries\n' >> .gitignore
print $'/crystal-backup-meta/.csum\n' >> .gitignore
print $'/crystal-backup-meta/.cbb.logs.open\n' >> .gitignore
removeDuplicateLines '.gitignore' | bigSponge '.gitignore'

[[ "$gitCommit" == "true" ]] && git add .gitignore
{ [[ "$gitCommit" == "true" ]] && git commit -m "Update" > /dev/null; } || true
[[ "$gitCommit" == "true" ]] && git add -A .
{ [[ "$gitCommit" == "true" ]] && git commit -m "Update" > /dev/null; } || true
{ [[ "$gitCommit" == "true" ]] && egup-single > /dev/null; } || true

if [[ "$gitCommit" == "true" ]]; then
    cp ~/.bash_history ./.personal_bash_history || warn "personal bash history copy failed"
    cp /.bash_history.public-mirror-dir/.bash_history.public-mirror ./.root_bash_history || warn "root bash history copy failed"
    cp /.bash_history.public-mirror-dir/.bash_history.emdate ./.root_bash_history_date || warn "root bash history date copy failed"
fi

cbbConfigDir="$(crystallize-getconf ConfigDir)"
mkdir -p "$cbbConfigDir"/crystallize/cbb
touch "$cbbConfigDir"/crystallize/cbb/items
touch "$cbbConfigDir"/crystallize/cbb/repositories
touch "$cbbConfigDir"/crystallize/cbb/stream-registries

mkdir -p 'crystal-backup-meta/cbb-index'
mkdir -p 'crystal-backup-meta/cbb-index/items.packs-done'
mkdir -p 'crystal-backup-meta/completed-items'
mkdir -p 'items'
mkdir -p 'repositories'
mkdir -p 'stream-registries'

# Build backup indices (this won't finish building the sreg/crystal indices because they need the git repos cloned to make them)
echo 'Syncing and merging configuration...'

rsync -a --checksum "$(crystallize-getconf ConfigLocation)" "crystal-backup-meta/cbb-index/ember.conf" &> /dev/null
crystallize-getconf 'Passphrase' > "crystal-backup-meta/cbb-index/passphrase.default"

repoPattern="$(<"$(ember-getconf DataDir)/repository-url-pattern.txt")"

authstring=""
cat "$(ember-getconf DataDir)/repositories".lst | while read -r "repo"; do
    repoPatternBegun="${repoPattern/\@AUTHSTRING\@/$authstring}"
    echo $'\n'"${repoPatternBegun/\@REPOSITORY\@/$repo}" >> "crystal-backup-meta/cbb-index/repositories"
done

authstring="$(ember-getconf GitAuthstring)"'@'
cat "$(ember-getconf DataDir)/repositories"-nonpublic.lst | while read -r "repo"; do
    repoPatternBegun="${repoPattern/\@AUTHSTRING\@/$authstring}"
    echo $'\n'"${repoPatternBegun/\@REPOSITORY\@/$repo}" >> "crystal-backup-meta/cbb-index/repositories"
done

print $'\n' >> "crystal-backup-meta/cbb-index/items"
cat "$cbbConfigDir"/crystallize/cbb/items >> "crystal-backup-meta/cbb-index/items"
removeDuplicateLines 'crystal-backup-meta/cbb-index/items' | bigSponge 'crystal-backup-meta/cbb-index/items'

print $'\n' >> "crystal-backup-meta/cbb-index/repositories"
cat "$cbbConfigDir"/crystallize/cbb/repositories >> "crystal-backup-meta/cbb-index/repositories"
removeDuplicateLines 'crystal-backup-meta/cbb-index/repositories' | bigSponge 'crystal-backup-meta/cbb-index/repositories'

print $'\n' >> "crystal-backup-meta/cbb-index/stream-registries"
cat "$cbbConfigDir"/crystallize/cbb/stream-registries >> "crystal-backup-meta/cbb-index/stream-registries"
print $'\n' >> "crystal-backup-meta/cbb-index/stream-registries"
cat "$(ember-getconf DataDir)/stream-registries.lst" >> "crystal-backup-meta/cbb-index/stream-registries"
removeDuplicateLines 'crystal-backup-meta/cbb-index/stream-registries' | bigSponge 'crystal-backup-meta/cbb-index/stream-registries'

if [[ "$updateList" == "true" ]]; then
    # Clone git repositories
    (
        mkdir -p repositories
        cd repositories
        git-bulk-sync < "../crystal-backup-meta/cbb-index/repositories"
        mkdir -p submodules
        cd submodules
        git-bulk-sync < "$(ember-getconf DataDir)/repositories-submodules.lst"
    ) || die
fi

# Get idents from Web site
(
    if ! [[ -d "repositories/ember-web-site" ]]; then
        cd repositories || die "Could not cd to repositories directory!"
        git clone --no-checkout "ember-web-site.git"
        cd "ember-web-site" || die "Could not cd to repository directory $(pwd)/ember-web-site!"
        git init
        git config core.sparseCheckout true
        echo "identifiers.lst" > .git/info/sparse-checkout
        echo "identifiers-lowpriority.lst" >> .git/info/sparse-checkout
        git checkout
    else
        cd "repositories/ember-web-site" || die "Could not cd to repository directory $(pwd)/repositories/ember-web-site!"
    fi
    git pull origin
)
print $'\n' >> "crystal-backup-meta/cbb-index/items"
cat "repositories/ember-web-site/identifiers.lst" >> "crystal-backup-meta/cbb-index/items"
cat "repositories/ember-web-site/identifiers-lowpriority.lst" >> "crystal-backup-meta/cbb-index/items"
removeDuplicateLines 'crystal-backup-meta/cbb-index/items' | bigSponge 'crystal-backup-meta/cbb-index/items'

shopt -s dotglob

if [[ "$updateList" == "true" ]]; then
    echo 'Building backup index...'
    cbbStreamRegistries="$(<crystal-backup-meta/cbb-index/stream-registries)"
    while read -r streamRegistryPath; do
        if [[ -n "$streamRegistryPath" ]]; then
            echo $'\n'"Getting identifiers for the stream registry in $streamRegistryPath..."
            streamRegistryFullPath="repositories/$streamRegistryPath"
            streamRegistryRepoName="${streamRegistryPath%%\/*}"
            streamRegistryPathInRepo="${streamRegistryPath#*\/}"
            (
                if ! [[ -d "repositories/$streamRegistryRepoName" ]]; then
                    cd repositories || die "Could not cd to repositories directory!"
                    git clone --no-checkout "$streamRegistryRepoName.git"
                    cd "$streamRegistryRepoName" || die "Could not cd to repository directory $(pwd)/$streamRegistryRepoName!"
                    git init
                    git config core.sparseCheckout true
                    echo "$streamRegistryPathInRepo*" > .git/info/sparse-checkout
                    git checkout
                else
                    cd "repositories/$streamRegistryRepoName" || die "Could not cd to repository directory $(pwd)/repositories/$streamRegistryRepoName!"
                fi
                git pull origin
            )
            # Go through this sreg and add all the crystals it uses to the index

            echo "Getting identifiers for localstore packs in $streamRegistryPath..."

            spushd "$streamRegistryFullPath/Packs/" || die "Could not pushd to Packs directory!"

            # Normal remote pack pointers

            mkdir -p "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/$streamRegistryRepoName"

            for identFile in *.identifier; do
                if ! [[ -e "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/$streamRegistryRepoName/${identFile%.identifier}" ]]; then
                    echo "$(<"$identFile")" >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                    touch "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/$streamRegistryRepoName/${identFile%.identifier}"
                fi
            done

            for pointerFile in *.bundle.pointer; do
                if ! [[ -e "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/$streamRegistryRepoName/${pointerFile%.bundle.pointer}" ]]; then
                    # This pack doesn't have a .identifier file, so it needs to be extracted separately
                    packTempDir="$(bigTempDir)"
                    packDir="$PWD"
                    spushd "$packTempDir" || die "Could not pushd to $packTempDir!"
                    unxz --stdout - < "$packDir/$pointerFile" | tar -xf -
                    # MAINTENANCE: Code copied and tweaked from sreg_read_stream
                    crystalFilePattern=".*.crystal-data"
                    shopt -u failglob
                    shopt -s nullglob
                    crystalFilePatternMatches=( $crystalFilePattern )
                    shopt -s failglob
                    shopt -u nullglob
                    localStoreCrystalName="${crystalFilePatternMatches[0]}"
                    if ! [[ -e "$localStoreCrystalName" ]]; then
                        warn "Crystal info could not be found in the pointer for $pointerFile, so giving up immediately and skipping this one (retrying probably wouldn't help this)."
                        touch "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/$streamRegistryRepoName/${pointerFile%.bundle.pointer}"
                        spopd || die "Could not popd!"
                        continue
                    fi
                    [[ -e "$localStoreCrystalName/identifier" ]] || die "Crystal info was found, but no crystal identifier was found in the pointer for $pointerFile."
                    echo "$(<"$localStoreCrystalName"/identifier)" >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                    touch "$backupLocation/crystal-backup-meta/cbb-index/items.packs-done/$streamRegistryRepoName/${pointerFile%.bundle.pointer}"
                    spopd || die "Could not popd!"
                    rm -r "$packTempDir"
                fi
            done

            spopd || die "Could not popd!"

            echo "Getting identifiers for pointers in $streamRegistryPath..."

            spushd "$streamRegistryFullPath" || die "Could not pushd to stream registry directory!"
            shopt -s globstar
            mkdir -p "$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$streamRegistryRepoName"
            for potentialPointer in {0..9}/** {a..f}/**; do
                if [[ -f "$potentialPointer" ]] && [[ "$potentialPointer" != *.verified ]]; then
                    if ! [[ -e "$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$streamRegistryRepoName/$potentialPointer" ]]; then
                        typeSignature="$(head -c 36 "$potentialPointer" | tr -d '\0')"
                        if [[ "$typeSignature" == "760fa662-89cf-4ebd-9664-150b7637ddd4" ]]; then # Hash pointer
                            warn "A hash pointer, $potentialPointer, is present in the pointer database!"
                        elif [[ "$typeSignature" == "a5e2f296-3085-49c0-8f48-24ea436b7a8b" ]]; then # Standard remote pointer
                            pointerTempDir="$(bigTempDir)"
                            pointerDir="$PWD"
                            spushd "$pointerTempDir" || die "Could not pushd to $pointerTempDir!"
                            tail -c +167 "$pointerDir/$potentialPointer" | unxz --stdout - | tar -xf -
                            crystallize-get-identifier-from-pointer ./*.crystal >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                            spopd || die "Could not popd!"
                            rm -r "$pointerTempDir"

                            hashFull="$(basename "$potentialPointer")"
                            hashA="${hashFull:0:1}"
                            hashB="${hashFull:1:1}"
                            hashC="${hashFull:2:1}"
                            hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$streamRegistryRepoName/$hashA/$hashB/$hashC"
                            [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                            touch "$hashSubpath/$hashFull"
                        elif [[ "$typeSignature" == "c39f8657-384b-438b-a5a2-eece17147589" ]]; then # LocalStore pointer
                            true # These we don't mark as done, since after the next sreg_flush_localstore is run, they will need to be re-read.
                        elif [[ "$typeSignature" == "2fae2004-94bb-4aa8-a01a-fc44298efc2c" ]]; then # Remote pack pointer
                            # We already got these when we did all the packs, so just skip them
                            hashFull="$(basename "$potentialPointer")"
                            hashA="${hashFull:0:1}"
                            hashB="${hashFull:1:1}"
                            hashC="${hashFull:2:1}"
                            hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$streamRegistryRepoName/$hashA/$hashB/$hashC"
                            [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                            touch "$hashSubpath/$hashFull"
                        elif [[ "$typeSignature" == "209fcfdf-d1ad-4345-8ef7-1fdc2d583d49" ]]; then # Remote pack pointer, with pointer data in the pointer
                            # Like the normal remote pack files, we need to get the identifier out of the pointer as a tar file.
                            pointerTempDir="$(bigTempDir)"
                            pointerDir="$PWD"
                            spushd "$pointerTempDir" || die "Could not pushd to $pointerTempDir!"
                            tail -c +167 "$pointerDir/$potentialPointer" | unxz --stdout - | tar -xf -
                            # MAINTENANCE: Code copied and tweaked from sreg_read_stream
                            crystalFilePattern=".*.crystal-data"
                            shopt -u failglob
                            shopt -s nullglob
                            crystalFilePatternMatches=( $crystalFilePattern )
                            shopt -s failglob
                            shopt -u nullglob
                            localStoreCrystalName="${crystalFilePatternMatches[0]}"
                            if ! [[ -e "$localStoreCrystalName" ]]; then
                                warn "Crystal info could not be found in the pointer for $pointerFile, so giving up immediately and skipping this one (retrying probably wouldn't help this)."
                                touch "$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$streamRegistryRepoName/${pointerFile%.bundle.pointer}"
                                spopd || die "Could not popd!"
                                continue
                            fi
                            echo "$(<"$localStoreCrystalName"/identifier)" >> "$backupLocation/crystal-backup-meta/cbb-index/items"
                            spopd || die "Could not popd!"
                            rm -r "$pointerTempDir"

                            hashFull="$(basename "$potentialPointer")"
                            hashA="${hashFull:0:1}"
                            hashB="${hashFull:1:1}"
                            hashC="${hashFull:2:1}"
                            hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$streamRegistryRepoName/$hashA/$hashB/$hashC"
                            [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                            touch "$hashSubpath/$hashFull"
                        elif [[ "$typeSignature" == "45baff46-8db7-46f6-aad9-de5f713b02fe" ]]; then # URL pointer
                            echo "URL pointer found: $potentialPointer"
                            iaIdentifierWithPath="$(tail -c +167 "$potentialPointer" | head -n 1)"
                            echo "${iaIdentifierWithPath%%/*}" >> "$backupLocation/crystal-backup-meta/cbb-index/items"

                            hashFull="$(basename "$potentialPointer")"
                            hashA="${hashFull:0:1}"
                            hashB="${hashFull:1:1}"
                            hashC="${hashFull:2:1}"
                            hashSubpath="$backupLocation/crystal-backup-meta/cbb-index/items.pointers-done/$streamRegistryRepoName/$hashA/$hashB/$hashC"
                            [[ ! -d $hashSubpath ]] && mkdir -p "$hashSubpath"
                            touch "$hashSubpath/$hashFull"
                        else
                            warn "The file at $PWD/$potentialPointer has the unknown pointer type signature $(cat -v <<< "$typeSignature")."
                        fi
                    fi
                fi
            done
            unset GLOBIGNORE
            shopt -u globstar
            spopd || die "Could not popd!"
            echo "Done getting identifiers for the stream registry in $streamRegistryPath..."
        fi
    done <<< "$cbbStreamRegistries"
else
    echo "(Not building backup index because --no-update-list was specified.)"
fi

removeDuplicateLines 'crystal-backup-meta/cbb-index/items' | bigSponge 'crystal-backup-meta/cbb-index/items'

[[ "$gitCommit" == "true" ]] && git add -A .
{ [[ "$gitCommit" == "true" ]] && git commit -m "Update" > /dev/null; } || true

echo "Done collecting crystal identifiers, beginning fetching crystals..."

# Actually download and/or check the selected crystals now
mkdir -p "items"
cd items || die "Could not cd to newly created items directory"
cbbCrystals="$(<../crystal-backup-meta/cbb-index/items)"
numberExpected="$(wc -l < ../crystal-backup-meta/cbb-index/items | xargs)"
numberProcessed="$(find "../crystal-backup-meta/completed-items/" -maxdepth 1 -printf a | wc -c | xargs)"
numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed"" / $numberExpected) * 100")")" # extra quotation marks to prevent turning "sed" into "gsed" on Mac ;)
echo "Starting with $numberProcessed"" ($numberProcessedPercentage%) of $numberExpected total crystals already backed up." # extra quotation marks to prevent turning "sed" into "gsed" on Mac ;)
set -x
while read -r crystal; do
    if [[ -n "$crystal" ]]; then
        if [[ -e "$crystal" ]]; then
            if [[ -e "../crystal-backup-meta/completed-items/$crystal" ]]; then
                if [[ "$check" != "true" ]]; then
                    continue
                fi
            fi
        fi
        crystallize-backup "$crystal" || die "Error backing up or checking the item known as $crystal!"
        numberProcessed="$(find "../crystal-backup-meta/completed-items/" -maxdepth 1 -printf a | wc -c | xargs)"
        numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed"" / $numberExpected) * 100")")" # extra quotation marks to prevent turning "sed" into "gsed" on Mac ;)
        echo "Backed up $numberProcessed"" ($numberProcessedPercentage%) of $numberExpected total crystals." # extra quotation marks to prevent turning "sed" into "gsed" on Mac ;)
    fi
done <<< "$cbbCrystals"
set +x

# [[ "$gitCommit" == "true" ]] && csum "$backupLocation" > ../crystal-backup-meta/.csum
pushd ../crystal-backup-meta/ || die "Could not pushd"
if [[ -f "./.csum" ]]; then
    find . -maxdepth 1 -type f -name '.csum.split*' -delete;
    split -l 10000 --numeric-suffixes .csum ".csum.split"
    find . -maxdepth 1 -type f -name '.csum.split*' -exec mv {} {}.split \;
fi
popd

[[ "$gitCommit" == "true" ]] && git add -A .
{ [[ "$gitCommit" == "true" ]] && git commit -m "Update" > /dev/null; } || true
{ [[ "$gitCommit" == "true" ]] && egup-single > /dev/null; } || true

echo "Done backing up crystals!"

} 2>&1 | tee -a "$backupLocation/crystal-backup-meta/.cbb.logs.open/.cbb.$(date-uuid).log"
