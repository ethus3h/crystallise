#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

lockOverride="--no-lock-override"
if [[ "$1" == "--no-lock-override" ]]; then
    shift
elif [[ "$1" == "--lock-override" ]]; then
    lockOverride="--lock-override"
    shift
fi

success() {
    exit 0
}
failCheckFile=""
if [[ "$1" == "--fail-check" ]]; then
    shift
    failCheckFile="$1"
    shift
fi
if [[ -n "$failCheckFile" ]]; then
    skipCount="0"
    if [[ "$1" == "--skip" ]]; then
        shift
        skipCount="$1"
        shift
    fi
    if [[ "$skipCount" -gt "0" ]]; then
        skipFile="$failCheckFile.skip"
        skippedSoFar="$(<"$skipFile")"
        skippedSoFar=$(( skippedSoFar + 1 ))
        if [[ "$skippedSoFar" -le "$skipCount" ]]; then
            if [[ "$skippedSoFar" -eq "$skipCount" ]]; then
                # Mirror the argument parsing code here so we can find the fsckStatusFile
                if [[ "$1" == "--sreg-dir" ]]; then
                    shift
                    shift
                fi
                if [[ "$1" == "--report-to" ]]; then
                    shift
                    shift
                fi
                fsckStatusFile="$2"
                numberProcessedFile="$fsckStatusFile.done"
                echo "$skipCount" > "$numberProcessedFile"
            fi
            echo "$skippedSoFar" > "$skipFile"
            echo "(skipped $skippedSoFar out of $skipCount...)"
            exit 0
        fi
    fi
    if [[ -e "$failCheckFile" ]]; then
        warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"!"
    else
        echo "$0 running at $(emdate) in $(readlink -f "$(pwd)") with the remaining arguments $*" > "$failCheckFile" || echo "$0 running at $(emdate) in an unknown directory with the remaining arguments $*" > "$failCheckFile"
        success() {
            if [[ -n "$failCheckFile" ]]; then
                rm -f "${failCheckFile:?}"
            fi
            exit 0
        }
    fi
else
    if [[ "$1" == "--skip" ]] && [[ "$2" != "0" ]]; then
        die "Non-zero skip counts require a --fail-check path to be given."
    fi
fi

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

buildReport=""
reportFile=""
if [[ "--report-to" == "$1" ]]; then
    buildReport="true"
    shift
    reportFile="$1"
    shift
fi

fail() {
    if [[ "$buildReport" == "true" ]]; then
        echo "$knownHash" >> "$reportFile"
        [[ -e "$reportFile.registry" ]] || echo "$sregDir" > "$reportFile.registry"
    fi
    if [[ "$dropFailed" == "true" ]]; then
        dbDir="$sregDir"/Failed\ Fsck/
        mkdir -p "$dbDir"
        mv "$1" "$dbDir/"
        die "Error verifying stream registry database entry $knownHash! Marking entry as corrupted."
    fi
    die "Error verifying stream registry database entry $knownHash!"
}

trap 'fail; warn "A failure while verifying an entry was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

fsckStatusFile="$2"

if [[ "--quick" == "$2" ]]; then
    quick="true"
    fsckStatusFile=""
fi

if [[ "--quick" == "$3" ]]; then
    quick="true"
fi

skipCache=""
dropFailed="false"
if [[ "--skip-cache" == "$3" || "--skip-cache" == "$4" ]]; then
    skipCache="--skip-cache"
fi
if [[ "--skip-drop-failed" == "$3" || "--skip-drop-failed" == "$4" ]]; then
    skipCache="--skip-cache"
    dropFailed="true"
fi
if [[ "--drop-failed" == "$3" || "--drop-failed" == "$4" ]]; then
    dropFailed="true"
fi

knownHash="(Failed to retrieve entry hash!)"
knownHashTemp="$(sregi_hash_from_file "$1")" || fail "$1"
if [[ -n "$knownHashTemp" ]]; then
    knownHash="$knownHashTemp"
fi

exitCode=""
if [[ "$quick" == "true" ]]; then
    echo "Started quick-checking stream registry database entry $knownHash."
    sregi_hashpointer_sane --sreg-dir "$sregDir" "$1"
    exitCode="$?"
else
    # Disable SC2094 because sreg_read_stream should not write to the file specified by --entry-path.
    # shellcheck disable=SC2094
    sreg_read_stream "$lockOverride" --sreg-dir "$sregDir" --entry-path "$1" --checksum "$knownHash" --disallow-hash-pointer "$skipCache" < "$1" > /dev/null
    exitCode="$?"
fi

if [[ "$exitCode" == "0" ]]; then
    if [[ -n "$fsckStatusFile" ]]; then
        numberExpected="$(<"$fsckStatusFile")"
        numberProcessedFile="$fsckStatusFile.done"
        xxd "$fsckStatusFile" >&2
        xxd "$numberProcessedFile" >&2
        if ! [[ -f "$numberProcessedFile" ]]; then
            numberProcessed="1"
        else
            numberProcessed="$(<"$numberProcessedFile")"
            numberProcessed=$(( numberProcessed + 1 ))
        fi
        echo "$numberProcessed" > "$numberProcessedFile"
        xxd "$numberProcessedFile" >&2
        if [[ "$numberExpected" == "0" ]]; then
            numberExpected="-1"
        fi
        numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
        echo "Verified stream registry database entry $knownHash: finished #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
    else
        true
    fi
    success
else
    fail "$1"
fi

success
