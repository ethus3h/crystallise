#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

failCheckFile="$1"
shift

skipCount="0"
if [[ "$1" == "--skip" ]]; then
    shift
    skipCount="$1"
    shift
fi
if [[ "$skipCount" -gt "0" ]]; then
    skipFile="$failCheckFile.skip"
    skippedSoFar="$(<"$skipFile")"
    skippedSoFar=$(( skippedSoFar + 1 ))
    if [[ "$skippedSoFar" -le "$skipCount" ]]; then
        if [[ "$skippedSoFar" -eq "$skipCount" ]]; then
            # Mirror the argument parsing code here so we can find the fsckStatusFile
            if [[ "$1" == "--sreg-dir" ]]; then
                shift
                shift
            fi
            if [[ "$1" == "--no-verify" ]]; then
                shift
            fi
            fsckStatusFile="$3"
            numberProcessedFile="$fsckStatusFile.done"
            echo "$skipCount" > "$numberProcessedFile"
        fi
        echo "$skippedSoFar" > "$skipFile"
        echo "(skipped $skippedSoFar out of $skipCount...)"
        exit 0
    fi
fi

success() {
    exit 0
}

if [[ -e "$failCheckFile" ]]; then
    warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"!"
else
    echo "$0 running at $(emdate) in $(readlink -f "$(pwd)") with the remaining arguments $*" > "$failCheckFile" || echo "$0 running at $(emdate) in an unknown directory with the remaining arguments $*" > "$failCheckFile"
    success() {
        rm -f "${failCheckFile:?}"
        exit 0
    }
fi

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

sregReplace=""
if [[ "$1" == "--replace" ]]; then
    sregReplace="true"
    shift
fi

if ! [[ -f "$1" ]]; then
    error-notify "Item must be a regular file."
    exit 1
fi
fsckStatusFile="$3"
if [[ -n "$fsckStatusFile" ]]; then
    numberExpected="$(<"$fsckStatusFile")"
    numberProcessedFile="$fsckStatusFile.done"
    if ! [[ -f "$numberProcessedFile" ]]; then
        numberProcessed="1"
    else
        numberProcessed="$(<"$numberProcessedFile")"
        numberProcessed=$(( numberProcessed + 1 ))
    fi
    echo "$numberProcessed" > "$numberProcessedFile"
    if [[ "$numberExpected" == "0" ]]; then
        # wtf?
        numberExpected="-1"
    fi
    numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
    echo "Copying item $1: #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
else
    echo "Copying item $1."
fi
# FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
# shellcheck disable=SC2034
destinationRootLength="$4"
# FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
# shellcheck disable=SC2034
sourceNameReplaced="${1/%.git.686fc528-0e8e-4724-91bb-c103cdcdd592/.git}"
sourceNameReplaced="${sourceNameReplaced//\/.git.686fc528-0e8e-4724-91bb-c103cdcdd592\//\/.git\/}"
sourceNameReplaced="${sourceNameReplaced/%.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd/.gitignore}"
sourceNameReplaced="${sourceNameReplaced//\/.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd\//\/.gitignore\/}"
sourceNameReplaced="${sourceNameReplaced/%.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e/.gitmodules}"
sourceNameReplaced="${sourceNameReplaced//\/.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e\//\/.gitmodules\/}"
targetLength=${#sourceNameReplaced}
#echo "$destinationRootLength - $targetLength"
destinationName="$2/${sourceNameReplaced:destinationRootLength:targetLength}"
#echo "$destinationName"
sourceChecksum="$(sregi_hash_from_file "$1")"

# There are three possibilities. 1: The file already exists and matches checksum. 2: The file already exists and doesn't match checksum. 3: The file does not exist. In the first case, skip the file; in the second case, copy the file if --replace is specified, and in the third case, copy the file.

# FIXME: I don't think there's actually any working support for files that are anything other than regular files or directories (in sregi_copy_write, either).

# Copy metadata already, in case it is already copied file
# shellcheck disable=SC2015
[[ -e "$destinationName" ]] && touch -r "$1" "$destinationName" && chown -r "$1" "$destinationName" && chmod -r "$1" "$destinationName" || true
# ...but make sure it's still readable
chmod a+r "$destinationName"

destinationChecksum=""
if [[ -f "$destinationName" ]]; then
    destinationChecksum="$(sha512sum < "$destinationName" | awk '{print $1;}')"
    if [[ "$sourceChecksum" != "$destinationChecksum" ]] && [[ "$sregReplace" != "true" ]]; then
        # Should only occur if srpull was called with --no-replace option.
        echo "(Skipping already-existing, non-matching file $destinationName)"
        success
    fi
fi

if [[ "$sourceChecksum" == "$destinationChecksum" ]]; then
    echo "(Skipping already-existing, matching file $destinationName)"
    success
fi

destinationDirname="$(dirname "$destinationName")"
sourceDirname="$(dirname "$1")"
mkdir -p "$destinationDirname"

# Copy directory metadata
# shellcheck disable=SC2015
[[ -e "$destinationDirname" ]] && touch -r "$sourceDirname" "$destinationDirname" && chown -r "$sourceDirname" "$destinationDirname" && chmod -r "$sourceDirname" "$destinationDirname" || true
# ...but make sure it's still readable
chmod a+rx "$destinationDirname"

sreg_read_stream --sreg-dir "$sregDir" --checksum "$sourceChecksum" < "$1" > "$destinationName" || die "Failed to read pointer at $1!"

# Copy metadata
# shellcheck disable=SC2015
[[ -e "$destinationName" ]] && touch -r "$1" "$destinationName" && chown -r "$1" "$destinationName" && chmod -r "$1" "$destinationName" || true
# ...but make sure it's still readable
chmod a+r "$destinationName"

success
