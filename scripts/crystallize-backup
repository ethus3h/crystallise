#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

shopt -s extglob

useCustomPassphrase="false"
customPassphrase=""
if [[ "$1" == "--passphrase" ]]; then
    useCustomPassphrase="true"
    shift
    customPassphrase="$1"
    shift
fi

check="true"
if [[ "$1" == "--no-check-existing" ]]; then
    check="false"
    shift
fi

here="false"
if [[ "$1" == "--here" ]]; then
    here="true"
    shift
fi

if [[ "$here" != "true" ]]; then
    backupLocation="$(crystallize-getconf BackupLocation)"

    mkdir -p "$backupLocation"

    cd "$backupLocation" || die "Could not cd to newly created directory! This should never happen."

    mkdir ".cbk.3165cbaa-0540-4735-9aba-d34848246367"
    touch ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbb.isBackupDir"
fi

if [[ "$useCustomPassphrase" != "true" ]]; then
    customPassphrase="$(crystallize-getconf Passphrase)"
fi
mkdir -p ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbk.passphrases"
print "$customPassphrase" > ".cbk.3165cbaa-0540-4735-9aba-d34848246367/.cbk.passphrases/$(print "$customPassphrase" | sha512sum | awk '{print $1;}')"

#Remove URL
CrystalAddress="${1#https://archive.org/@(details|download)/}"
#Remove trailing path(s) from identifier
CrystalAddress="${CrystalAddress%%/*}"
CrystalAddress="${CrystalAddress%\.coal5*}"

if [[ "$CrystalAddress" == "" ]]; then
    echo "Please specify a crystal address to back up."
    exit 1
fi

CrystalID="$CrystalAddress"

echo "Crystal address: $CrystalID"

if [[ -e "$CrystalID" ]]; then
    if [[ "$check" == "true" ]]; then
        succeeded=""
        shopt -s dotglob
        shopt -s globstar
        #NOTE: MAINTENANCE: Copy of code from "ia checkeddl" in ember_bash_setup
        for file in "$CrystalID"/**; do
            if [[ -f "$file" ]]; then
                if [[ "$(sha1sum "$file")" == "$(iasha1 "$file")" ]] && ( [[ "$succeeded" == "true" ]] || [[ -z "$succeeded" ]] ); then
                        succeeded="true"
                else
                    succeeded="false"
                    continue
                fi
            fi
        done
        [[ "$succeeded" == "true" ]] || die "Item failed integrity check!"
    fi
    exit 0
fi
ia checkeddl "$CrystalID"
echo "Done! The crystal has been backed up to $CrystalID."
