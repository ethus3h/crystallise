#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

packPointerName="$1"
dbDir="${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Stream\ Registry
hashFull="$(basename "$2")"
crystalWorkdir="$3"
# can't use \d in POSIX regex
hashPatternMatch='^[0-9a-f]{128}$'
# $hashPatternMatch not quoted because that makes it "match literally rather than as a regex" (â€”SC2076)
if ! [[ "$hashFull" =~ $hashPatternMatch ]]; then
    # Ignore stray files in the LocalStore directory (e.g. .keep files)
    exit 0
fi
hashA="${hashFull:0:1}"
hashB="${hashFull:1:1}"
hashC="${hashFull:2:1}"
hashDir="$dbDir/$hashA/$hashB/$hashC"
dbTempFileDir="$dbDir/.BundlePointerTemp"
dbFilePath="$hashDir/$hashFull"
mkdir -p "$dbTempFileDir"
if [[ -f "$dbFilePath" ]]; then
    if [[ "$(head -c 36 "$dbFilePath")" != "c39f8657-384b-438b-a5a2-eece17147589" ]]; then
        die "The item $dbFilePath does not appear to be a LocalStore pointer! This is most likely a bug in sreg. Aborting to avoid messing things up."
    else
        mv "$dbFilePath" "$dbTempFileDir/$hashFull"
    fi
else
    die "The item $dbFilePath does not appear to exist, even though sregi_bundle_pointer has been requested for it! This situation should be investigated."
fi
# 2fa... is the remote bundle pointer type signature
printf "2fae2004-94bb-4aa8-a01a-fc44298efc2c\\n%s\\n%s" "$hashFull" "$(basename "$packPointerName")" > "$dbFilePath"

# Switch over to variable values for cache editing
cacheDbDir="$crystalWorkdir/.StreamCache/"
dbLinkPath="$cacheDbDir/$hashA/$hashB/$hashC/$hashFull"
cacheDbFilePath="$(readlink -e "$dbLinkPath")"

# Remove cache entry to allow re-testing
# First, make sure the link is good and fix it up if it's not.
if ! [[ -f "$cacheDbFilePath" ]]; then
    find "$cacheDbDir/ByCount" -mindepth 5 -maxdepth 5 -type f -name "$hashFull" -exec ln -sf {} "$dbLinkPath" \;
    cacheDbFilePath="$(readlink -e "$dbLinkPath")"
fi

requestCount="1"
if [[ -f "$cacheDbFilePath" ]]; then
    dbFileDir="$(dirname "$cacheDbFilePath")"
    rm "${cacheDbFilePath:?}"
    # Get the requestCount. There are three path components after it. I suspect there's a better way to do this.
    oldCount="$(basename "$(dirname "$(dirname "$(dirname "$dbFileDir")")")")"
    if [[ -n "$oldCount" ]]; then
        requestCount="$oldCount"
    fi
fi
rm "$dbLinkPath"
echo "$requestCount" > "$dbLinkPath"

# Clean up empty directories. Kind of expensive, so commented out here. This will be taken care of by scache_gc when it's run, anyway.
# find "$cacheDbDir" -type d -not -name "ByCount" -empty -delete

# Done editing the cache: now, test the new pointer
failCleanup() {
    local failedBundleDir="${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Stream\ Registry/Failed\ Bundling
    mkdir -p "$failedBundleDir"
    local noteAppend=" It couldn't be found, so isn't available for inspection!"
    if [[ -e "$dbFilePath" ]]; then
        mv "$dbFilePath" "$failedBundleDir/$hashFull"
        noteAppend=" It's been moved to $failedBundleDir/$hashFull so you can inspect it."
    fi
    # Put the LocalStore pointer back
    # FIXME: Also fetch the LocalStore entry from the LocalStore folder in crystalWorkdir and put it back into the main LocalStore cache
    mv "$dbTempFileDir/$hashFull" "$dbFilePath"
    die "Failed to read pointer after bundling it!$noteAppend"
}
sregi_verify_entry "$dbFilePath" || failCleanup
