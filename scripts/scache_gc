#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

dbDir="$1"

if [[ -e "$dbDir/.locked" ]]; then
    warn "This database is already in use. If the scache_gc or sreg_read_stream instance using it has crashed, remove $dbDir/.locked manually."
    exit 0
fi
touch "$dbDir/.locked"

finish() {
    rm -f "${dbDir:?}/.locked"
}
trap finish EXIT

cacheType="s"
if [[ -n "$2" ]]; then
    cacheType="$2"
fi
# Clean up empty directories
find "$dbDir" -type d -not -name "ByCount" -empty -delete
# Remove the least-used items from the cache until it fits within the alloted disk space
diskUsageLimit="$(<"$dbDir/.$cacheType""cache.limit")"
diskUsageLimitSub=$(( diskUsageLimit - 1000000000 ))
if [[ "$diskUsageLimitSub" -lt 0 ]]; then
    diskUsageLimitSub=0
fi
if [[ "$(du -sb "$dbDir" | awk '{print $1;}')" -gt "$diskUsageLimit" ]]; then
    find "$dbDir" -type d -not -name "ByCount" -empty -delete
    while [[ "$(du -sb "$dbDir" | awk '{print $1;}')" -gt "$diskUsageLimitSub" ]]; do
        rm -f "$dbDir"/Failed\ Checksum/*
        # Remove the least-used item from the cache
        largestLeastUsedItem=""
        findType="f"
        if [[ "$cacheType" == "localstore" ]]; then
            findType="d"
        else
            largestLeastUsedItem="$(find "$dbDir/ByCount" -size +100000k -type f -printf "%s\\t%p\\n" | sort -V | tail -1 | awk '{print $2;}')" || true
            if [[ -n "$largestLeastUsedItem" ]]; then
                [[ -e "${largestLeastUsedItem:?}" ]] || die "scache_gc has selected an item that doesn't exist for removal. This indicates a bug in scache_gc."
            fi
        fi
        if [[ -z "$largestLeastUsedItem" ]]; then
            leastUsedItemDirectory="$(find "$dbDir/ByCount" -maxdepth 1 -type d | sort -V | head -n 2 | tail -n 1)"
            largestLeastUsedItem="$(find "$leastUsedItemDirectory" -mindepth 4 -maxdepth 4 -type "$findType" -printf "%s\\t%p\\n" | sort -V | tail -1 | awk '{print $2;}')"
            [[ -e "${largestLeastUsedItem:?}" ]] || die "scache_gc has selected an item that doesn't exist for removal. This indicates a bug in scache_gc."
        fi
        # Don't change this to a simple else clause, because in the body of the if, largestLeastUsedItem is set.
        if [[ -n "$largestLeastUsedItem" ]]; then
            leastUsedItemCount="$(basename "$leastUsedItemDirectory")"
            hashFull="$(basename "$largestLeastUsedItem")"
            hashA="${hashFull:0:1}"
            hashB="${hashFull:1:1}"
            hashC="${hashFull:2:1}"
            hashSubdir="$hashA/$hashB/$hashC"
            hashDir="$dbDir/$hashSubdir"
            if [[ -e "$dbLinkPath.locked" ]]; then
                # File is in use
                warn "This stream cache entry is already in use. If the process using it has crashed, remove $dbLinkPath.locked manually."
                warn "Waiting 30 minutes for process using it to finish... If the process using it has crashed, remove $dbLinkPath.locked manually."

                waitForLockTries=0
                until [[ "$waitForLockTries" -ge 360 ]]; do
                    if [[ -e "$dbLinkPath.locked" ]]; then
                        warn "Still waiting, $((waitForLockTries - 360)) tries remaining... If the process using this stream cache entry has crashed, remove $dbLinkPath.locked manually."
                    else
                        break
                    fi
                    waitForLockTries=$((waitForLockTries+1))
                    sleep 5
                done

                if [[ -e "$dbLinkPath.locked" ]]; then
                    finish; die "This stream cache entry has been in use for 30 minutes so giving up. If the process using it has crashed, remove $dbLinkPath.locked manually."
                fi
            fi
            mkdir -p "$hashDir"
            dbLinkPath="$hashDir/$hashFull"
            [[ -e "${largestLeastUsedItem:?}" ]] || die "scache_gc has selected an item that doesn't exist for removal. This indicates a bug in scache_gc."
            rm -rf "${largestLeastUsedItem:?}"
            rm -f "$dbLinkPath"
            echo "$leastUsedItemCount" > "$dbLinkPath"
        fi
        find "$dbDir" -type d -not -name "ByCount" -empty -delete
    done
fi

rm "$dbDir/.locked"
