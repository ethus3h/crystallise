#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

failCheckFile="$1"
shift

skipCount="0"
if [[ "$1" == "--skip" ]]; then
    shift
    skipCount="$1"
    shift
fi
if [[ "$skipCount" -gt "0" ]]; then
    skipFile="$failCheckFile.skip"
    skippedSoFar="$(<"$skipFile")"
    skippedSoFar=$(( skippedSoFar + 1 ))
    if [[ "$skippedSoFar" -le "$skipCount" ]]; then
        if [[ "$skippedSoFar" -eq "$skipCount" ]]; then
            # Mirror the argument parsing code here so we can find the fsckStatusFile
            if [[ "$1" == "--sreg-dir" ]]; then
                shift
                shift
            fi
            if [[ "$1" == "--no-verify" ]]; then
                shift
            fi
            fsckStatusFile="$3"
            numberProcessedFile="$fsckStatusFile.done"
            echo "$skipCount" > "$numberProcessedFile"
        fi
        echo "$skippedSoFar" > "$skipFile"
        echo "(skipped $skippedSoFar out of $skipCount...)"
        exit 0
    fi
fi

success() {
    exit 0
}

if [[ -e "$failCheckFile" ]]; then
    warn "A previous invocation of $0 failed with the message \"$(<"$failCheckFile")\"!"
else
    echo "$0 running at $(emdate) in $(readlink -f "$(pwd)") with the remaining arguments $*" > "$failCheckFile" || echo "$0 running at $(emdate) in an unknown directory with the remaining arguments $*" > "$failCheckFile"
    success() {
        rm -f "${failCheckFile:?}"
        exit 0
    }
fi

finish() {
    trap - ERR
    (
        crystalWorkdir="$(crystallize-getconf WorkDirectory)"
        cd "/${crystalWorkdir:?}/" || die
        if [[ -n "$streamId" ]]; then
            if [[ -e "/$crystalWorkdir/${streamId:?}" ]]; then
                rm -r "/$crystalWorkdir/${streamId:?}"
            fi
        fi
    )
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate) while finishing sregi_copy_write."' ERR
}
trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; finish; exit 1' ERR
trap finish EXIT

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir")"

sregNoVerify=""
if [[ "$1" == "--no-verify" ]]; then
    #echo "(Not verifying pointers.)"
    sregNoVerify="true"
    shift
fi
#echo "$@"
sourcePath="$1"
fsckStatusFile="$3"
if [[ -n "$fsckStatusFile" ]]; then
    numberExpected="$(<"$fsckStatusFile")"
    numberProcessedFile="$fsckStatusFile.done"
    if ! [[ -f "$numberProcessedFile" ]]; then
        numberProcessed="1"
    else
        numberProcessed="$(<"$numberProcessedFile")"
        numberProcessed=$(( numberProcessed + 1 ))
    fi
    echo "$numberProcessed" > "$numberProcessedFile"
    if [[ "$numberExpected" == "0" ]]; then
        # wtf?
        numberExpected="-1"
    fi
    numberProcessedPercentage="$(printf "%.3f\\n" "$(bc -l <<< "($numberProcessed / $numberExpected) * 100")")"
    echo "Copying item $sourcePath: #$numberProcessed of $numberExpected ($numberProcessedPercentage%)"
else
    echo "Copying item $sourcePath."
fi
# FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
# shellcheck disable=SC2034
destinationRootLength="$4"
# FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
# shellcheck disable=SC2034
sourceNameReplaced="${1/%.git/.git.686fc528-0e8e-4724-91bb-c103cdcdd592}"
sourceNameReplaced="${sourceNameReplaced//\/.git\//\/.git.686fc528-0e8e-4724-91bb-c103cdcdd592\/}"
sourceNameReplaced="${sourceNameReplaced/%.gitignore/.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd}"
sourceNameReplaced="${sourceNameReplaced//\/.gitignore\//\/.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd\/}"
sourceNameReplaced="${sourceNameReplaced/%.gitmodules/.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e}"
sourceNameReplaced="${sourceNameReplaced//\/.gitmodules\//\/.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e\/}"
targetLength=${#sourceNameReplaced}
#echo "$destinationRootLength - $targetLength"
destinationName="$2/${sourceNameReplaced:destinationRootLength:targetLength}"
#echo "$destinationName"

# Copy metadata already, in case it is already copied file
# shellcheck disable=SC2015
[[ -e "$destinationName" ]] && touch -r "$sourcePath" "$destinationName" && chown --reference "$sourcePath" "$destinationName" && chmod --reference "$sourcePath" "$destinationName" || true
# ...but make sure it's still readable
if [[ -e "$destinationName" ]]; then
    chmod a+r "$destinationName" || true
fi

if [[ -f "$sourcePath" ]] && [[ ! -h "$sourcePath" ]]; then
    sourceChecksum="$(sha512sum < "$sourcePath" | awk '{print $1;}')"
    if [[ -f "$destinationName" ]]; then
        pointerTypeSignature="$(head -c 36 "$destinationName" | tr -d '\0')"
        destinationChecksum=""
        hasEncounteredError="0"
        if [[ "$pointerTypeSignature" == "760fa662-89cf-4ebd-9664-150b7637ddd4" ]]; then
            trap 'warn "A nonfatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; hasEncounteredError="1"' ERR
            assumePointerDbEntryFileExists="true"
            if [[ "$sregNoVerify" == "true" ]]; then
                destinationChecksum="$(tail -c +38 "$destinationName" | head -c 129)"
                pointerDbEntryFile="$sregDir/${destinationChecksum:0:1}/${destinationChecksum:1:1}/${destinationChecksum:2:1}/$destinationChecksum"
                if ! [[ -e "$pointerDbEntryFile" ]]; then
                    assumePointerDbEntryFileExists="pointerDbEntryFile $pointerDbEntryFile missing!"
                else
                    innerPointerTypeSignature="$(head -c 36 "$pointerDbEntryFile")"
                    if [[ "$innerPointerTypeSignature" == "c39f8657-384b-438b-a5a2-eece17147589" ]]; then
                        localStoreToTest="$sregDir/LocalStore/${destinationChecksum:0:1}/${destinationChecksum:1:1}/${destinationChecksum:2:1}/$destinationChecksum"
                        if ! [[ -e "$localStoreToTest" ]]; then
                            assumePointerDbEntryFileExists="LocalStore $localStoreToTest missing!"
                        fi
                    fi
                fi
            else
                destinationChecksum="$(tail -c +38 "$destinationName" | head -c 129 | tr -d '\0')"
                sreg_read_stream --sreg-dir "$sregDir" < "$destinationName" > /dev/null || hasEncounteredError="1"
            fi
            if [[ "$destinationChecksum" == "$sourceChecksum" && "$hasEncounteredError" == "0" && "$assumePointerDbEntryFileExists" == "true" ]]; then
                # The file is already present, pointerized, and readable, so exit without doing anything.
                echo "(Nothing done for $sourcePath.)"
                success
            else
                warn "(Note: Destination pointer $destinationName did not match source checksum or could not be read (source checksum: $sourceChecksum / destinationChecksum: $destinationChecksum /  stream read status: $hasEncounteredError / quick check status: $assumePointerDbEntryFileExists / destination pointer contents: $(<"$destinationName")): the source file has probably been changed. Removing and recreating.)"
                # cat "$destinationName"
                rm "${destinationName:?}"
            fi
        else
            if [[ "$pointerTypeSignature" != "760fa662-89cf-4ebd-9664-150b7637ddd4" ]] && # Hash pointer
                [[ "$pointerTypeSignature" != "a5e2f296-3085-49c0-8f48-24ea436b7a8b" ]] && # Standard remote pointer
                [[ "$pointerTypeSignature" != "c39f8657-384b-438b-a5a2-eece17147589" ]] && # LocalStore pointer
                [[ "$pointerTypeSignature" != "209fcfdf-d1ad-4345-8ef7-1fdc2d583d49" ]] && # Remote pack pointer
                [[ "$pointerTypeSignature" != "2fae2004-94bb-4aa8-a01a-fc44298efc2c" ]] && # Also remote pack pointer
                [[ "$pointerTypeSignature" != "209fcfdf-d1ad-4345-8ef7-1fdc2d583d49" ]] && # Pack pointer data is in the pointer
                [[ "$pointerTypeSignature" != "45baff46-8db7-46f6-aad9-de5f713b02fe" ]] # URL pointer
            then
                if [[ "$sourceChecksum" == "$(sha512sum < "$destinationName" | awk '{print $1;}')" ]]; then
                    echo "(Skipping matching normal file $destinationName)"
                    success
                fi
            fi
        fi
    fi
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
    crystalWorkdir="$(crystallize-getconf WorkDirectory)"
    streamId=".sreg-$(date-uuid)"
    crystalSubdir="$crystalWorkdir/$streamId"
    mkdir -p "$crystalSubdir"
    rsync -a --checksum --no-i-r "$sourcePath" "$crystalSubdir/"
    setVariableToCommandOutput "basename" "embasename" "$sourcePath"
    fileToStash="$crystalSubdir/${basename:?}"
    if [[ -f "$fileToStash" ]]; then
        sreg_store_stream --sreg-dir "$sregDir" --assume-checksum "$sourceChecksum" --verbose < "$fileToStash" | bigSponge "$fileToStash"
    else
        die "Was requested to stash the regular file $fileToStash, but suddenly it's not a regular file. Huh? This is probably a bug in sregi_copy_write."
    fi
    mkdir -p "$(dirname "$destinationName")"
    rsync -a --checksum --no-i-r "$fileToStash" "$destinationName"

    # Checksum the source once again, and compare it to the stored pointer, just to make sure.
    pointerChecksum="$(tail -c +38 "$destinationName" | head -c 129)"
    if [[ "$pointerChecksum" != "$(sha512sum < "$sourcePath" | awk '{print $1;}')" ]] || [[ "$pointerChecksum" != "$sourceChecksum" ]]; then
        die
    fi

    # Copy metadata
    # shellcheck disable=SC2015
    [[ -e "$destinationName" ]] && touch -r "$sourcePath" "$destinationName" && chown --reference "$sourcePath" "$destinationName" && chmod --reference "$sourcePath" "$destinationName" || true
    # ...but make sure it's still readable
    # a+r gives (a)ll users (r)ead permission
    chmod a+r "$destinationName"

    rm -r "${crystalSubdir:?}"
    if [[ -e "${streamId:?}" ]]; then
        rm -r "${streamId:?}"
    fi
elif [[ -d "$sourcePath" ]] && [[ ! -h "$sourcePath" ]]; then
    mkdir -p "$destinationName"

    # Copy metadata
    # shellcheck disable=SC2015
    [[ -e "$destinationName" ]] && touch -r "$sourcePath" "$destinationName" && chown --reference "$sourcePath" "$destinationName" && chmod --reference "$sourcePath" "$destinationName" || true
    # ...but make sure it's still readable
    chmod a+rx "$destinationName"

    echo "Copied directory $sourcePath."
else
    rsync -a --no-r --checksum --no-i-r "$sourcePath" "$destinationName"

    # Copy metadata
    # shellcheck disable=SC2015
    [[ -e "$destinationName" ]] && touch -r "$sourcePath" "$destinationName" && chown --reference "$sourcePath" "$destinationName" && chmod --reference "$sourcePath" "$destinationName" || true
    # ...but make sure it's still readable
    if [[ -h "$destinationName" ]]; then
        chmodSupportsH=""
        pushd "$(tempDir)" || die "Could not pushd"
        touch a
        ln -s a b
        if chmod -h a+r "b"; then
            chmodSupportsH="true"
        fi
        popd || die "Could not popd"
        if [[ "true" == "$chmodSupportsH" ]]; then
            # Only necessary for platforms (e.g. Mac OS) where symlink permissions matter; see https://unix.stackexchange.com/questions/87200/change-permissions-for-a-symbolic-link
            chmod -h a+r "$destinationName" || true
        fi
    else
        # chmod on a symlink changes the link target permissions, instead of those of the link itself.
        chmod a+r "$destinationName"
    fi

    echo "Copied non-regular file $sourcePath."
fi

finish

success
