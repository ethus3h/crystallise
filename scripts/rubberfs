#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

action="$1"
name="$2"

[[ -e "/tmp/rubberfsUser" ]] && die "RubberFS is already running! Only one RubberFS command can be running at a time."

whoami > "/tmp/rubberfsUser"
((EUID)) && exec sudo -- "$0" "$@"
rubberfsUser="$(cat /tmp/rubberfsUser)"

finish() {
    [[ -e "/tmp/rubberfsUser" ]] && rm "/tmp/rubberfsUser"
}
trap finish EXIT

set -e

if [[ ! -n "$name" ]]; then
    name="library"
fi

/sbin/modprobe zfs

case $action in
create)
    if [[ -e "/$name" ]]; then
        echo "ERROR: The requested name \"$name\" is already in use." >&2
        exit 1
    fi
    if [[ -e "/Wreathe/.Resources/RubberFS/$name" ]]; then
        echo "ERROR: The requested name \"$name\" is already in use by a RubberFS." >&2
        exit 1
    fi
    mkdir -p "/Wreathe/.Resources/RubberFS/$name/dev/"
    #4T doesn't work: "truncate: failed to truncate '/Wreathe/.Resources/RubberFS/library/dev/StorageBlockDevice1' at 4398046511104 bytes: File too large" â€” wtf?! I don't have 3tb available either.
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1"
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2"
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    zpool create "$name" -O compression=gzip-9 -O relatime=on -O checksum=sha256 mirror "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    (
        cd "/$name"
        touch README.md
        chmod --reference="/$name" README.md
        chown --reference="/$name" README.md
    )
    #sudo -u "$rubberfsUser" git init
    chown "$rubberfsUser:$rubberfsUser" "/$name"
    #chown -R "$rubberfsUser:$rubberfsUser" "/$name/.git"
    mkdir "/$name/.rubberfs"
    mkdir "/$name/.rubberfs/history"
    mkdir "/$name/.rubberfs/stashed"
    echo "$name" > "/$name/.rubberfs/name"
    chown -R "$rubberfsUser:$rubberfsUser" "/$name/.rubberfs"
    rubberfs save "$name"
    rubberfs check "$name"
    rubberfs unmount "$name"
    # Handy way to copy files (add --max-size=3m to not send big files; remove --dry-run to actually do things):
    # rsync -av --checksum --progress --no-i-r --dry-run source-dir /parent-of-target-dir/
    echo "RubberFS named $name has been created. Run rubberfs mount $name to mount it."
    ;;
mount)
    #TODO: Also mount a FUSE filesystem that replaces .crystals with symlinks to a FUSE filesystem hooked up to IA's S3 API, somehow.
    zpool import -d "/Wreathe/.Resources/RubberFS/$name/dev/" "$name"
    set +e
    zpool scrub "$name"
    set -e
    ln -s -T -f "/$name" "/Wreathe/.Resources/RubberFS/$name/mount"
    #rubberfs cd "$name"
    printf "\033c"
    echo "RubberFS named $name has been mounted."
    ;;
soft-mount)
    #TODO: Also mount a FUSE filesystem that replaces .crystals with symlinks to a FUSE filesystem hooked up to IA's S3 API, somehow.
    set +e
    zpool import -d "/Wreathe/.Resources/RubberFS/$name/dev/" "$name"
    set -e
    zpool scrub "$name"
    ln -s -T -f "/$name" "/Wreathe/.Resources/RubberFS/$name/mount"
    #rubberfs cd "$name"
    printf "\033c"
    echo "RubberFS named $name has been mounted."
    ;;
remount)
    rubberfs unmount "$name"
    rubberfs mount "$name"
    ;;
soft-remount)
    rubberfs soft-unmount "$name"
    rubberfs soft-mount "$name"
    ;;
rename)
    newname="$3"
    if [[ -e "/$newname" ]]; then
        echo "ERROR: The requested name \"$newname\" is already in use." >&2
        exit 1
    fi
    rubberfs unmount "$name"
    set +e
    mv "/$name" "/$newname"
    mv "/Wreathe/.Resources/RubberFS/$name" "/Wreathe/.Resources/RubberFS/$newname"
    zpool import -d "/Wreathe/.Resources/RubberFS/$newname/dev/" "$name" "$newname"
    rubberfs unmount "$newname"
    rubberfs mount "$newname"
    printf "\033c"
    echo "RubberFS named $name has been renamed to $newname."
    ;;
cd)
    echo "D'oh! Your bash_setup doesn't seem to have been run or worked."
    exit 1
    ;;
unmount)
    if [[ ! -d "/$name/.rubberfs" ]]; then
        echo "ERROR! RubberFS named $name does not appear to be mounted." >&2
    else
        rubberfs save "$name"
    fi
    zpool export "$name"
    printf "\033c"
    echo "RubberFS named $name has been unmounted."
    ;;
soft-unmount)
    if [[ ! -d "/$name/.rubberfs" ]]; then
        echo "ERROR! RubberFS named $name does not appear to be mounted." >&2
    else
        rubberfs save "$name"
    fi
    set +e
    zpool export "$name"
    set -e
    printf "\033c"
    echo "RubberFS named $name has been unmounted."
    ;;
attach)
    username="$1"
    server="$2"
    prefix="$3"
    mountpoint="$4"
    sshfs -o allow_other,defer_permissions "$username@$server:/Wreathe/.Resources/RubberFS/$prefix/mount/" "$mountpoint"
    ;;
check)
    zpool scrub "$name"
    printf "\033c"
    echo "A check for RubberFS named $name has been begun; use rubberfs status $name to see its progress."
    ;;
save)
    cd "/$name"
    if [[ ! -d .rubberfs ]]; then
        echo "ERROR! RubberFS named $name does not appear to be mounted." >&2
        exit 1
    fi
    touch README.md
    chmod --reference="/$name" README.md
    chown --reference="/$name" README.md
    #sudo -u "$rubberfsUser" git add -A .
    #set +e
    #sudo -u "$rubberfsUser" git commit -a -m "RubberFS: make snapshot"
    #sudo -u "$rubberfsUser" git pull
    #sudo -u "$rubberfsUser" git submodule update --remote
    #sudo -u "$rubberfsUser" git push -u origin master
    #set -e
    rubberfsSnapshot="rubberfs-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    zfs snapshot "$name@$rubberfsSnapshot"
    printf "\033c"
    echo "A saved snapshot $rubberfsSnapshot in RubberFS named $name has been created."
    ;;
freeze)
    echo "### WARNING! ### WARNING! ### WARNING! ### WARNING! ### WARNING! ###"
    echo "Note freeze may be big; delta does incremental. Also note that"
    echo "FREEZE DOES NOT UPLOAD ALL REVISIONS. It *will* have the current revision,"
    echo "but not all past revisions (since they aren't held locally)."
    echo "Freeze and then use historybak to get an ID that can be put into"
    echo "historypull (once it's implemented) to get all revisions."
    echo "Continuing in 1 minute; press Ctrl+C to cancel."
    echo "### WARNING! ^^^ WARNING! ### WARNING! ### WARNING! ^^^ WARNING! ###"
    #TODO: make sure this works. What it should do: Back up the complete current filesystem to IA (as a .crystal but don't keep local copy), put the .crystal in the .rubberfs/history/ folder, and remove old snapshots.
    cd /
    freezeId="rubberfs-freeze-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    crystalWorkdir="$(crystallize-getconf WorkDirectory)"
    freezeUuid="$(python -c 'import uuid; print str(uuid.uuid4())')"
    zfs snapshot -r "$name@$freezeId"
    echo "Begun working on saving snapshot."
    #TODO: Can this be parallelized, to avoid the huge tempfile?
    zfs send -R "$name@$freezeId" | pv -tparbIfei 0.1 | xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout - > "$crystalWorkdir/$name@$freezeId.$freezeUuid.zfsrepl.xz"
    echo "Verifying replication stream..."
    unxz -c "$crystalWorkdir/$name@$freezeId.$freezeUuid.zfsrepl.xz" | zstreamdump || exit 1
    echo "Done verifying replication stream."
    (
        cd "$crystalWorkdir"
        crystallize --leave-pointer "$name@$freezeId.$freezeUuid.zfsrepl"
    )
    rsync -av --progress --checksum "$crystalWorkdir/pointers/$name@$freezeId.$freezeUuid.zfsrepl.xz.crystal" "$crystalWorkdir/pointers/.$name@$freezeId.$freezeUuid.zfsrepl.xz.crystal-data" "$name/.rubberfs/history/"
    freezeCrystal="$(cat "$crystalWorkdir/pointers/.$name@$freezeId.$freezeUuid.zfsrepl.xz.crystal-data/identifier")"
    echo "$name@$freezeId" > "$name/.rubberfs/lastFreeze"
    echo "$name@$freezeId" > "$name/.rubberfs/lastFullFreeze"
    echo "$freezeUuid" > "$name/.rubberfs/lastFreezeUuid"
    echo "$freezeUuid" > "$name/.rubberfs/lastFullFreezeUuid"
    echo "$freezeCrystal" > "$name/.rubberfs/lastFreezeCrystal"
    echo "$freezeCrystal" > "$name/.rubberfs/lastFullFreezeCrystal"
    rubberfs save "$name"
    echo "### WARNING! ### WARNING! ### WARNING! ### WARNING! ### WARNING! ###"
    echo "The following snapshots will be DELETED. Continuing in 1 minute;"
    echo "press Ctrl+C to cancel."
    echo "### WARNING! ^^^ WARNING! ### WARNING! ### WARNING! ^^^ WARNING! ###"
    zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3
    sleep 60
    zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3 | xargs -n 1 zfs destroy -vr
    rubberfs soft-remount "$name"
    printf "\033c"
    echo "A frozen snapshot $freezeCrystal of RubberFS named $name has been created, and the obsolete local snapshots removed."
    #echo "To restore, first make a new zpool, then run zfs recv (new-zpool-name) -F < /foo/bar.zfsrepl"
    ;;
delta)
    cd /
    keepSnapshots="false"
    if [[ "$3" == "--keep" ]]; then
        keepSnapshots="true"
    else
        if [[ ! -f "$name/.rubberfs/lastFreeze" ]]; then
            echo "ERROR! There does not appear to be an existing freeze state. Please use rubberfs freeze instead." >&2
        fi
    fi
    freezeId="rubberfs-delta-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    crystalWorkdir="$(crystallize-getconf WorkDirectory)"
    freezeUuid="$(python -c 'import uuid; print str(uuid.uuid4())')"
    zfs snapshot -r "$name@$freezeId"
    oldSnap="$(cat "$name/.rubberfs/lastFreeze")"
    echo "Begun working on saving incremental snapshot."
    zfs send -I "$oldSnap" "$name@$freezeId" | pv -tparbIfei 0.1 | xz -k -C sha256 -T 0 --lzma2=preset=1 --stdout - > "$crystalWorkdir/$name@$freezeId.$freezeUuid.incremental.zfsrepl.xz"
    echo "Verifying replication stream..."
    unxz -c "$crystalWorkdir/$name@$freezeId.$freezeUuid.incremental.zfsrepl.xz" | zstreamdump || exit 1
    echo "Done verifying replication stream."
    (
        cd "$crystalWorkdir"
        crystallize --leave-pointer "$name@$freezeId.$freezeUuid.incremental.zfsrepl.xz"
    )
    rsync -av --progress --checksum "$crystalWorkdir/pointers/$name@$freezeId.$freezeUuid.incremental.zfsrepl.xz.crystal" "$crystalWorkdir/pointers/.$name@$freezeId.$freezeUuid.incremental.zfsrepl.xz.crystal-data" "$name/.rubberfs/history/"
    freezeCrystal="$(cat "$crystalWorkdir/pointers/.$name@$freezeId.$freezeUuid.incremental.zfsrepl.xz.crystal-data/identifier")"
    echo "$name@$freezeId" > "$name/.rubberfs/lastFreeze"
    echo "$freezeUuid" > "$name/.rubberfs/lastFreezeUuid"
    echo "$freezeCrystal" > "$name/.rubberfs/lastFreezeCrystal"
    rubberfs save "$name"
    if [[ "$keepSnapshots" == "true" ]]; then
        echo "(not removing snapshots)"
    else
        printf "\033c"
        echo "### WARNING! ### WARNING! ### WARNING! ### WARNING! ### WARNING! ###"
        echo "The following snapshots will be DELETED. Continuing in 1 minute;"
        echo "press Ctrl+C to cancel."
        echo "### WARNING! ^^^ WARNING! ### WARNING! ### WARNING! ^^^ WARNING! ###"
        zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3
        sleep 60
        zfs list -t snapshot -o name -S creation | grep "$name"@rubberfs- | sed -n '/'"$name@$freezeId"'/,$p' | tail -n +3 | xargs -n 1 zfs destroy -vr
    fi
    rubberfs soft-remount "$name"
    printf "\033c"
    echo "A frozen incremental snapshot $freezeCrystal of RubberFS named $name has been created, and the obsolete local snapshots removed."
    ;;
gc)
    echo "Unimplemented!"
    exit 1
    set -e
    rubberfs delta "$name"
    rubberfs unmount "$name"
    rubberfs create "$name.new"
    rubberfs freeze "$name.new"
    
    rubberfs delete "$name"
    rubberfs rename "$name.new" "$name"
    rubberfs delta "$name"
    ;;
thaw)
    #opposite of freeze
    freezeId="$3"
    if [[ -z "$freezeId" ]]; then
        echo "Please specify a freeze ID to thaw."
        exit 1
    fi
    #Use: rubberfs thaw poolname freezeId
    #echo "To restore, first make a new zpool, then run zfs recv (new-zpool-name) -F < /foo/bar.zfsrepl"
    if [[ -e "/$name" ]]; then
        echo "ERROR: The requested name \"$name\" is already in use." >&2
        exit 1
    fi
    if [[ -e "/Wreathe/.Resources/RubberFS/$name" ]]; then
        echo "ERROR: The requested name \"$name\" is already in use by a RubberFS." >&2
        exit 1
    fi
    mkdir -p "/Wreathe/.Resources/RubberFS/$name/dev/"
    #4T doesn't work: "truncate: failed to truncate '/Wreathe/.Resources/RubberFS/library/dev/StorageBlockDevice1' at 4398046511104 bytes: File too large" â€” wtf?! I don't have 3tb available either.
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1"
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2"
    truncate -s 3T "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    zpool create "$name" -O compression=gzip-9 -O relatime=on -O checksum=sha256 mirror "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    crystalWorkdir="$(crystallize-getconf WorkDirectory)"
    rubberfsThawId="rubberfs-thaw-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)").$(python -c 'import uuid; print str(uuid.uuid4())').tmp"
    mkdir "$rubberfsThawId"
    cd "$rubberfsThawId"
    decrystallize "$freezeId" --here
    zfs recv "$name" -F < *.zfsrepl || unxz ./*.zfsrepl.xz | zfs recv "$name" -F
    zpool scrub "$name"
    if [[ ! -z "$4" ]]; then
        echo "Passing off remaining work to rubberfs patch..."
        rubberfs patch "${@:4}"
    fi
    printf "\033c"
    echo "The requested filesystem $name has been retrieved."
    ;;
patch)
    #opposite of delta
    #usage: rubberfs patch poolname deltaId
    crystalWorkdir="$(crystallize-getconf WorkDirectory)"
    cd "$crystalWorkdir"
    shift
    freezeId="$2"
    if [[ -z "$freezeId" ]]; then
        echo "Please specify an incremental freeze ID to patch."
        exit 1
    fi
    while [[ ! -z $2 ]]; do
        freezeId="$2"
        echo "Begun working on patch $freezeId"
        rubberfsPatchId="rubberfs-patch-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)").$(python -c 'import uuid; print str(uuid.uuid4())').tmp"
        mkdir "$rubberfsPatchId"
        cd "$rubberfsPatchId"
        decrystallize "$freezeId" --here
        #FIXME: Detect if the freeze is a full freeze instead of incremental, and apply patch accordingly (avoid clobbering the previously applied patches)
        #FIXME: Apply earlier patches if we don't have them, like git commits
        zfs recv "$name" -F < *.zfsrepl
        echo "Done working on patch $freezeId"
        shift
    done
    zpool scrub "$name"
    printf "\033c"
    echo "The requested filesystem update(s) has/have been applied to $name."
    ;;
status)
    zpool list "$name"
    zpool status "$name"
    df -i /"$name"
    #zfs list -ro space -t snapshot
    zfs list -ro space "$name"
    ;;
list)
    ls -1 /Wreathe/.Resources/RubberFS/
    zfs list -t snapshot | grep "$name"
    rubberfs status "$name"
    ;;
usage)
    ncdu -x -r
    ;;
usage-write)
    rubberfs save "$name"
    thisRubber="$(rubberfs whereami)"
    rubberfs save "$thisRubber"
    ncdu
    ;;
whereami)
    rubberDir="$(find_up.sh "$(readlink -f -- "$(pwd)")" -type d -name ".rubberfs" -execdir pwd \; -quit)"
    if [[ ! -d "$rubberDir" ]]; then
        echo "You do not appear to be in a rubberfs directory."
        exit 1
    fi
    cat "$rubberDir/.rubberfs/name"
    ;;
destroy)
    echo "### WARNING! ### WARNING! ### WARNING! ### WARNING! ### WARNING! ###"
    echo "The RubberFS \"$name\" will be DELETED. Continuing in 1 minute;"
    echo "press Ctrl+C to cancel."
    echo "### WARNING! ^^^ WARNING! ### WARNING! ### WARNING! ^^^ WARNING! ###"
    sleep 60
    if [[ -z "$name" ]]; then
        echo "ERROR: No name found. This should never happen! Not continuing, because it would cause a disaster."
    fi
    cd /
    if [[ ! -f "$name/.rubberfs/lastFreeze" ]]; then
        rubberfs freeze "$name"
    fi
    rubberfs delta "$name"
    rubberfs save "$name"
    find "/$name" -maxdepth 1 ! -name '.rubberfs' ! -wholename "/$name" -exec rm -rfv {} +
    rubberfs save "$name"
    rubberfs freeze "$name"
    rubberfsDestroyId="rubberfs-destroy-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)").$(python -c 'import uuid; print str(uuid.uuid4())').tmp"
    mkdir "/$rubberfsDestroyId"
    rsync -av --checksum --progress --no-i-r "/$name" "/$rubberfsDestroyId"
    zpool export "$name"
    rm -v "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    crystallize "/$rubberfsDestroyId" "/Wreathe/.Resources/RubberFS/$name"
    printf "\033c"
    echo "Done removing RubberFS named $name."
    ;;
destroy-no-upload)
    #Still does some upload for the crystallize at the end, but that shouldn't be a problem...
    echo "### WARNING! ### WARNING! ### WARNING! ### WARNING! ### WARNING! ###"
    echo "The RubberFS \"$name\" will be DELETED. Continuing in 1 minute;"
    echo "press Ctrl+C to cancel."
    echo "### WARNING! ^^^ WARNING! ### WARNING! ### WARNING! ^^^ WARNING! ###"
    sleep 60
    if [[ -z "$name" ]]; then
        echo "ERROR: No name found. This should never happen! Not continuing, because it would cause a disaster."
    fi
    cd /
    rubberfs save "$name"
    find "/$name" -maxdepth 1 ! -name '.rubberfs' ! -wholename "/$name" -exec rm -rfv {} +
    rubberfs save "$name"
    freezeId="rubberfs-freeze-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)")"
    crystalWorkdir="$(crystallize-getconf WorkDirectory)"
    freezeUuid="$(python -c 'import uuid; print str(uuid.uuid4())')"
    zfs snapshot -r "$name@$freezeId"
    echo "Begun working on saving snapshot."
    watch -n 0.1 "du -h $crystalWorkdir/*.zfsrepl" &
    rubberfsWatchPid="$!"
    zfs send -R "$name@$freezeId" > "$crystalWorkdir/$name@$freezeId.$freezeUuid.zfsrepl"
    kill "$rubberfsWatchPid"
    rubberfsDestroyId="rubberfs-destroy-$(date +%Y-%m-%d-%H-%M-%S-%N)-$(xxd -pu <<< "$(date +%z)").$(python -c 'import uuid; print str(uuid.uuid4())').tmp"
    mkdir "/$rubberfsDestroyId"
    rsync -av --checksum --progress --no-i-r "/$name" "/$rubberfsDestroyId"
    zpool export "$name"
    rm -v "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice1" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice2" "/Wreathe/.Resources/RubberFS/$name/dev/StorageBlockDevice3"
    crystallize "/$rubberfsDestroyId" "/Wreathe/.Resources/RubberFS/$name"
    printf "\033c"
    echo "Done removing RubberFS named $name."
    ;;
stash)
    while [[ ! -z $2 ]]; do
        echo "Items remaining to stash: "
        echo "$@"
        fileToStash="$2"
        echo "Begun stashing $fileToStash."
        sreg_store_stream --sreg-dir "/$name" --verbose < "$fileToStash" > /dev/null
        gapath="$(git rev-parse --show-toplevel)"/.gitattributes
        echo "$(git-escape-path "$(git-absolute-path "$fileToStash")") filter=sreg" >> "$gapath"
        # FIXME: This shellcheck directive is only needed for outdated shellcheck versions. Once CodeClimate's shellcheck gets updated (which probably means when Debian stable updates shellcheck), it can be removed.
        # shellcheck disable=SC2094
        sort < "$gapath" | uniq | sponge "$gapath"
        echo "Done stashing $fileToStash."
        shift
    done
    printf "\033c"
    echo "Done stashing all items."
    ;;
historybak)
    #provides a history id
    rsync -av --checksum --progress "$name/.rubberfs" "$name/.rubberfs/.rubberfs"
    crystallize "$name/.rubberfs/.rubberfs"
    ;;
historypull)
    #rubberfs historypull poolname historyId
    #Goes through the freezes and deltas listed in the historybak and rebuilds them into a new pool
    echo "ERROR: Not implemented yet!" #FIXME
    exit 1
    ;;
stub)
    if [[ ! -e "${EmberLibrary:?}" ]]; then
        mkdir -p "${EmberLibrary:?}"/Futuramerlin\ Projects/Data/Crystal\ Index/
    else
        echo "There appears to already be an Ember Library instance available; no action taken."
        exit 1
    fi
    ;;
*)
    echo "Unknown action."
    exit 1
    ;;
esac
