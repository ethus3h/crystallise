#!/bin/bash
# Version:
export crystallizeVersion='3.0.1.4.20'

[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"

#Script should exit if any operation fails.
set -e

if [ ! -e /Ember\ Library/Futuramerlin\ Projects/Data/Crystal\ Index/ ]; then
    echo "ERROR: Could not find a usable Ember Library directory tree. Nothing done."
    exit 1
fi

if ! [ -d . ]; then
    echo "Please run crystallize from a directory that exists."
    exit 1
fi

if [ "$1" == "" ] || [ "$1" == "." ] || [ "$1" == ".." ] || [ "$1" == "./" ] || [[ "$1" =~ ^../ ]]; then
    echo "Please specify file(s) within the current directory to crystallize when using relative path names."
    exit 1
fi

#Remove first argument if it's the end-of-options delimiter
if [ "$1" == "--" ]; then
    shift
fi

crystalWorkdir=$(crystallize-getconf 'WorkDirectory')
export crystalWorkdir
mkdir -p "$crystalWorkdir"

#Check for and handle option to leave behind a pointer
if [ "$1" == "--leave-pointer" ]; then
    echo "Pointer is enabled."
    crystallizeLeavePointer=true
    shift
    if [ "$#" -gt 1 ]; then
        echo "Please use pointer option with only 1 item at a time."
        exit 1
    fi
    mkdir -p "$crystalWorkdir/pointers"
    #Only use first 136 characters of file name for directory name; hopefully this will prevent the name being too long for the filesystem
    crystallizeBaseName="$(basename "$1")"
    crystallizePointerDir="$crystalWorkdir/pointers"/."${crystallizeBaseName:0:136}".crystal-data
    crystallizePointerName="$crystalWorkdir/pointers"/"${crystallizeBaseName:0:136}".crystal
    if [ -e "$crystallizePointerDir" ]; then
        crystallize "$crystallizePointerDir"
    fi
    if [ -e "$crystallizePointerName" ]; then
        crystallize "$crystallizePointerName"
    fi
    echo "Pointer directory: $crystallizePointerDir"
    echo "Pointer name: $crystallizePointerName"
fi

if [ -t 1 ]; then
    warn-timeout "Be careful that you don't crystallize your current working directory, the crystallize temp dir, or the crystallize scripts themselves. Either could cause problems."
fi

CrystalID="$(date +%Y-%m-%d-%H-%M-%S-%N)_$(xxd -pu <<< "$(date +%z)")-$(python -c 'import uuid; print str(uuid.uuid4())')"
CrystalID="C3-${CrystalID//-/}"
export CrystalID

crystallize-logsession "$CrystalID" "$@" 2>&1 | tee -a "$crystalWorkdir/$CrystalID"

echo "Working..."
echo "$0 $*" > "$crystalWorkdir/$CrystalID.cmd"
echo "Crystal cwd is: $(pwd)"
pwd > "$crystalWorkdir/$CrystalID.cwd"
#Script should not exit if an operation fails. FIXME: why?
if [[ $crystallizeLeavePointer == true ]]; then
    mkdir -p "$crystallizePointerDir"
    rsync -av --progress --checksum "$crystalWorkdir/$CrystalID.local.idx" "$crystalWorkdir/$CrystalID.deep.idx" "$crystalWorkdir/$CrystalID.cmd" "$crystalWorkdir/$CrystalID.cwd" "$crystallizePointerDir"/
    echo "Added crystal metadata"
fi
set +e
xz -C sha256 -v -9 -e "$crystalWorkdir/$CrystalID"
xz -C sha256 -v -9 -e -k "$crystalWorkdir/$CrystalID.time-done.warc.gz"
xz -C sha256 -v -9 -e "$crystalWorkdir/$CrystalID.local.idx"
xz -C sha256 -v -9 -e "$crystalWorkdir/$CrystalID.deep.idx"
rsync -av --progress --checksum "$crystalWorkdir/$CrystalID".xz /Ember\ Library/Futuramerlin\ Projects/Data/Crystal\ Index/"$CrystalID".log.xz
gpg --yes -c -v --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.xz"
gpg --yes -c -v --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.time-done.warc.gz.xz"
gpg --yes -c -v --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.local.idx.xz"
gpg --yes -c -v --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.deep.idx.xz"
gpg --yes -c -v --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.cmd"
gpg --yes -c -v --cipher-algo AES256 --batch --passphrase-file "$crystalWorkdir/$CrystalID".tmp "$crystalWorkdir/$CrystalID.cwd"
rm -v "$crystalWorkdir/$CrystalID.tmp"
mv -v "$crystalWorkdir/$CrystalID.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-log"
mv -v "$crystalWorkdir/$CrystalID.time-done.warc.gz.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-timestamp"
mv -v "$crystalWorkdir/$CrystalID.local.idx.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-idx-l"
mv -v "$crystalWorkdir/$CrystalID.deep.idx.xz.gpg" "$crystalWorkdir/$CrystalID.coal5-idx-d"
mv -v "$crystalWorkdir/$CrystalID.cmd.gpg" "$crystalWorkdir/$CrystalID.coal5-cmd"
mv -v "$crystalWorkdir/$CrystalID.cwd.gpg" "$crystalWorkdir/$CrystalID.coal5-cwd"

set -e
ia upload "$CrystalID" --retries=100 --verify --delete "$crystalWorkdir/$CrystalID.coal5-log" "$crystalWorkdir/$CrystalID.coal5-idx-l" "$crystalWorkdir/$CrystalID.coal5-idx-d" "$crystalWorkdir/$CrystalID.coal5-cmd" "$crystalWorkdir/$CrystalID.coal5-cwd"
ia upload "$CrystalID" --retries=100 --verify "$crystalWorkdir/$CrystalID.coal5-timestamp"

#Needed because readlink isn't available in OS X. From http://stackoverflow.com/questions/17577093/how-do-i-get-the-absolute-directory-of-a-file-in-bash
function myreadlink() {
  (
  cd "$(dirname "$1")"         # or  cd ${1%/*}
  echo "$PWD"/"$(basename "$1")" # or  echo $PWD/${1##*/}
  )
}

export -f myreadlink

#Build this again for the rm command
CrystallizePaths=( "$@" )
for i in "${!CrystallizePaths[@]}"; do
    #resolve path
    echo "Trying to resolve ${CrystallizePaths[$i]}..."
    abspath="$(myreadlink "${CrystallizePaths[$i]}")"
    CrystallizePaths[$i]="$abspath"
done

#Delete everything except log
echo "Cleaning up..."
yes | rm -rv "${CrystallizePaths[@]}"
echo "Done cleaning up..."

if [[ $crystallizeLeavePointer == true ]]; then
    echo "$CrystalID" > "$crystallizePointerDir"/identifier
    echo "$CrystalID" > "$crystallizePointerName"
    echo "Added crystal ID"
    if [ -e "$(basename "$crystallizePointerDir")" ]; then
        crystallize "$(basename "$crystallizePointerDir")"
    fi
    if [ -e "$(basename "$crystallizePointerName")" ]; then
        crystallize "$(basename "$crystallizePointerName")"
    fi
    rsync -av --progress --checksum "$crystalWorkdir"/pointers/"$(basename "$crystallizePointerName")" "$crystalWorkdir"/pointers/"$(basename "$crystallizePointerDir")" .
    echo "Pointer directory: $crystallizePointerDir"
    echo "Pointer name: $crystallizePointerName"
fi

if rm -v "$crystalWorkdir/$CrystalID.coal5-timestamp"; then
    #Clear the screen
    printf "\033c"

    echo "Done! The new crystal's address is:"
    echo "$CrystalID"
else
    #Clear the screen
    printf "\033c"

    echo "Crystallisation failed! This is bad!"
    exit 1
fi
