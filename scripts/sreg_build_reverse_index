#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# This program builds an index of where files with a given hash can be found. It takes one parameter: the directory to add to the index. This index can then be used to speed up stream reads by instead of fetching the specific stream, reading the copy that is listed in the index â€” but without taking the disk space that the usual scache does.
# Alternatively, the first parameter can be "--find" and a second parameter that is a hash given, which will be returned with the path to a file with the contents with the given hash.

enrollDirectory="$1"
shift
if [[ -n "$2" ]]; then
    hashToFind="$2"
    shift
else
    hashToFind=""
fi

dbDir="$(crystallize-getconf WorkDirectory)/.StreamIndex/"

if [[ "$enrollDirectory" == "--find" ]] && [[ -n "$hashToFind" ]]; then
    # Looking up a hash that was provided
    link="$dbDir/${hash:0:1}/${hash:1:1}/${hash:2:1}/$hash"
    if [[ ! -f "$link" ]]; then
        die "Could not find the requested hash."
    else
        path="$(<"$link")"
        hash="$(sha512sum < "$path" | awk '{print $1;}')" || die
        if [[ "$hash" != "$hashToFind" ]]; then
            die "Found the requested hash, but the index entry pointed to a file that no longer matches: $path"
        fi
        print "$path"
        exit 0
    fi
fi

# Enrolling path

mkdir -p "$dbDir"

enrollFile() {
    local dbDir
    dbDir="$2"
    local file
    file="$1"
    local hash
    hash="$(sha512sum < "$file" | awk '{print $1;}')"
    local link
    link="$dbDir/${hash:0:1}/${hash:1:1}/${hash:2:1}/$hash"
    if [[ ! -f "$link" ]]; then
        if [[ -e "$link" ]]; then
            rm "$link" || die "Could not remove index record $link"
        fi
        mkdir -p "$link"
        print "$file" > "$link"
    fi
}

find "$enrollDirectory" -type f -print0 | while IFS= read -r -d '' file; do
    enrollFile "$file" "$dbDir" || warn "Something went wrong while indexing $file."
done || warn "Something went wrong while indexing files."
