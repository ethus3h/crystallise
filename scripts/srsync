#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi
sregDir="$(sregi_find_dir --sreg-dir "$sregDir" --full-check "${!#}")"

keepGoing=""
if [[ "$1" == "--keep-going" ]]; then
    keepGoing="true"
    shift
fi

skipCount="0"
if [[ "$1" == "--skip" ]]; then
    shift
    skipCount="$1"
    shift
fi

finish() {
    save_traps="$(trap)"
    trap - ERR
    rm -f "${failCheckFile:?}"
    eval "$save_traps"

    trap - ERR
    if [[ -e "$statusFile" ]]; then
        rm "$statusFile"
    fi
    if [[ -e "$crystalWorkdir/$instanceId" ]]; then
        rm -r "${crystalWorkdir:?}/${instanceId:?}"
    fi
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate) while finishing srsync."' ERR
}
trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; finish; exit 1' ERR
trap finish EXIT

sregNoVerify="true"
if [[ "$1" == "--no-verify" ]]; then
    sregNoVerify="true"
    shift
fi
if [[ "$1" == "--verify" ]]; then
    sregNoVerify="false"
    shift
fi
if [[ "$sregNoVerify" == "true" ]]; then
    warn "(Not verifying pointers: use sreg_fsck to test the entire stream registry.)"
fi

if [[ "$#" == "1" ]]; then
    # There's only one path specified, so use the current directory as the destination
    destinationParameter="."
    pathsToCopy=("${@}") # all arguments
else
    # Multiple paths are specified, so use the last one as the destination
    destinationParameter="${!#}" # last argument
    pathsToCopy=("${@:1:$(($#-1))}") # all but last argument
fi

if ! [[ -d "$destinationParameter" ]]; then
    die "Destination is not a directory."
fi
crystalWorkdir="$(crystallize-getconf WorkDirectory)"
instanceId=".srsync-$(date-uuid)"
mkdir -p "$crystalWorkdir/$instanceId"
statusFile="/tmp/$instanceId.srsync.status"
failCheckFile="/tmp/$instanceId.srsync.running"
skipFile="$failCheckFile.skip"
echo "0" > "$skipFile"

echo "Counting items..."
if [[ "$keepGoing" == "true" ]]; then
    find "${pathsToCopy[@]}" -type f -printf '.' | wc -c > "$statusFile" || warn "Find reported an error trying to count the files on which to operate."
else
    find "${pathsToCopy[@]}" -type f -printf '.' | wc -c > "$statusFile"
fi

# FIXME: Why replace this in the destination parameter?! Won't this make it copy into the wrong folder?
# Well, either this or sregi_copy_write does get the wrong destination length or something, apparently. (e.g. srsync /Ember\ Library/.git/modules/Ember\ satellite\ projects/modules/BeHeMMOth-related-submodules /Ember\ Library/staging/BeHeMMOth-removed-submodules/modules/ copying into /Ember\ Library/staging/BeHeMMOth-removed-submodules/modules/ules/Ember\ satellite\ projects/modules/ instead â€” I still need to debug that one... Well, at least it under-trims it instead of over-trimming.)
destinationReplaced="${destinationParameter/%.git/.git.686fc528-0e8e-4724-91bb-c103cdcdd592}"
destinationReplaced="${destinationReplaced//\/.git\//\/.git.686fc528-0e8e-4724-91bb-c103cdcdd592\/}"
destinationReplaced="${destinationReplaced/%.gitignore/.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd}"
destinationReplaced="${destinationReplaced//\/.gitignore\//\/.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd\/}"
destinationReplaced="${destinationReplaced/%.gitmodules/.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e}"
destinationReplaced="${destinationReplaced//\/.gitmodules\//\/.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e\/}"

for path in "${pathsToCopy[@]}"; do
    destinationSuffix=""
    sourceReplaced="${path/%.git/.git.686fc528-0e8e-4724-91bb-c103cdcdd592}"
    sourceReplaced="${sourceReplaced/%.git\//.git.686fc528-0e8e-4724-91bb-c103cdcdd592\/}"
    sourceReplaced="${sourceReplaced/%.gitignore/.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd}"
    sourceReplaced="${sourceReplaced/%.gitignore\//.gitignore.24355e64-bfd5-4cb7-92f9-4417fb55ccfd\/}"
    sourceReplaced="${sourceReplaced/%.gitmodules/.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e}"
    sourceReplaced="${sourceReplaced/%.gitmodules\//.gitmodules.e17e15dc-7ed4-4b99-8acb-019f503afb9e\/}"
    if [[ -d "$path" ]]; then
        destinationSuffix="/"
    fi
    if [[ "$path" =~ '/'$ ]]; then
        destinationRoot="$sourceReplaced"
        destinationFindTarget="$destinationReplaced$destinationSuffix"
    else
        destinationRoot="$(dirname "$sourceReplaced")"
        destinationFindTarget="$destinationReplaced/$(basename "$sourceReplaced")$destinationSuffix"
    fi
    if [[ "$destinationRoot" == "." ]]; then
        destinationRootLength="0"
    else
        destinationRootLength=${#destinationRoot}
    fi
    # Use $path in find commands rather than sourceReplaced because sourceReplaced is used for the target computation and post-processing (post-processing with find, that is).
    if [[ "$sregNoVerify" == "true" ]]; then
        find "$path" -type f -exec sregi_copy_write "$failCheckFile" --skip "$skipCount" --sreg-dir "$sregDir" --no-verify {} "$destinationReplaced" "$statusFile" "$destinationRootLength" \;
    else
        find "$path" -type f -exec sregi_copy_write "$failCheckFile" --skip "$skipCount" --sreg-dir "$sregDir" {} "$destinationReplaced" "$statusFile" "$destinationRootLength" \;
    fi
    # This NEEDS to skip regular files, because otherwise files that don't exist in the directory will be copied and take up space!
    # FIXME: WTF? The regular files that don't exist should already have been copied by sregi_copy_write.
    # rsync -a --ignore-existing --no-i-r "${pathsToCopy[@]}" "$destinationParameter/"
    find "$destinationFindTarget" -type d -empty -exec bash -c 'echo "d61b6a4f-525b-458a-b8d2-4a9592e22caa" > "$0/.d61b6a4f-525b-458a-b8d2-4a9592e22caa.keep"' {} \;
done

if [[ -e "$failCheckFile" ]]; then
    die "An invocation of sregi_copy_write (called from $0) failed with the message \"$(<"$failCheckFile")\"!"
fi

finish
