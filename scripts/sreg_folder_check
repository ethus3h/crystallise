#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

((EUID)) && exec sudo -- "$0" "$@"

sregDir=""
if [[ "$1" == "--sreg-dir" ]]; then
    shift
    sregDir="$1"
    shift
fi

finish() {
    save_traps="$(trap)"
    trap - ERR
    rm -f "${failCheckFile:?}"
    eval "$save_traps"

    trap - ERR
    if [[ -e "$crystalWorkdir/${fsckId:?}" ]]; then
        rm -r "$crystalWorkdir/${fsckId:?}"
    fi
    if [[ -e "/tmp/${fsckId:?}" ]]; then
        rm -r "/tmp/${fsckId:?}"
    fi
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate) while finishing sreg_folder_check."' ERR
}
trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; finish; exit 1' ERR
trap finish EXIT

sregVerify=""
if [[ "$1" == "--verify" ]]; then
    sregVerify="--verify"
    shift
fi

dropUnused="false"
pretendDropUnused="true"
if [[ "$1" == "--drop-unused" ]] || [[ "$1" == "--drop" ]]; then
    pretendDropUnused="true"
    shift
    if [[ "$1" == "--delete" ]]; then
        dropUnused="true"
        shift
    fi
fi

folderToCheck="$1"
if [[ -z "$folderToCheck" ]]; then
    folderToCheck="${EmberLibrary:?}"
fi

sregDir="$(sregi_find_dir --sreg-dir "$sregDir" --full-check "$folderToCheck")"

echo "Counting items..."
crystalWorkdir="$(crystallize-getconf WorkDirectory)"
fsckId="sreg_folder_check-$(date-uuid)"
failCheckFile="/tmp/$fsckId.running"
mkdir -p "$crystalWorkdir/${fsckId:?}"
mkdir -p "/tmp/${fsckId:?}"
fsckStatusFile="/tmp/$fsckId/.sreg_folder_check.status"
fsckIdList="/tmp/$fsckId/.sreg_folder_check.idlist"
find "$folderToCheck" -type f -printf '.' | wc -c > "$fsckStatusFile"
find "$folderToCheck" -type f -exec sregi_hashpointer_sane --fail-check "$failCheckFile" --sreg-dir "$sregDir" {} "$fsckIdList" "$fsckStatusFile" "$sregVerify" \;


if [[ -e "$failCheckFile" ]]; then
    die "An invocation of sregi_hashpointer_sane (called from $0) failed with the message \"$(<"$failCheckFile")\"!"
fi

if [[ "$dropUnused" == "false" ]] && [[ "$pretendDropUnused" == "false" ]]; then
    finish
    exit 0
fi

find "$sregDir" -not -path "$sregDir/Unused Pointers/*" -type f -printf '.' | wc -c > "$fsckStatusFile"
echo "0" > "$fsckStatusFile.done"

if [[ "$dropUnused" == "true" ]]; then
    find "$sregDir" -not -path "$sregDir/Unused Pointers/*" -type f -exec sregi_drop_single_unused "$failCheckFile" --sreg-dir "$sregDir" {} "$fsckIdList" "$fsckStatusFile" \;
else
    find "$sregDir" -not -path "$sregDir/Unused Pointers/*" -type f -exec echo "Would have dropped pointer: " {} \;
fi

if [[ -e "$failCheckFile" ]]; then
    die "An invocation of sregi_drop_single_unused (called from $0) failed with the message \"$(<"$failCheckFile")\"!"
fi

finish
